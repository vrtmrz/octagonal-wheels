{"version":3,"file":"function.js","sources":["../src/function.ts"],"sourcesContent":["type ThrottledFunction<T extends (...args: any[]) => any> = (...args: Parameters<T>) => void;\r\n\r\n/**\r\n * Thinning out the execution of a function by delaying subsequent invocations\r\n * until a specified timeout has passed since the last invocation.\r\n *\r\n * @template T - The type of the function being throttled.\r\n * @param func - The function to be throttled.\r\n * @param timeout - The timeout value in milliseconds.\r\n * @returns A throttled function that delays subsequent invocations.\r\n */\r\nexport const throttle = <T extends (...args: any[]) => any>(func: T, timeout: number): ThrottledFunction<T> => {\r\n    let timer: ReturnType<typeof setTimeout> | undefined;\r\n    let lastTime: number = 0; // initialize lastTime to 0\r\n    return (...args: Parameters<T>) => {\r\n\r\n        if (!lastTime) {\r\n            func(...args);\r\n            lastTime = Date.now();\r\n        } else {\r\n            clearTimeout(timer);\r\n            const delayTime = timeout - (Date.now() - lastTime);\r\n            timer = setTimeout(() => {\r\n                func(...args);\r\n                lastTime = Date.now();\r\n            }, delayTime);\r\n        }\r\n    };\r\n};\r\n"],"names":[],"mappings":"AAEA;;;;;;;;AAQG;MACU,QAAQ,GAAG,CAAoC,IAAO,EAAE,OAAe,KAA0B;AAC1G,IAAA,IAAI,KAAgD,CAAC;AACrD,IAAA,IAAI,QAAQ,GAAW,CAAC,CAAC;AACzB,IAAA,OAAO,CAAC,GAAG,IAAmB,KAAI;QAE9B,IAAI,CAAC,QAAQ,EAAE;AACX,YAAA,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AACd,YAAA,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;SACzB;aAAM;YACH,YAAY,CAAC,KAAK,CAAC,CAAC;AACpB,YAAA,MAAM,SAAS,GAAG,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC,CAAC;AACpD,YAAA,KAAK,GAAG,UAAU,CAAC,MAAK;AACpB,gBAAA,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AACd,gBAAA,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;aACzB,EAAE,SAAS,CAAC,CAAC;SACjB;AACL,KAAC,CAAC;AACN;;;;"}