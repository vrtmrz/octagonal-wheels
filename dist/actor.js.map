{"version":3,"file":"actor.js","sources":["../src/actor.ts"],"sourcesContent":["const LogActorName = \"LogActor\";\nexport type ActorLogMessage = {\n    level?: \"info\" | \"warn\" | \"error\" | \"verbose\";\n    message: string;\n}\n\n/**\n * Represents a hub for managing actors.\n * @template T - The type of the message that can be dispatched to actors.\n */\nclass ActorHub<T> {\n    constructor() {\n        // super();\n    }\n\n    /**\n     * Represents a map of actors.\n     * The key is a name of actors, and the value is an array of actors of type T.\n     * Exposed for testing purposes. Do not use it directly.\n     */\n    _actorMap: Map<string, Actor<T>[]> = new Map();\n\n    /**\n     * Represents a map of round-robin indexes for actors.\n     * The key is a name of actors, and the value is an index of the actor in the array of actors of type T.\n     * Exposed for testing purposes. Do not use it directly.\n     */\n    _actorRRIndex: Map<string, number> = new Map();\n\n\n\n    /**\n     * Adds an actor to be managed by the hub.\n     * This method is used internally by the Actor class, but it can be used if you are sure and want to make an original and custom actor.\n     * @param actor - The actor to be added.\n     */\n    add(actor: Actor<T>) {\n        const name = actor.name;\n        const actors = this._actorMap.get(name) ?? [];\n        if (actor.multiInstance) {\n            actors.push(actor);\n        } else {\n            if (actors.length > 0) {\n                actors[0].destroy();\n                this.dispatch(LogActorName, { level: \"warn\", message: `The instance of Actor ${name} has been replaced` } as unknown as T);\n            }\n            actors.length = 0;\n            actors[0] = actor;\n        }\n        this._actorMap.set(name, actors);\n    }\n\n    remove(actor: Actor<T>) {\n        const name = actor.name;\n        const actors = this._actorMap.get(name) ?? [];\n        const index = actors.indexOf(actor);\n        if (index >= 0) {\n            actors.splice(index, 1);\n        }\n    }\n\n    dispatch(actorName: string, message: T) {\n        const actors = this._actorMap.get(actorName) as Actor<T>[];\n        if (actors && actors.length > 0) {\n            let index = 0;\n            if (actors.length > 1) {\n                index = this._actorRRIndex.get(actorName) ?? 0;\n                index++;\n                index %= actors.length;\n                this._actorRRIndex.set(actorName, index);\n                // Round robin\n            }\n            actors[index]._enqueue(message);\n        } else {\n            console.warn(`${actorName} -${LogActorName}`);\n            if (actorName !== LogActorName) {\n                this.dispatch(LogActorName, { level: \"error\", message: `The instance of Actor ${actorName} is not assigned to the hub` } as unknown as T);\n            } else {\n                // Prevent infinite loop, but it should not happen. This will not be tested deeply.\n                console.error(`${LogActorName} is not assigned but dispatched to itself`);\n            }\n        }\n    }\n}\n\n/**\n * Represents an abstract class for an actor.\n * @template T - The type of the message that the actor can process.\n */\nexport abstract class Actor<T> {\n    /**\n     * The name of the actor.\n     */\n    readonly name: string;\n    /**\n     * Indicates whether the actor is a multi-instance.\n     */\n    readonly multiInstance: boolean;\n\n    /**\n     * Represents the hub for actors.\n     */\n    static hub: ActorHub<any> = new ActorHub();\n\n    /**\n     * Initializes a new instance of the Actor class.\n     * @param name - The name of the actor. It will be the class name if not provided.\n     * @param multiInstance - Indicates whether the actor is a multi-instance. The default value is false. If true, the actor can have multiple instances to process each message concurrently.\n     */\n    constructor({ name, multiInstance }: { name?: string, multiInstance?: boolean } = {}) {\n        this.name = name || this.constructor.name;\n        this.multiInstance = multiInstance ?? false;\n        Actor.hub.add(this);\n    }\n\n\n\n    _busy: boolean = false;\n    async _process(message: T) {\n        // Internal method to pumping process a message\n        this._busy = true;\n        try {\n            const w = this.process(message);\n            if (w instanceof Promise) {\n                await w;\n            }\n        } finally {\n            this._busy = false;\n        }\n    }\n\n    // Promise chain to process messages sequentially. DO NOT USE IT. it is exposed for testing purposes.\n    __process: Promise<void> | undefined = Promise.resolve();\n\n    // Enqueue a message to be processed\n    _enqueue(message: T) {\n        if (this.__process === undefined) {\n            throw new Error(\"The actor has been destroyed\");\n        }\n        this.__process = this.__process.finally(() => {\n            return this._process(message);\n        });\n    }\n\n    /**\n     * Processes a message. This method should be overridden in the derived class. Automatically called when a message is dispatched to the actor.\n     * @param message - The message to be processed.\n     */\n    abstract process(message: T): Promise<void> | void;\n\n    /** \n     * Dispatches a message to the actor.\n     * Note: Even if we posted messages to the specific actor, the message will be processed by some actor instances if the actor is a multi-instance.\n     * @param message - The message to be dispatched.\n     */\n    post(message: T) {\n        Actor.hub.dispatch(this.name, message);\n    }\n\n\n    /**\n     * Posts a message to this actor instance.\n     * \n     * @param message - The message to be posted.\n     */\n    postToThisInstance(message: T) {\n        this._enqueue(message);\n    }\n\n    /**\n     * Dispatches a message to the specified actor.\n     * Utility method to dispatch a message to the actor, which is the subsequent actor of the current actor.\n     * Just for hiding the hub from the derived class.\n     * @template U - The type of the message.\n     * @template V - The type of the actor.\n     * @param actor - The actor to dispatch the message to.\n     * @param message - The message to be dispatched.\n     */\n    dispatch<U, V extends U>(actor: typeof Actor<V>, message: U) {\n        Actor.hub.dispatch(actor.name, message);\n    }\n\n\n    /**\n     * Destroys the actor instance.\n     */\n    destroy() {\n        if (this.__process) {\n            this.__process.finally(\n                () => this.__process = undefined as any\n            )\n            this.__process = undefined;\n        }\n        Actor.hub.remove(this);\n    }\n}\n\nexport abstract class LogActorBase extends Actor<ActorLogMessage> {\n    constructor() {\n        // Make it never overridable in the derived class\n        super({ name: `LogActor` });\n    }\n}\n"],"names":[],"mappings":"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"}