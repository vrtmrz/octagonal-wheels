{"version":3,"file":"string.js","sources":["../src/string.ts"],"sourcesContent":["\n/**\n * Replaces all occurrences of a substring in a string with a new substring.\n * If the `replaceAll` method is available, it uses that method. Otherwise, it splits the string and joins it with the new substring.\n * \n * @param {string} str - The original string.\n * @param {string} search - The substring to be replaced.\n * @param {string} replace - The new substring to replace the occurrences of `search`.\n * @returns {string} The modified string with all occurrences of `search` replaced by `replace`.\n */\nexport function replaceAll(str: string, search: string, replace: string): string {\n    if (\"replaceAll\" in String.prototype) {\n        //@ts-ignore\n        return str.replaceAll(search, replace);\n    }\n    return str.split(search).join(replace);\n}\n\n/**\n * Replaces all occurrences of multiple pairs of substrings in a string.\n * \n * @param str - The input string.\n * @param fromTo - An array of tuples representing the pairs of substrings to be replaced.\n * Each tuple should contain two elements: the substring to be replaced and the replacement substring.\n * @returns The modified string with all occurrences of the specified substrings replaced.\n */\nexport function replaceAllPairs(str: string, ...fromTo: [from: string, to: string][]): string {\n    let r = `${str}`;\n    for (const [from, to] of fromTo) {\n        r = replaceAll(r, from, to);\n    }\n    return r;\n}\n\n\n\n/**\n * Escapes a string to HTML by replacing special characters with their corresponding HTML entities.\n * \n * @param str - The string to escape.\n * @returns The escaped string.\n * @remarks This function escapes the following characters: `<`, `>`, `&`, `\"`, `'`, and `` ` ``. Not all special characters are escaped.\n */\nexport function escapeStringToHTML(str: string) {\n    if (!str) return \"\";\n    return str.replace(/[<>&\"'`]/g, (match) => {\n        const escape: any = {\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            \"&\": \"&amp;\",\n            '\"': \"&quot;\",\n            \"'\": \"&#39;\",\n            \"`\": \"&#x60;\",\n        };\n        return escape[match];\n    });\n}"],"names":[],"mappings":"AACA;;;;;;;;AAQG;SACa,UAAU,CAAC,GAAW,EAAE,MAAc,EAAE,OAAe,EAAA;AACnE,IAAA,IAAI,YAAY,IAAI,MAAM,CAAC,SAAS,EAAE;;QAElC,OAAO,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC;;IAE1C,OAAO,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;AAC1C;AAEA;;;;;;;AAOG;SACa,eAAe,CAAC,GAAW,EAAE,GAAG,MAAoC,EAAA;AAChF,IAAA,IAAI,CAAC,GAAG,CAAG,EAAA,GAAG,EAAE;IAChB,KAAK,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,MAAM,EAAE;QAC7B,CAAC,GAAG,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC;;AAE/B,IAAA,OAAO,CAAC;AACZ;AAIA;;;;;;AAMG;AACG,SAAU,kBAAkB,CAAC,GAAW,EAAA;AAC1C,IAAA,IAAI,CAAC,GAAG;AAAE,QAAA,OAAO,EAAE;IACnB,OAAO,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,KAAK,KAAI;AACtC,QAAA,MAAM,MAAM,GAAQ;AAChB,YAAA,GAAG,EAAE,MAAM;AACX,YAAA,GAAG,EAAE,MAAM;AACX,YAAA,GAAG,EAAE,OAAO;AACZ,YAAA,GAAG,EAAE,QAAQ;AACb,YAAA,GAAG,EAAE,OAAO;AACZ,YAAA,GAAG,EAAE,QAAQ;SAChB;AACD,QAAA,OAAO,MAAM,CAAC,KAAK,CAAC;AACxB,KAAC,CAAC;AACN;;;;"}