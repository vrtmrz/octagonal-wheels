{"version":3,"file":"string.js","sources":["../src/string.ts"],"sourcesContent":["\r\n/**\r\n * Replaces all occurrences of a substring in a string with a new substring.\r\n * If the `replaceAll` method is available, it uses that method. Otherwise, it splits the string and joins it with the new substring.\r\n * \r\n * @param {string} str - The original string.\r\n * @param {string} search - The substring to be replaced.\r\n * @param {string} replace - The new substring to replace the occurrences of `search`.\r\n * @returns {string} The modified string with all occurrences of `search` replaced by `replace`.\r\n */\r\nexport function replaceAll(str: string, search: string, replace: string): string {\r\n    if (\"replaceAll\" in String.prototype) {\r\n        //@ts-ignore\r\n        return str.replaceAll(search, replace);\r\n    }\r\n    return str.split(search).join(replace);\r\n}\r\n\r\n/**\r\n * Replaces all occurrences of multiple pairs of substrings in a string.\r\n * \r\n * @param str - The input string.\r\n * @param fromTo - An array of tuples representing the pairs of substrings to be replaced.\r\n * Each tuple should contain two elements: the substring to be replaced and the replacement substring.\r\n * @returns The modified string with all occurrences of the specified substrings replaced.\r\n */\r\nexport function replaceAllPairs(str: string, ...fromTo: [from: string, to: string][]): string {\r\n    let r = `${str}`;\r\n    for (const [from, to] of fromTo) {\r\n        r = replaceAll(r, from, to);\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Escapes a string to HTML by replacing special characters with their corresponding HTML entities.\r\n * \r\n * @param str - The string to escape.\r\n * @returns The escaped string.\r\n * @remarks This function escapes the following characters: `<`, `>`, `&`, `\"`, `'`, and `` ` ``. Not all special characters are escaped.\r\n */\r\nexport function escapeStringToHTML(str: string) {\r\n    if (!str) return \"\";\r\n    return str.replace(/[<>&\"'`]/g, (match) => {\r\n        const escape: any = {\r\n            \"<\": \"&lt;\",\r\n            \">\": \"&gt;\",\r\n            \"&\": \"&amp;\",\r\n            '\"': \"&quot;\",\r\n            \"'\": \"&#39;\",\r\n            \"`\": \"&#x60;\",\r\n        };\r\n        return escape[match];\r\n    });\r\n}"],"names":[],"mappings":"AACA;;;;;;;;AAQG;SACa,UAAU,CAAC,GAAW,EAAE,MAAc,EAAE,OAAe,EAAA;AACnE,IAAA,IAAI,YAAY,IAAI,MAAM,CAAC,SAAS,EAAE;;QAElC,OAAO,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;KAC1C;IACD,OAAO,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3C,CAAC;AAED;;;;;;;AAOG;SACa,eAAe,CAAC,GAAW,EAAE,GAAG,MAAoC,EAAA;AAChF,IAAA,IAAI,CAAC,GAAG,CAAG,EAAA,GAAG,EAAE,CAAC;IACjB,KAAK,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,MAAM,EAAE;QAC7B,CAAC,GAAG,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;KAC/B;AACD,IAAA,OAAO,CAAC,CAAC;AACb,CAAC;AAID;;;;;;AAMG;AACG,SAAU,kBAAkB,CAAC,GAAW,EAAA;AAC1C,IAAA,IAAI,CAAC,GAAG;AAAE,QAAA,OAAO,EAAE,CAAC;IACpB,OAAO,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,KAAK,KAAI;AACtC,QAAA,MAAM,MAAM,GAAQ;AAChB,YAAA,GAAG,EAAE,MAAM;AACX,YAAA,GAAG,EAAE,MAAM;AACX,YAAA,GAAG,EAAE,OAAO;AACZ,YAAA,GAAG,EAAE,QAAQ;AACb,YAAA,GAAG,EAAE,OAAO;AACZ,YAAA,GAAG,EAAE,QAAQ;SAChB,CAAC;AACF,QAAA,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;AACzB,KAAC,CAAC,CAAC;AACP;;;;"}