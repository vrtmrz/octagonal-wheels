{"version":3,"file":"Inbox.js","sources":["../../src/bureau/Inbox.ts"],"sourcesContent":["import { cancelableDelay, isSomeResolved, promiseWithResolver, type PromiseWithResolvers } from \"../promises\";\nexport const NOT_AVAILABLE = Symbol(\"NotAvailable\");\nexport type NOT_AVAILABLE = typeof NOT_AVAILABLE;\n\n\nexport const READY_PICK_SIGNAL = Symbol(\"lockReady\");\nexport type READY_PICK_SIGNAL = typeof READY_PICK_SIGNAL;\n\nexport const READY_POST_SIGNAL = Symbol(\"lockFull\");\nexport type READY_POST_SIGNAL = typeof READY_POST_SIGNAL;\n\nexport const DISPOSE_ERROR = \"Inbox has been disposed\";\n\n\nexport class SyncInbox<T> {\n\n    _capacity: number;\n    _buffer: T[];\n    // Read from head, write to tail.\n    _writeIdx: number = 0;\n    _readIdx: number = 0;\n    _wrapAroundCount: number = 0;\n    _isDisposed: boolean = false;\n    _disposedPromise: PromiseWithResolvers<void> = promiseWithResolver();\n    constructor(capacity: number) {\n        if (capacity <= 0) {\n            throw new Error(\"Capacity must be greater than 0\");\n        }\n        this._capacity = ~~capacity;\n        let i = 256;\n        while (i < capacity + 1) {\n            i *= 2;\n        }\n        i--;\n        // i = 2^n - 1\n        // if capacity = 4, wrapAroundCount = 7\n        // 4: 0b100\n        // 7: 0b111\n        // Using bitwise AND operation for performance instead of mathematical modulo calculation.\n        this._wrapAroundCount = i;\n\n        this._buffer = new Array(i);\n        this._writeIdx = 0;\n        this._readIdx = 0;\n    }\n\n    /**\n     * The number of items in the buffer.\n     */\n    get size() {\n        return this._writeIdx - this._readIdx;\n    }\n    /**\n     * The number of free slots in the buffer.\n     */\n    get free() {\n        return this._capacity - this.size;\n    }\n\n    /**\n     * Whether the buffer is running out.\n     */\n    get isRunningOut() {\n        return this._writeIdx == this._readIdx;\n    }\n\n    /**\n   * Whether the buffer is full.\n   */\n    get isFull() {\n        return this.free == 0;\n    }\n\n    /**\n     * Whether the buffer is ready to be picked.\n     */\n    get isReady() {\n        return this.free > 0;\n    }\n\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    get onDisposed() {\n        return this._disposedPromise.promise;\n    }\n\n    __fixIdx() {\n        // Resetting the index when it reaches the wrap around count to prevent overflow, of both read and write index.\n        // This is to prevent the index from overflowing.\n        // And it also keeps _writeIdx - _readIdx always positive.\n        if (this._readIdx > this._wrapAroundCount) {\n            // If the readIdx is greater than the wrapAroundCount, writeIdx is also greater than the wrapAroundCount.\n            this._readIdx = this._readIdx & this._wrapAroundCount;\n            this._writeIdx = this._writeIdx & this._wrapAroundCount;\n        }\n    }\n\n    get state(): InboxStateDetail {\n        return {\n            processed: this._writeIdx,\n            size: this.size,\n            free: this.free,\n            isFull: this.isFull,\n            isRunningOut: this.isRunningOut,\n            isReady: this.isReady\n        };\n    }\n\n    dispose() {\n        // Forcefully clear the buffer.\n        this._readIdx = 0;\n        this._writeIdx = 0;\n        this._capacity = 0;\n        this._buffer.length = 1;\n        this._buffer[0] = undefined!;\n        this._wrapAroundCount = 1;\n        this._isDisposed = true;\n        this._disposedPromise.resolve();\n    }\n\n    __onPosted() {\n        this.__onProgress();\n    }\n\n    __onPicked() {\n        this.__onProgress();\n    }\n\n    __onProgress() {\n        this.__fixIdx();\n    }\n\n    /**\n     * Tries to post an item to the buffer.\n     * @param item The item to post.\n     * @returns whether the item is posted. `false` if the buffer is full.\n     */\n    tryPost(item: T) {\n        if (this.isFull) {\n            return false;\n        }\n        this._writeIdx++;\n        this._buffer[this._writeIdx & this._wrapAroundCount] = item;\n        this.__onPosted();\n        return true;\n    }\n\n    /**\n     * Tries to cancel the last posted item.\n     * @returns The item picked, or `NOT_AVAILABLE` if no item is available.\n     */\n    tryCancelPost() {\n        if (this.size == 0) {\n            return NOT_AVAILABLE;\n        }\n        const pointingIdx = this._writeIdx & this._wrapAroundCount;\n        const item = this._buffer[pointingIdx];\n        this._buffer[pointingIdx] = undefined!;\n        this._writeIdx--;\n        this.__fixIdx();\n        return item;\n    }\n\n    /**\n     * Tries to pick an item from the buffer.\n     * @returns The item picked, or `NOT_AVAILABLE` if no item is available.\n     */\n    tryPick(): T | NOT_AVAILABLE {\n        if (this.isRunningOut) {\n            return NOT_AVAILABLE;\n        }\n        this._readIdx++;\n        const pointingIdx = this._readIdx & this._wrapAroundCount;\n        const item = this._buffer[pointingIdx];\n        this._buffer[pointingIdx] = undefined!;\n        this.__onPicked();\n        return item;\n    }\n\n}\nexport class Inbox<T> extends SyncInbox<T> {\n\n    _lockFull: PromiseWithResolvers<READY_POST_SIGNAL> | undefined;\n    _lockReady: PromiseWithResolvers<READY_PICK_SIGNAL> | undefined;\n\n    /**\n     * Creates a new PostBox.\n     * @param capacity The capacity of the buffer.\n     */\n    constructor(capacity: number) {\n        super(capacity);\n\n    }\n\n    async _waitForFree(): Promise<READY_POST_SIGNAL> {\n        while (this.free == 0) {\n            if (!this._lockFull) {\n                this._lockFull = promiseWithResolver();\n            }\n            return await this._lockFull.promise;\n        }\n        return READY_POST_SIGNAL;\n    }\n\n    _notifyFree() {\n        this._lockFull?.resolve(READY_POST_SIGNAL);\n        this._lockFull = undefined;\n    }\n\n    async _waitForReady(): Promise<READY_PICK_SIGNAL> {\n        while (this.isRunningOut) {\n            if (!this._lockReady) {\n                this._lockReady = promiseWithResolver();\n            }\n            return await this._lockReady.promise;\n        }\n        return READY_PICK_SIGNAL;\n    }\n\n    _notifyReady() {\n        this._lockReady?.resolve(READY_PICK_SIGNAL);\n        this._lockReady = undefined;\n    }\n    __onPosted() {\n        super.__onPosted();\n        this._notifyReady();\n    }\n    __onPicked() {\n        super.__onPicked();\n        this._notifyFree();\n    }\n\n    dispose() {\n        super.dispose();\n        if (this._lockFull) {\n            this._lockFull.reject(new Error(DISPOSE_ERROR));\n            this._lockFull = undefined;\n        }\n        if (this._lockReady) {\n            this._lockReady.reject(new Error(DISPOSE_ERROR));\n            this._lockReady = undefined;\n        }\n    }\n\n    /**\n     * Posts an item to the buffer.\n     * Waits until a slot is available.\n     * @param item The item to post.\n     * @param timeout The timeout in milliseconds.\n     * @param cancellation The promise that cancels the operation.\n     * @returns whether the item is posted.\n     */\n    async post(item: T, timeout?: number, cancellation?: Promise<any>[]) {\n        if (this._isDisposed) {\n            throw new Error(DISPOSE_ERROR);\n        }\n        do {\n            // If cancellation is provided, check if it is resolved.\n            // And if it is resolved, return false before actually posting item\n            // Possibly we can accept an item and move this check to after tryPost for performance.\n            if (cancellation && cancellation.length > 0 && await (isSomeResolved(cancellation))) {\n                return false;\n            }\n\n            const result = this.tryPost(item);\n            if (result) {\n                return true;\n            }\n            // If the buffer is full (that identified by false return from tryPost)\n            let p: ReturnType<typeof cancelableDelay> | undefined;\n            const tasks = [\n                this._waitForFree(),\n                ...(timeout ? [(p = cancelableDelay(timeout)).promise] : []),\n                ...(cancellation ? cancellation : [])] as Promise<any>[];\n            const r = await Promise.race(tasks);\n            p?.cancel();\n            if (r === READY_POST_SIGNAL) {\n                // Not full anymore.\n                // Probably we can post now.\n                continue;\n            }\n            // Other case, timeout or cancelled by the cancellation promise.\n            return false;\n\n        } while (!this._isDisposed);\n        // This means the inbox is disposed while waiting, probably by the cancellation promise.\n        return false;\n    }\n\n    /**\n       * Picks an item from the buffer.\n       * Waits until an item is available.\n       * @param timeout The timeout in milliseconds.\n       * @param cancellation The promise that cancels the operation.\n       * @returns The item picked.\n       */\n    async pick(timeout?: number, cancellation?: Promise<any>[]): Promise<T | NOT_AVAILABLE> {\n        // console.log(`blocking: ${nonBlocking} timeout: ${timeout} cancellation: ${cancellation}`);\n        // console.log(`Picking ${this._readIdx} -> ${this._writeIdx} `);\n        // console.log(`Size: ${this.size} (${this.free} free)`);\n        if (this._isDisposed) {\n            throw new Error(DISPOSE_ERROR);\n        }\n        do {\n            // If cancellation is provided, check if it is resolved.\n            // And if it is resolved, return NOT_AVAILABLE before actually picking item.\n            // Possibly we can accept an item and move this check to after tryPick for performance.\n            if (cancellation && cancellation.length > 0 && await (isSomeResolved(cancellation))) {\n                return NOT_AVAILABLE;\n            }\n            const item = this.tryPick();\n            if (item !== NOT_AVAILABLE) {\n                return item;\n            }\n            // Begin waiting for the buffer to be ready.\n            let p: ReturnType<typeof cancelableDelay> | undefined;\n            const tasks = [\n                this._waitForReady(),\n                ...(timeout ? [(p = cancelableDelay(timeout)).promise] : []),\n                ...(cancellation ? cancellation : [])] as Promise<any>[];\n            // console.log(tasks);\n            const r = await Promise.race(tasks);\n            // console.log(`Tasks!:${String(r)}`);\n            p?.cancel();\n            if (r === READY_PICK_SIGNAL) {\n                // Not running out anymore.\n                // Probably we can pick now.\n                continue;\n            }\n            // Cancelled by the cancellation promise.\n            return NOT_AVAILABLE;\n\n        } while (!this.isDisposed);\n        // This means the inbox is disposed while waiting, probably by the cancellation promise.\n        return NOT_AVAILABLE;\n\n    }\n\n}\n\nexport const EVENT_PROGRESS = \"progress\";\ntype EVENT_PROGRESS = typeof EVENT_PROGRESS;\nexport type InboxStateDetail = {\n    processed: number;\n    size: number;\n    free: number;\n    isFull: boolean;\n    isRunningOut: boolean;\n    isReady: boolean;\n};\n\nexport class InboxWithEvent<T> extends Inbox<T> {\n    _callback?: (detail: InboxStateDetail) => void;\n    constructor(capacity: number, onProgress?: (detail: InboxStateDetail) => void) {\n        super(capacity);\n        this._callback = onProgress;\n    }\n\n    _processed = 0;\n    __onProgress() {\n        this._processed++;\n        const event = new CustomEvent<InboxStateDetail>(EVENT_PROGRESS, {\n            detail: this.state\n        });\n        this._callback?.(event.detail);\n    }\n    setOnProgress(callback: (detail: InboxStateDetail) => void) {\n        this._callback = callback;\n    }\n}"],"names":[],"mappings":"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"}