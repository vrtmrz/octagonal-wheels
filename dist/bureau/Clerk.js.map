{"version":3,"file":"Clerk.js","sources":["../../src/bureau/Clerk.ts"],"sourcesContent":["import { LOG_LEVEL_VERBOSE, Logger } from \"../common/logger\";\nimport { promiseWithResolver, yieldMicrotask } from \"../promises\";\nimport { DISPOSE_ERROR, Inbox, NOT_AVAILABLE, InboxStateDetail } from \"./Inbox\";\n\nexport enum ClerkState {\n    IDLE = \"idle\",\n    DISPOSED = \"disposed\",\n    WORKING = \"working\",\n    STALLED = \"not-started\",\n}\n\n\nexport type ClerkOptionBase<T> = {\n    name?: string;\n    assigned: Inbox<T>;\n};\n\nexport type ClerkOption<T> = ClerkOptionBase<T> & {\n    job: (item: T) => Promise<any> | any;\n};\n\n\nexport type ClerkGroupOption<T, U extends ClerkBase<T>> = ClerkOptionBase<T> & {\n    job: (item: T) => Promise<any> | any;\n    instantiate: (params: ClerkOption<T>) => U;\n    initialMemberCount: number;\n};\n\nexport const SENTINEL_FINISHED = Symbol(\"finished\");\nexport const SENTINEL_FLUSH = Symbol(\"flush\");\n\nexport type SENTINELS = typeof SENTINEL_FINISHED | typeof SENTINEL_FLUSH;\n\n\ntype FeederStateDetail = {\n    hasStarted: boolean;\n    hasFinished: boolean;\n    totalFetched: number,\n    totalProcessed: number,\n};\ntype ClerkStateDetail = {\n    inboxDetail: InboxStateDetail,\n    totalFetched: number,\n    totalProcessed: number,\n    isBusy: boolean,\n    hasStarted: boolean,\n    state: ClerkState,\n};\nexport abstract class ClerkBase<T> {\n    _inbox: Inbox<T>;\n    _name: string;\n    abstract _onPick(item: T): Promise<void>;\n    _onSentinel?(item: SENTINELS): Promise<any>;\n\n    _state: ClerkState = ClerkState.STALLED;\n    _totalProcessed = 0;\n    _totalSuccess = 0;\n    _totalFailed = 0;\n    _totalFetched = 0;\n    _disposed = false;\n    _disposePromise = promiseWithResolver<void>();\n    get state() {\n        return this._state;\n    }\n    constructor(params: ClerkOptionBase<T>) {\n        const { name, assigned } = params;\n        this._inbox = assigned;\n        this._name = name ?? this.constructor.name;\n        void yieldMicrotask().then(() => this._mainLoop());\n        void this._inbox.onDisposed.then(() => this.dispose());\n    }\n    get stateDetail(): ClerkStateDetail {\n        const hasStarted = this._totalFetched != 0;\n        const hasAnyUnprocessed = this._totalFetched != this._totalProcessed;\n        const inboxDetail = this._inbox.state;\n        const hasAnyInInbox = inboxDetail.size != 0;\n        const isBusy = hasAnyInInbox || hasAnyUnprocessed;\n        return {\n            totalFetched: this._totalFetched,\n            inboxDetail: this._inbox.state,\n            totalProcessed: this._totalProcessed,\n            state: this._state,\n            hasStarted: hasStarted,\n            isBusy: isBusy\n        };\n    }\n\n    _onProgress?: (state: ClerkStateDetail) => void;\n\n    onProgress() {\n        try {\n            this._onProgress?.(this.stateDetail);\n        } catch {\n            // do nothing\n        }\n    }\n    setOnProgress(callback: (state: ClerkStateDetail) => void) {\n        this._onProgress = callback;\n    }\n    async _mainLoop() {\n        this._state = ClerkState.STALLED;\n        this.onProgress();\n        await yieldMicrotask();\n        do {\n            this._state = ClerkState.IDLE;\n            this.onProgress();\n            try {\n                const item = await this._inbox.pick(undefined, [this._disposePromise.promise]);\n                if (item === SENTINEL_FLUSH || item === SENTINEL_FINISHED) {\n                    await this._onSentinel?.(item as SENTINELS);\n                    continue;\n                }\n                if (item === NOT_AVAILABLE) {\n                    if (this._inbox.isDisposed) {\n                        this._state = ClerkState.DISPOSED;\n                        break;\n                    }\n                    continue;\n                }\n                this._totalFetched++;\n                this._state = ClerkState.WORKING;\n                this.onProgress();\n                try {\n                    await this._onPick(item);\n                    this._totalSuccess++;\n\n                } catch (ex) {\n                    this._totalFailed++;\n                    Logger(\"Error on processing job on clerk\");\n                    Logger(ex, LOG_LEVEL_VERBOSE);\n                }\n                this._totalProcessed++;\n                this.onProgress();\n            } catch (ex) {\n                if (ex instanceof Error && ex.message !== DISPOSE_ERROR) {\n                    Logger(\"Error on picking item on clerk\");\n                    Logger(ex, LOG_LEVEL_VERBOSE);\n                }\n            }\n        } while (!this._inbox.isDisposed && !this._disposed);\n        this._state = ClerkState.IDLE;\n        if (!this._disposed) {\n            this.dispose();\n        } else {\n            this._state = ClerkState.DISPOSED;\n        }\n        this.onProgress();\n    }\n\n    dispose() {\n        // this._inbox.dispose();\n        this._disposePromise.resolve();\n        this._disposed = true;\n        this._state = ClerkState.DISPOSED;\n    }\n    get onDisposed() {\n        return this._disposePromise.promise;\n    }\n\n}\n\nexport class Clerk<T> extends ClerkBase<T> {\n\n    async _onPick(item: T): Promise<void> {\n        return await this._job(item);\n    }\n\n    _job: (item: T) => Promise<any>;\n\n    constructor(params: ClerkOption<T>) {\n        super(params);\n        this._job = params.job;\n    }\n\n}\n\n\nexport class ClerkGroup<T, U extends ClerkBase<T>> {\n    _clerks: U[];\n    _nameBase: string;\n    _assigned: Inbox<T>;\n    _hiredCount = 0;\n    _job: (item: T) => Promise<any>;\n    _instantiate: (params: ClerkOption<T>) => U;\n\n\n    constructor(params: ClerkGroupOption<T, U>) {\n        const { assigned, job, instantiate, initialMemberCount } = params;\n        this._assigned = assigned;\n        this._instantiate = instantiate;\n        this._job = job;\n        this._nameBase = params.name ?? this.constructor.name;\n        this._clerks = [];\n        for (let i = 0; i < initialMemberCount; i++) {\n            this.hireMember({ assigned, job });\n        }\n\n    }\n    hireMember(params: ClerkOption<T>) {\n        const name = `${this._nameBase}-${this._hiredCount++}`;\n        const clerk = this._instantiate({\n            name,\n            assigned: params.assigned,\n            job: params.job\n        });\n        this._clerks.push(clerk);\n    }\n    fireMember() {\n        const clerk = this._clerks.pop();\n        clerk?.dispose();\n    }\n    adjustMemberCount(count: number) {\n        const diff = count - this._clerks.length;\n        if (diff > 0) {\n            for (let i = 0; i < diff; i++) {\n                this.hireMember({ assigned: this._assigned, job: this._job });\n            }\n        } else if (diff < 0) {\n            for (let i = 0; i < -diff; i++) {\n                this.fireMember();\n            }\n        }\n    }\n    get stateDetail(): ClerkStateDetail {\n        const states = this._clerks.map(clerk => clerk.stateDetail);\n        const totalFetched = states.reduce((acc, state) => acc + state.totalFetched, 0);\n        const totalProcessed = states.reduce((acc, state) => acc + state.totalProcessed, 0);\n        const isBusy = states.some(state => state.isBusy);\n        const hasStarted = states.some(state => state.hasStarted);\n        const inboxDetail = this._assigned.state;\n        return {\n            totalFetched,\n            totalProcessed,\n            inboxDetail,\n            isBusy,\n            hasStarted,\n            state: ClerkState.IDLE\n        };\n    }\n\n    get freeMembers() {\n        return this._clerks.filter(clerk => clerk.state === ClerkState.IDLE).length;\n    }\n\n\n    dispose() {\n        this._clerks.forEach(clerk => clerk.dispose());\n    }\n}\n\n\n/**\n * A clerk that making batch of items and posts that to another inbox.\n * Please keep in mind that the interval of consuming results should be realised by `PaceMaker`.\n * @template T - The type of items being processed.\n * @property {ClerkStateDetail} stateDetail - Returns the current state details.\n */\n\nexport class Porter<T> extends ClerkBase<T> {\n    _outgoing: Inbox<T[]>;\n    _timeout?: number;\n    _maxSize: number;\n    _buffer: T[] = [];\n    _timeoutTimer: ReturnType<typeof setTimeout> | undefined;\n    _flushing = Promise.resolve();\n    _separateChunk = false;\n    async _flush() {\n        this._timeoutTimer = undefined;\n        if (this._buffer.length > 0) {\n            const previous = this._outgoing.tryCancelPost();\n            if (previous !== NOT_AVAILABLE) {\n                if (previous.length >= this._maxSize) {\n                    // If previous is full, drawback it to the buffer\n                    // We do not care about if the previous post is larger than the max size\n                    this._outgoing.tryPost(previous);\n                } else {\n                    // previous is not full, so we need to merge it with the current buffer\n                    this._buffer = [...previous, ...this._buffer];\n                    // then we need to push the buffer to the max size\n                    const filling = this._buffer.splice(0, this._maxSize);\n                    // It must be safe that we have canceled the previous post\n                    if (this._outgoing.tryPost(filling) === false) {\n                        throw new Error(\"This should not happen\");\n                    }\n                }\n            }\n            const postingItems = this._buffer.splice(0, this._maxSize);\n            if (postingItems.length > 0) {\n                await this._outgoing.post(postingItems);\n                this.onProgress();\n            }\n        }\n    }\n\n    get stateDetail(): ClerkStateDetail {\n        const stateDetail = super.stateDetail;\n        stateDetail.totalProcessed = this._totalProcessed - this._buffer.length;\n        stateDetail.isBusy = stateDetail.isBusy || !!this._timeoutTimer || this._buffer.length > 0;\n        return stateDetail;\n    }\n\n    async _onSentinel(item: SENTINELS) {\n        if (item === SENTINEL_FLUSH) {\n            await this._flush();\n        } else if (item === SENTINEL_FINISHED) {\n            await this._flush();\n            // this.dispose();\n        }\n    }\n\n    async _onPick(item: T): Promise<void> {\n        this._buffer.push(item);\n        if (this._buffer.length >= this._maxSize) {\n            await this._flush();\n        } else {\n            if (this._timeout) {\n                if (!this._timeoutTimer) {\n                    this._timeoutTimer = setTimeout(() => {\n                        void this._flush();\n                    }, this._timeout);\n                }\n            }\n        }\n    }\n\n    flush() {\n        return this._flush();\n    }\n\n    async changeParams(params: { timeout?: number, maxSize?: number; }) {\n        let anyChanged = false;\n        if (params.timeout != undefined && this._timeout !== params.timeout) {\n            this._timeout = params.timeout;\n            anyChanged = true;\n        }\n        if (params.maxSize != undefined && this._maxSize !== params.maxSize) {\n            this._maxSize = params.maxSize;\n            anyChanged = true;\n        }\n        if (anyChanged) {\n            await this.flush();\n        }\n    }\n\n    constructor(params: { from: Inbox<T>, to: Inbox<T[]>, timeout?: number, maxSize: number, }) {\n        super({ assigned: params.from });\n        this._outgoing = params.to;\n        this._timeout = params.timeout;\n        this._maxSize = params.maxSize;\n    }\n\n    dispose(): void {\n        if (this._timeoutTimer) clearTimeout(this._timeoutTimer);\n        super.dispose();\n    }\n\n}\n\n/**\n * The `Feeder` class is responsible for fetching items from a source and posting them to a target inbox.\n * It supports both synchronous and asynchronous iteration over the source.\n * \n * @template T - The type of items being processed.\n * \n * @property {FeederStateDetail} stateDetail - Returns the current state details of the feeder.\n * @method onProgress - Calls the progress callback with the current state details.\n * @method setOnProgress - Sets the progress callback function.\n * \n * @constructor\n * @param {Object} params - The parameters for the feeder.\n * @param {Iterable<T> | AsyncIterable<T>} params.source - The source of items to be processed.\n * @param {Inbox<T>} params.target - The target inbox where items are posted.\n * @param {(state: FeederStateDetail) => void} [params.onProgress] - Optional callback function to report progress.\n * \n * @method _mainLoop - The main loop that fetches items from the source and posts them to the target.\n * @method stateDetail - Returns the current state details of the feeder.\n */\nexport class Feeder<T> {\n    _hasFinished = false;\n    _hasStarted = false;\n    _totalFetched = 0;\n    _totalProcessed = 0;\n    _source: Iterable<T> | AsyncIterable<T>;\n    _target: Inbox<T>;\n    _onProgress?: (state: FeederStateDetail) => void = () => { };\n    onProgress() {\n        try {\n            this._onProgress?.(this.stateDetail);\n        } catch {\n            // do nothing\n        }\n    }\n    setOnProgress(callback: (state: FeederStateDetail) => void) {\n        this._onProgress = callback;\n    }\n\n    constructor(params: { source: Iterable<T> | AsyncIterable<T>, target: Inbox<T>, onProgress?: (state: FeederStateDetail) => void; }) {\n        const { source, target } = params;\n        this._source = source;\n        this._target = target;\n        void yieldMicrotask().then(() => this._mainLoop());\n    }\n\n    async _mainLoop() {\n        for await (const item of this._source) {\n            if (item === SENTINEL_FINISHED) {\n                continue;\n            } else if (item === SENTINEL_FLUSH) {\n                continue;\n            }\n            this._totalFetched++;\n            this._hasStarted = true;\n            this.onProgress();\n            await this._target.post(item);\n            this._totalProcessed++;\n            this.onProgress();\n        }\n        // signal the end of the source\n        await this._target.post(SENTINEL_FLUSH as any);\n        await this._target.post(SENTINEL_FINISHED as any);\n        this._hasFinished = true;\n        this.onProgress();\n    }\n\n    get stateDetail(): FeederStateDetail {\n        return {\n            hasFinished: this._hasFinished,\n            hasStarted: this._hasStarted,\n            totalFetched: this._totalFetched,\n            totalProcessed: this._totalProcessed,\n        };\n    }\n}\n\n/**\n * a clerk that picks items from an inbox and stores them in a buffer.\n * @template T - The type of items being processed.\n * @property {T[]} result - Returns the buffer of items.\n * @method clear - Clears the buffer.\n * @method drainAndReset - Drains the buffer and resets it.\n */\nexport class Harvester<T> extends ClerkBase<T> {\n\n    _buffer: T[] = [];\n    _timeoutTimer: ReturnType<typeof setTimeout> | undefined;\n\n    get result() {\n        return this._buffer;\n    }\n    clear() {\n        this._buffer = [];\n    }\n    drainAndReset() {\n        const result = [...this.result];\n        this.clear();\n        return result;\n    }\n\n    async _onPick(item: T): Promise<void> {\n        this._buffer.push(item);\n        return await Promise.resolve();\n    }\n\n    constructor(params: ClerkOptionBase<T>) {\n        super(params);\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n}"],"names":[],"mappings":"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"}