{"version":3,"file":"reactive.js","sources":["../../src/dataobject/reactive.ts"],"sourcesContent":["// Reactive and less-computing expression evaluator\n// Inspired from Vue\n\nimport { isObjectDifferent } from \"../object\";\n\nlet context: ReactiveInstance<any> | undefined;\nexport type ReactiveChangeHandler<T> = (instance: ReactiveInstance<T>) => unknown;\n\nexport type ReactiveExpression<T> = (prev?: T) => T;\n\nexport type ReactiveValue<T> = {\n    readonly value: T;\n    onChanged: (handler: ReactiveChangeHandler<T>) => void;\n    offChanged: (handler: ReactiveChangeHandler<T>) => void;\n}\nexport type ReactiveSource<T> = {\n    value: T;\n    onChanged: (handler: ReactiveChangeHandler<T>) => void;\n    offChanged: (handler: ReactiveChangeHandler<T>) => void;\n}\n\nexport type ReactiveInstance<T> = {\n    readonly value: T;\n    markDirty(): void;\n    rippleChanged(): void;\n}\n\n/**\n * Creates a reactive instance with the given initial value.\n *\n * @template T - The type of the reactive instance.\n * @param initialValue - The initial value of the reactive instance.\n * @returns A reactive instance with the given initial value.\n */\nexport function reactiveSource<T>(initialValue: T): ReactiveSource<T> {\n    return _reactive({ initialValue });\n}\n/**\n * Creates a reactive value that tracks changes to a given expression.\n *\n * @template T - The type of the reactive value.\n * @param {function(prev?: T): T} expression - The expression to track changes for.\n * @param {T} [initialValue] - The initial value of the reactive value.\n * @returns {ReactiveValue<T>} - The reactive value.\n */\nexport function reactive<T>(expression: (prev?: T) => T, initialValue?: T): ReactiveValue<T> {\n    return _reactive({ expression, initialValue });\n}\ntype reactiveParams<T> = {\n    expression: (prev?: T) => T,\n    initialValue?: T\n} | {\n    expression?: (prev?: T) => T,\n    initialValue: T\n}\n\nfunction _reactive<T>({ expression, initialValue }: reactiveParams<T>): ReactiveValue<T> {\n    let value: T;\n    let _isDirty = false;\n\n    const changeHandlers = new Set<((value: ReactiveInstance<T>) => unknown)>;\n\n    const instance = {\n        myContext: new Set<ReactiveInstance<unknown>>(),\n        markDirty() {\n            _isDirty = true;\n            instance.markDependedDirty();\n        },\n        rippleChanged() {\n            changeHandlers.forEach(e => e(instance));\n            instance.myContext.forEach(e => e.rippleChanged())\n        },\n        markClean() {\n            _isDirty = false;\n        },\n        markDependedDirty() {\n            instance.myContext.forEach(e => e.markDirty())\n        },\n        get isDirty() {\n            return _isDirty;\n        },\n        get value(): T {\n            if (context) {\n                instance.myContext.add(context);\n                // instance.markDirty(true);\n            }\n            if (!expression) {\n                return value;\n            }\n            if (_isDirty) {\n                const oldValue = value;\n                const newValue = expression();\n                if (isObjectDifferent(oldValue, newValue)) {\n                    value = newValue;\n                    instance.markClean();\n                    instance.markDependedDirty();\n                }\n            }\n            return value;\n        },\n        set value(newValue: T) {\n            if (isObjectDifferent(value, newValue)) {\n                value = newValue;\n                instance.markDirty();\n                instance.rippleChanged();\n            }\n        },\n        onChanged(handler: ReactiveChangeHandler<T>) {\n            changeHandlers.add(handler);\n            instance.markDirty();\n        },\n        offChanged(handler: ReactiveChangeHandler<T>) {\n            changeHandlers.delete(handler);\n        }\n    }\n\n    value = initialize();\n\n    function initialize(): T {\n        // Set self to the global variable for tracking the dependency while evaluating the expression\n        const previousContext = context;\n        context = instance;\n        const r = expression ? expression(initialValue) : initialValue;\n        context = previousContext;\n        return r as T;\n    }\n\n    return instance;\n}\n\n/**\n * Creates a computed value based on a reactive expression.\n * @param expression The reactive expression to compute.\n * @returns A function that returns the computed value.\n */\nexport function computed<T>(expression: ReactiveExpression<T>): () => T {\n    const v = reactive(expression);\n    return () => v.value;\n}"],"names":[],"mappings":";;AAAA;AACA;AAIA,IAAI,OAA0C;AAsB9C;;;;;;AAMG;AACG,SAAU,cAAc,CAAI,YAAe,EAAA;AAC7C,IAAA,OAAO,SAAS,CAAC,EAAE,YAAY,EAAE,CAAC;AACtC;AACA;;;;;;;AAOG;AACa,SAAA,QAAQ,CAAI,UAA2B,EAAE,YAAgB,EAAA;IACrE,OAAO,SAAS,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC;AAClD;AASA,SAAS,SAAS,CAAI,EAAE,UAAU,EAAE,YAAY,EAAqB,EAAA;AACjE,IAAA,IAAI,KAAQ;IACZ,IAAI,QAAQ,GAAG,KAAK;AAEpB,IAAA,MAAM,cAAc,GAAG,IAAI,GAA8C;AAEzE,IAAA,MAAM,QAAQ,GAAG;QACb,SAAS,EAAE,IAAI,GAAG,EAA6B;QAC/C,SAAS,GAAA;YACL,QAAQ,GAAG,IAAI;YACf,QAAQ,CAAC,iBAAiB,EAAE;SAC/B;QACD,aAAa,GAAA;AACT,YAAA,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC;AACxC,YAAA,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,CAAC;SACrD;QACD,SAAS,GAAA;YACL,QAAQ,GAAG,KAAK;SACnB;QACD,iBAAiB,GAAA;AACb,YAAA,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC;SACjD;AACD,QAAA,IAAI,OAAO,GAAA;AACP,YAAA,OAAO,QAAQ;SAClB;AACD,QAAA,IAAI,KAAK,GAAA;YACL,IAAI,OAAO,EAAE;AACT,gBAAA,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC;;;YAGnC,IAAI,CAAC,UAAU,EAAE;AACb,gBAAA,OAAO,KAAK;;YAEhB,IAAI,QAAQ,EAAE;gBACV,MAAM,QAAQ,GAAG,KAAK;AACtB,gBAAA,MAAM,QAAQ,GAAG,UAAU,EAAE;AAC7B,gBAAA,IAAI,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE;oBACvC,KAAK,GAAG,QAAQ;oBAChB,QAAQ,CAAC,SAAS,EAAE;oBACpB,QAAQ,CAAC,iBAAiB,EAAE;;;AAGpC,YAAA,OAAO,KAAK;SACf;QACD,IAAI,KAAK,CAAC,QAAW,EAAA;AACjB,YAAA,IAAI,iBAAiB,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;gBACpC,KAAK,GAAG,QAAQ;gBAChB,QAAQ,CAAC,SAAS,EAAE;gBACpB,QAAQ,CAAC,aAAa,EAAE;;SAE/B;AACD,QAAA,SAAS,CAAC,OAAiC,EAAA;AACvC,YAAA,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;YAC3B,QAAQ,CAAC,SAAS,EAAE;SACvB;AACD,QAAA,UAAU,CAAC,OAAiC,EAAA;AACxC,YAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC;;KAErC;IAED,KAAK,GAAG,UAAU,EAAE;AAEpB,IAAA,SAAS,UAAU,GAAA;;QAEf,MAAM,eAAe,GAAG,OAAO;QAC/B,OAAO,GAAG,QAAQ;AAClB,QAAA,MAAM,CAAC,GAAG,UAAU,GAAG,UAAU,CAAC,YAAY,CAAC,GAAG,YAAY;QAC9D,OAAO,GAAG,eAAe;AACzB,QAAA,OAAO,CAAM;;AAGjB,IAAA,OAAO,QAAQ;AACnB;AAEA;;;;AAIG;AACG,SAAU,QAAQ,CAAI,UAAiC,EAAA;AACzD,IAAA,MAAM,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC;AAC9B,IAAA,OAAO,MAAM,CAAC,CAAC,KAAK;AACxB;;;;"}