{"version":3,"file":"reactive.js","sources":["../../src/dataobject/reactive.ts"],"sourcesContent":["// Reactive and less-computing expression evaluator\r\n// Inspired from Vue\r\n\r\nimport { isObjectDifferent } from \"../object\";\r\n\r\nlet context: ReactiveInstance<any> | undefined;\r\nexport type ReactiveChangeHandler<T> = (instance: ReactiveInstance<T>) => unknown;\r\n\r\nexport type ReactiveExpression<T> = (prev?: T) => T;\r\n\r\nexport type ReactiveValue<T> = {\r\n    readonly value: T;\r\n    onChanged: (handler: ReactiveChangeHandler<T>) => void;\r\n    offChanged: (handler: ReactiveChangeHandler<T>) => void;\r\n}\r\nexport type ReactiveSource<T> = {\r\n    value: T;\r\n    onChanged: (handler: ReactiveChangeHandler<T>) => void;\r\n    offChanged: (handler: ReactiveChangeHandler<T>) => void;\r\n}\r\n\r\nexport type ReactiveInstance<T> = {\r\n    readonly value: T;\r\n    markDirty(): void;\r\n    rippleChanged(): void;\r\n}\r\n\r\n/**\r\n * Creates a reactive instance with the given initial value.\r\n *\r\n * @template T - The type of the reactive instance.\r\n * @param initialValue - The initial value of the reactive instance.\r\n * @returns A reactive instance with the given initial value.\r\n */\r\nexport function reactiveSource<T>(initialValue: T): ReactiveSource<T> {\r\n    return _reactive({ initialValue });\r\n}\r\n/**\r\n * Creates a reactive value that tracks changes to a given expression.\r\n *\r\n * @template T - The type of the reactive value.\r\n * @param {function(prev?: T): T} expression - The expression to track changes for.\r\n * @param {T} [initialValue] - The initial value of the reactive value.\r\n * @returns {ReactiveValue<T>} - The reactive value.\r\n */\r\nexport function reactive<T>(expression: (prev?: T) => T, initialValue?: T): ReactiveValue<T> {\r\n    return _reactive({ expression, initialValue });\r\n}\r\ntype reactiveParams<T> = {\r\n    expression: (prev?: T) => T,\r\n    initialValue?: T\r\n} | {\r\n    expression?: (prev?: T) => T,\r\n    initialValue: T\r\n}\r\n\r\nfunction _reactive<T>({ expression, initialValue }: reactiveParams<T>): ReactiveValue<T> {\r\n    let value: T;\r\n    let _isDirty = false;\r\n\r\n    const changeHandlers = new Set<((value: ReactiveInstance<T>) => unknown)>;\r\n\r\n    const instance = {\r\n        myContext: new Set<ReactiveInstance<unknown>>(),\r\n        markDirty() {\r\n            _isDirty = true;\r\n            instance.markDependedDirty();\r\n        },\r\n        rippleChanged() {\r\n            changeHandlers.forEach(e => e(instance));\r\n            instance.myContext.forEach(e => e.rippleChanged())\r\n        },\r\n        markClean() {\r\n            _isDirty = false;\r\n        },\r\n        markDependedDirty() {\r\n            instance.myContext.forEach(e => e.markDirty())\r\n        },\r\n        get isDirty() {\r\n            return _isDirty;\r\n        },\r\n        get value(): T {\r\n            if (context) {\r\n                instance.myContext.add(context);\r\n                // instance.markDirty(true);\r\n            }\r\n            if (!expression) {\r\n                return value;\r\n            }\r\n            if (_isDirty) {\r\n                const oldValue = value;\r\n                const newValue = expression();\r\n                if (isObjectDifferent(oldValue, newValue)) {\r\n                    value = newValue;\r\n                    instance.markClean();\r\n                    instance.markDependedDirty();\r\n                }\r\n            }\r\n            return value;\r\n        },\r\n        set value(newValue: T) {\r\n            if (isObjectDifferent(value, newValue)) {\r\n                value = newValue;\r\n                instance.markDirty();\r\n                instance.rippleChanged();\r\n            }\r\n        },\r\n        onChanged(handler: ReactiveChangeHandler<T>) {\r\n            changeHandlers.add(handler);\r\n            instance.markDirty();\r\n        },\r\n        offChanged(handler: ReactiveChangeHandler<T>) {\r\n            changeHandlers.delete(handler);\r\n        }\r\n    }\r\n\r\n    value = initialize();\r\n\r\n    function initialize(): T {\r\n        // Set self to the global variable for tracking the dependency while evaluating the expression\r\n        const previousContext = context;\r\n        context = instance;\r\n        const r = expression ? expression(initialValue) : initialValue;\r\n        context = previousContext;\r\n        return r as T;\r\n    }\r\n\r\n    return instance;\r\n}\r\n\r\n/**\r\n * Creates a computed value based on a reactive expression.\r\n * @param expression The reactive expression to compute.\r\n * @returns A function that returns the computed value.\r\n */\r\nexport function computed<T>(expression: ReactiveExpression<T>): () => T {\r\n    const v = reactive(expression);\r\n    return () => v.value;\r\n}"],"names":[],"mappings":"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"}