{"version":3,"file":"Refiner.js","sources":["../../src/dataobject/Refiner.ts"],"sourcesContent":["import { isObjectDifferent } from \"../object\";\nimport { type PromiseWithResolvers, promiseWithResolver, fireAndForget } from \"../promises\";\n\n/**\n * RefinerOptions interface defines the options for the Refiner class.\n */\nexport interface RefinerOptions<T, U> {\n    /**\n     * The function to evaluate the source and return a result.\n     * It can be synchronous or asynchronous.\n     * @param source - The source value to evaluate.\n     * @param previous - The previous result, if any.\n     * @returns The result of the evaluation.\n     */\n    evaluation: (source: T, previous?: U) => Promise<U> | U;\n    /**\n     * The initial source value to start with.\n     */\n    initialSource?: T,\n    /**\n     * A function to determine if the result should be updated based on the source and previous result.\n     * @param isDifferent - A boolean indicating if the source is different from the cached source. Derived from isDifferent function.\n     * @param source - The new source value.\n     * @param previous - The previous result, if any.\n     * @returns A boolean indicating if the result should be updated.\n     */\n    shouldUpdate?: (isDifferent: boolean, source: T, previous?: U) => boolean;\n    /**\n     * A function to determine if two sources are different.\n     * @param a - The first source value.\n     * @param b - The second source value.\n     * @returns A boolean indicating if the two sources are different.\n     * It defaults to isObjectDifferent function.\n     * @see isObjectDifferent\n     */\n    isDifferent?: (a: T, b: T) => boolean;\n}\n\n// * A special symbol used to indicate that the evaluation should be re-read.\nconst SHOULD_READ_NEW = Symbol(\"SHOULD_READ_NEW\");\nconst NOT_USED = Symbol(\"NOT_USED\");\n\n/**\n * Refiner class is a utility for evaluating and caching results based on a source value.\n * It can handle both synchronous and asynchronous evaluations.\n * To address the issue of performance, it uses no `#` properties. Do not call `_` prefixed methods directly.\n * @template T - The type of the source value.\n * @template U - The type of the result value.\n * @see RefinerOptions\n */\nexport class Refiner<T, U> {\n    /**\n     * The cached source value used for comparison.\n     */\n    _cachedBy?: T;\n    /**\n     * The cached result of the evaluation.\n     * It can be undefined if the evaluation has not been performed yet.\n     */\n    _cachedResult?: U;\n    /**\n     * The promise with resolvers used to handle the evaluation result.\n     */\n    _evaluationPromise!: PromiseWithResolvers<U>;\n    /**\n     * An internal and swappable method used to evaluate the source and return a result.\n     */\n    __evaluation: (source: T, previous?: U) => Promise<U> | U;\n    /**\n     * a function to determine if the result should be updated based on the source and previous result.\n     * @param isDifferent - A boolean indicating if the source is different from the cached source. Derived from isDifferent function.\n     * @param source - The new source value.\n     * @param previous - The previous result, if any.\n     * @returns a boolean indicating if the result should be updated.\n     */\n    __shouldUpdate: (isDifferent: boolean, source: T, previous?: U) => boolean = (isDifferent) => isDifferent;\n\n    /**\n     * An internal and swappable method function to determine if two sources are different.\n     * @param a source value.\n     * @param b compare value.\n     * @returns a boolean indicating if the two sources are different.\n     * It defaults to isObjectDifferent function.\n     */\n    __isDifferent = (a: T, b: T) => isObjectDifferent(a, b);\n\n    /**\n     * An internal method to renew the promise with resolvers.\n     * It is called when the evaluation is re-read.\n     */\n    _refinePromise() {\n        const previous = this._evaluationPromise;\n        const newPromise = promiseWithResolver<U>();\n        this._evaluationPromise = newPromise;\n        fireAndForget(async () => {\n            await Promise.race([previous.promise, Promise.resolve(NOT_USED)]).then((r) => {\n                if (r === NOT_USED) {\n                    previous.reject(SHOULD_READ_NEW);\n                    return;\n                }\n            })\n        });\n        return newPromise;\n    }\n\n    /**\n     * Constructor for the Refiner class.\n     * @param options - The options for the Refiner instance.\n     */\n    constructor({ initialSource: source, evaluation, shouldUpdate, isDifferent }: RefinerOptions<T, U>) {\n        this.__evaluation = evaluation;\n        this.__shouldUpdate = shouldUpdate || this.__shouldUpdate;\n        this.__isDifferent = isDifferent || this.__isDifferent;\n        // Initialize the promise with resolvers\n        this._refinePromise();\n        if (source !== undefined) {\n            this._startEvaluation(source);\n        }\n    }\n\n    /**\n     * An internal variable to track the latest evaluation.\n     * It is used to prevent outdated evaluations from being processed.\n     */\n    _evaluations = Promise.resolve();\n    /**\n     * An internal variable to track the latest evaluation index.\n     * It is used to prevent outdated evaluations from being processed.\n     */\n    _latest = 0;\n\n    /**\n     * An internal method to start the evaluation process.\n     * It creates a new promise with resolvers and starts the evaluation.\n     * @param source - The source value to evaluate.\n     * It starts the evaluation process and caches the result.\n     */\n    _startEvaluation(source: T) {\n        // Preventing multiple evaluations at the same time\n        const _buff = this._cachedResult;\n        const _source = source;\n        const index = ++this._latest;\n        const evaluationPromise = this._refinePromise();\n        const proc = async () => {\n            if (this._latest > index) {\n                // If the evaluation is outdated, return\n                return;\n            }\n            try {\n                const r = await this.__evaluation(_source, _buff);\n                // If successful, cache the result and its source, and resolve the promise\n                if (this._latest <= index) {\n                    // If the evaluation result is outdated, preventing caching it\n                    // (We have used them to check if the evaluation is outdated on `update`, subsequent `proc`s are dependent on them.\n                    // And queued items also depend on them at the time of their creation)\n                    this._cachedBy = _source;\n                    this._cachedResult = r;\n                    // However, some `await` may be waiting for the result, so we need to resolve it\n                }\n                evaluationPromise.resolve(r);\n            }\n            catch (error) {\n                evaluationPromise.reject(error);\n            }\n        }\n        // Queue evaluation \n        this._evaluations = this._evaluations.then(async () => {\n            await proc();\n        });\n    }\n    update(source: T) {\n        const isDifferent = (this._cachedBy !== undefined) ? this.__isDifferent(this._cachedBy, source) : true;\n        if (!this.__shouldUpdate(isDifferent, source, this._cachedResult)) {\n            // No change, no need to recompute\n            return this;\n        }\n        // This methods should be called when the source is changed\n        // Should be synchronous, so we can use the result immediately\n        this._startEvaluation(source);\n        return this;\n    }\n    async _getValue() {\n        let result: Awaited<U>;\n        do {\n            // If the result is a special value, we need to re-evaluate the expression\n            // This is needed when the evaluation function returns a promise and it is not resolved yet\n            try {\n                result = await this._evaluationPromise.promise;\n                return result;\n            } catch (error) {\n                if (error !== SHOULD_READ_NEW) {\n                    throw error;\n                }\n                // If the error is a special value, we need to re-evaluate the expression\n            }\n        } while (true);\n    }\n    get value(): Promise<U> {\n        return this._getValue();\n    }\n}\n\n\nexport interface RefinerSyncOptions<T, U> {\n    evaluation: (source: T, previous?: U) => U;\n    initialSource?: T,\n    shouldUpdate?: (isDifferent: boolean, source: T, previous?: U) => boolean;\n    isDifferent?: (a: T, b: T) => boolean;\n}\n\nexport class RefinerSync<T, U> {\n    _cachedBy?: T;\n    _buffedResult?: U | Error;\n    _evaluation: (source: T, previous?: U) => U;\n    _shouldUpdate: (isDifferent: boolean, source: T, previous?: U) => boolean = (isDifferent) => isDifferent;\n    _isDifferent = (a: T, b: T) => isObjectDifferent(a, b);\n\n    constructor({ initialSource: source, evaluation, shouldUpdate, isDifferent }: RefinerSyncOptions<T, U>) {\n        this._evaluation = evaluation;\n        this._shouldUpdate = shouldUpdate || this._shouldUpdate;\n        this._isDifferent = isDifferent || this._isDifferent;\n        if (source !== undefined) {\n            this._startEvaluation(source);\n        }\n    }\n    _startEvaluation(source: T) {\n        const _buff = this._buffedResult instanceof Error ? undefined : this._buffedResult;\n        const _source = source;\n        try {\n            const r = this._evaluation(_source, _buff);\n            this._cachedBy = _source;\n            this._buffedResult = r;\n        } catch (error) {\n            this._cachedBy = _source;\n            this._buffedResult = error as Error;\n        }\n    }\n    update(source: T) {\n        const isDifferent = (this._cachedBy !== undefined) ? this._isDifferent(this._cachedBy, source) : true;\n        const buff = this._buffedResult instanceof Error ? undefined : this._buffedResult;\n        if (!this._shouldUpdate(isDifferent, source, buff)) {\n            return this;\n        }\n        this._startEvaluation(source);\n        return this;\n    }\n    get value(): U | undefined {\n        if (this._buffedResult instanceof Error) {\n            throw this._buffedResult;\n        }\n        return this._buffedResult;\n    }\n}"],"names":[],"mappings":"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"}