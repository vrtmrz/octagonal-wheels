{"version":3,"file":"SimpleStoreBase.js","sources":["../../src/databases/SimpleStoreBase.ts"],"sourcesContent":["/**\r\n * Represents a base class for a simple key-value-store.\r\n * @template T The type of the values stored in the store.\r\n */\r\nexport abstract class SimpleStoreBase<T> {\r\n    abstract get(key: string): Promise<T | undefined>;\r\n    abstract set(key: string, value: T): Promise<void>;\r\n    abstract delete(key: string): Promise<void>;\r\n    abstract keys(from: string | undefined, to: string | undefined, count?: number): Promise<string[]>;\r\n\r\n    abstract clear(): Promise<void>;\r\n    abstract close(): void;\r\n    abstract destroy(): Promise<void>;\r\n}\r\n\r\n/**\r\n * Represents a simple key-value store.\r\n * @template T The type of values stored in the store.\r\n */\r\nexport interface SimpleStore<T> {\r\n    /**\r\n     * Retrieves the value associated with the specified key.\r\n     * @param key The key to retrieve the value for.\r\n     * @returns A Promise that resolves to the value associated with the key, or undefined if the key does not exist.\r\n     */\r\n    get(key: string): Promise<T | undefined>;\r\n\r\n    /**\r\n     * Sets the value associated with the specified key.\r\n     * @param key The key to set the value for.\r\n     * @param value The value to be set.\r\n     * @returns A Promise that resolves when the value is successfully set.\r\n     */\r\n    set(key: string, value: T): Promise<void>;\r\n\r\n    /**\r\n     * Deletes the value associated with the specified key.\r\n     * @param key The key to delete the value for.\r\n     * @returns A Promise that resolves when the value is successfully deleted.\r\n     */\r\n    delete(key: string): Promise<void>;\r\n\r\n    /**\r\n     * Retrieves an array of keys within the specified range.\r\n     * @param from The starting key (inclusive) of the range. If undefined, starts from the first key.\r\n     * @param to The ending key (inclusive) of the range. If undefined, ends at the last key.\r\n     * @param count The maximum number of keys to retrieve. If not specified, retrieves all keys within the range.\r\n     * @returns A Promise that resolves to an array of keys within the specified range.\r\n     */\r\n    keys(from: string | undefined, to: string | undefined, count?: number): Promise<string[]>;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;AAGG;MACmB,eAAe,CAAA;AASpC;;;;"}