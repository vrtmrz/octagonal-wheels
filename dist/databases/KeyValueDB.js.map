{"version":3,"file":"KeyValueDB.js","sources":["../../src/databases/KeyValueDB.ts"],"sourcesContent":["import { deleteDB, type IDBPDatabase, openDB } from \"idb\";\n/**\n * Represents a key-value database.\n */\nexport interface KeyValueDatabase {\n    /**\n     * Retrieves the value associated with the specified key.\n     * @param key - The key to retrieve the value for.\n     * @returns A promise that resolves with the retrieved value.\n     */\n    get<T>(key: IDBValidKey): Promise<T>;\n\n    /**\n     * Sets the value associated with the specified key.\n     * @param key - The key to set the value for.\n     * @param value - The value to be set.\n     * @returns A promise that resolves with the key.\n     */\n    set<T>(key: IDBValidKey, value: T): Promise<IDBValidKey>;\n\n    /**\n     * Deletes the value associated with the specified key.\n     * @param key - The key to delete the value for.\n     * @returns A promise that resolves when the value is deleted.\n     */\n    del(key: IDBValidKey): Promise<void>;\n\n    /**\n     * Clears all key-value pairs in the database.\n     * @returns A promise that resolves when the database is cleared.\n     */\n    clear(): Promise<void>;\n\n    /**\n     * Retrieves an array of keys that match the specified query.\n     * @param query - The query to match the keys against.\n     * @param count - The maximum number of keys to retrieve.\n     * @returns A promise that resolves with an array of keys.\n     */\n    keys(query?: IDBValidKey | IDBKeyRange, count?: number): Promise<IDBValidKey[]>;\n\n    /**\n     * Closes the database connection.\n     */\n    close(): void;\n\n    /**\n     * Destroys the database and removes all data.\n     * @returns A promise that resolves when the database is destroyed.\n     */\n    destroy(): Promise<void>;\n}\nconst databaseCache: { [key: string]: IDBPDatabase<any> } = {};\n/**\n * Opens a key-value database and returns a promise that resolves to a KeyValueDatabase object.\n * If the database with the given key already exists in the cache, it will be closed and removed from the cache before opening a new one.\n * @param dbKey - The key of the database.\n * @returns A promise that resolves to a KeyValueDatabase object.\n */\nexport async function OpenKeyValueDatabase(dbKey: string): Promise<KeyValueDatabase> {\n    if (dbKey in databaseCache) {\n        databaseCache[dbKey].close();\n        delete databaseCache[dbKey];\n    }\n    const storeKey = dbKey;\n    const dbPromise = openDB(dbKey, 1, {\n        upgrade(db) {\n            db.createObjectStore(storeKey);\n        },\n    });\n    const db = await dbPromise;\n    databaseCache[dbKey] = db;\n    return {\n        async get<T>(key: IDBValidKey): Promise<T> {\n            return await db.get(storeKey, key);\n        },\n        async set<T>(key: IDBValidKey, value: T) {\n            return await db.put(storeKey, value, key);\n        },\n        async del(key: IDBValidKey) {\n            return await db.delete(storeKey, key);\n        },\n        async clear() {\n            return await db.clear(storeKey);\n        },\n        async keys(query?: IDBValidKey | IDBKeyRange, count?: number) {\n            return await db.getAllKeys(storeKey, query, count);\n        },\n        close() {\n            delete databaseCache[dbKey];\n            return db.close();\n        },\n        async destroy() {\n            delete databaseCache[dbKey];\n            db.close();\n            await deleteDB(dbKey);\n        },\n    };\n}\n"],"names":[],"mappings":";;AAoDA,MAAM,aAAa,GAAyC,EAAE;AAC9D;;;;;AAKG;AACI,eAAe,oBAAoB,CAAC,KAAa,EAAA;AACpD,IAAA,IAAI,KAAK,IAAI,aAAa,EAAE;AACxB,QAAA,aAAa,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE;AAC5B,QAAA,OAAO,aAAa,CAAC,KAAK,CAAC;;IAE/B,MAAM,QAAQ,GAAG,KAAK;AACtB,IAAA,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE;AAC/B,QAAA,OAAO,CAAC,EAAE,EAAA;AACN,YAAA,EAAE,CAAC,iBAAiB,CAAC,QAAQ,CAAC;SACjC;AACJ,KAAA,CAAC;AACF,IAAA,MAAM,EAAE,GAAG,MAAM,SAAS;AAC1B,IAAA,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;IACzB,OAAO;QACH,MAAM,GAAG,CAAI,GAAgB,EAAA;YACzB,OAAO,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC;SACrC;AACD,QAAA,MAAM,GAAG,CAAI,GAAgB,EAAE,KAAQ,EAAA;YACnC,OAAO,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,CAAC;SAC5C;QACD,MAAM,GAAG,CAAC,GAAgB,EAAA;YACtB,OAAO,MAAM,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC;SACxC;AACD,QAAA,MAAM,KAAK,GAAA;AACP,YAAA,OAAO,MAAM,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC;SAClC;AACD,QAAA,MAAM,IAAI,CAAC,KAAiC,EAAE,KAAc,EAAA;YACxD,OAAO,MAAM,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC;SACrD;QACD,KAAK,GAAA;AACD,YAAA,OAAO,aAAa,CAAC,KAAK,CAAC;AAC3B,YAAA,OAAO,EAAE,CAAC,KAAK,EAAE;SACpB;AACD,QAAA,MAAM,OAAO,GAAA;AACT,YAAA,OAAO,aAAa,CAAC,KAAK,CAAC;YAC3B,EAAE,CAAC,KAAK,EAAE;AACV,YAAA,MAAM,QAAQ,CAAC,KAAK,CAAC;SACxB;KACJ;AACL;;;;"}