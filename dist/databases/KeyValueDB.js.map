{"version":3,"file":"KeyValueDB.js","sources":["../../src/databases/KeyValueDB.ts"],"sourcesContent":["import { deleteDB, type IDBPDatabase, openDB } from \"idb\";\r\n/**\r\n * Represents a key-value database.\r\n */\r\nexport interface KeyValueDatabase {\r\n    /**\r\n     * Retrieves the value associated with the specified key.\r\n     * @param key - The key to retrieve the value for.\r\n     * @returns A promise that resolves with the retrieved value.\r\n     */\r\n    get<T>(key: IDBValidKey): Promise<T>;\r\n\r\n    /**\r\n     * Sets the value associated with the specified key.\r\n     * @param key - The key to set the value for.\r\n     * @param value - The value to be set.\r\n     * @returns A promise that resolves with the key.\r\n     */\r\n    set<T>(key: IDBValidKey, value: T): Promise<IDBValidKey>;\r\n\r\n    /**\r\n     * Deletes the value associated with the specified key.\r\n     * @param key - The key to delete the value for.\r\n     * @returns A promise that resolves when the value is deleted.\r\n     */\r\n    del(key: IDBValidKey): Promise<void>;\r\n\r\n    /**\r\n     * Clears all key-value pairs in the database.\r\n     * @returns A promise that resolves when the database is cleared.\r\n     */\r\n    clear(): Promise<void>;\r\n\r\n    /**\r\n     * Retrieves an array of keys that match the specified query.\r\n     * @param query - The query to match the keys against.\r\n     * @param count - The maximum number of keys to retrieve.\r\n     * @returns A promise that resolves with an array of keys.\r\n     */\r\n    keys(query?: IDBValidKey | IDBKeyRange, count?: number): Promise<IDBValidKey[]>;\r\n\r\n    /**\r\n     * Closes the database connection.\r\n     */\r\n    close(): void;\r\n\r\n    /**\r\n     * Destroys the database and removes all data.\r\n     * @returns A promise that resolves when the database is destroyed.\r\n     */\r\n    destroy(): Promise<void>;\r\n}\r\nconst databaseCache: { [key: string]: IDBPDatabase<any> } = {};\r\n/**\r\n * Opens a key-value database and returns a promise that resolves to a KeyValueDatabase object.\r\n * If the database with the given key already exists in the cache, it will be closed and removed from the cache before opening a new one.\r\n * @param dbKey - The key of the database.\r\n * @returns A promise that resolves to a KeyValueDatabase object.\r\n */\r\nexport async function OpenKeyValueDatabase(dbKey: string): Promise<KeyValueDatabase> {\r\n    if (dbKey in databaseCache) {\r\n        databaseCache[dbKey].close();\r\n        delete databaseCache[dbKey];\r\n    }\r\n    const storeKey = dbKey;\r\n    const dbPromise = openDB(dbKey, 1, {\r\n        upgrade(db) {\r\n            db.createObjectStore(storeKey);\r\n        },\r\n    });\r\n    const db = await dbPromise;\r\n    databaseCache[dbKey] = db;\r\n    return {\r\n        async get<T>(key: IDBValidKey): Promise<T> {\r\n            return await db.get(storeKey, key);\r\n        },\r\n        async set<T>(key: IDBValidKey, value: T) {\r\n            return await db.put(storeKey, value, key);\r\n        },\r\n        async del(key: IDBValidKey) {\r\n            return await db.delete(storeKey, key);\r\n        },\r\n        async clear() {\r\n            return await db.clear(storeKey);\r\n        },\r\n        async keys(query?: IDBValidKey | IDBKeyRange, count?: number) {\r\n            return await db.getAllKeys(storeKey, query, count);\r\n        },\r\n        close() {\r\n            delete databaseCache[dbKey];\r\n            return db.close();\r\n        },\r\n        async destroy() {\r\n            delete databaseCache[dbKey];\r\n            db.close();\r\n            await deleteDB(dbKey);\r\n        },\r\n    };\r\n}\r\n"],"names":[],"mappings":";;AAoDA,MAAM,aAAa,GAAyC,EAAE,CAAC;AAC/D;;;;;AAKG;AACI,eAAe,oBAAoB,CAAC,KAAa,EAAA;AACpD,IAAA,IAAI,KAAK,IAAI,aAAa,EAAE;AACxB,QAAA,aAAa,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;AAC7B,QAAA,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC;KAC/B;IACD,MAAM,QAAQ,GAAG,KAAK,CAAC;AACvB,IAAA,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE;AAC/B,QAAA,OAAO,CAAC,EAAE,EAAA;AACN,YAAA,EAAE,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;SAClC;AACJ,KAAA,CAAC,CAAC;AACH,IAAA,MAAM,EAAE,GAAG,MAAM,SAAS,CAAC;AAC3B,IAAA,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;IAC1B,OAAO;QACH,MAAM,GAAG,CAAI,GAAgB,EAAA;YACzB,OAAO,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;SACtC;AACD,QAAA,MAAM,GAAG,CAAI,GAAgB,EAAE,KAAQ,EAAA;YACnC,OAAO,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SAC7C;QACD,MAAM,GAAG,CAAC,GAAgB,EAAA;YACtB,OAAO,MAAM,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;SACzC;AACD,QAAA,MAAM,KAAK,GAAA;AACP,YAAA,OAAO,MAAM,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SACnC;AACD,QAAA,MAAM,IAAI,CAAC,KAAiC,EAAE,KAAc,EAAA;YACxD,OAAO,MAAM,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;SACtD;QACD,KAAK,GAAA;AACD,YAAA,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC;AAC5B,YAAA,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC;SACrB;AACD,QAAA,MAAM,OAAO,GAAA;AACT,YAAA,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC;YAC5B,EAAE,CAAC,KAAK,EAAE,CAAC;AACX,YAAA,MAAM,QAAQ,CAAC,KAAK,CAAC,CAAC;SACzB;KACJ,CAAC;AACN;;;;"}