{"version":3,"file":"promises.js","sources":["../src/promises.ts"],"sourcesContent":["\r\n/**\r\n * Delays the execution of a function by the specified number of milliseconds.\r\n * @param ms - The number of milliseconds to delay the execution.\r\n * @param result - The optional result value to be resolved with after the delay.\r\n * @returns A promise that resolves with the specified result value after the delay.\r\n */\r\nexport const delay = <T>(ms: number, result?: T): Promise<T> => {\r\n    return new Promise((res) => {\r\n        setTimeout(() => {\r\n            res(result!);\r\n        }, ms);\r\n    });\r\n};\r\n\r\nexport type PromiseWithResolvers<T> = {\r\n    promise: Promise<T>;\r\n    resolve: (value: T | PromiseLike<T>) => void;\r\n    reject: (reason?: any) => void;\r\n}\r\n\r\n/**\r\n * Creates a promise and returns it along with the resolve and reject functions.\r\n * @returns An object containing the promise, resolve, and reject functions.\r\n * @typeparam T The type of the promise value.\r\n */\r\nexport function polyfillPromiseWithResolvers<T>(): PromiseWithResolvers<T> {\r\n    let resolve!: Parameters<ConstructorParameters<typeof Promise<T>>[0]>[0];\r\n    let reject!: Parameters<ConstructorParameters<typeof Promise<T>>[0]>[1];\r\n    const promise = new Promise<T>((res, rej) => {\r\n        resolve = res;\r\n        reject = rej;\r\n    });\r\n    return { promise, resolve, reject }\r\n}\r\n\r\n/**\r\n * Creates a native promise with resolvers. This function is used when the `Promise.withResolvers` function is available.\r\n * @template T The type of the promise value.\r\n * @returns An object containing the promise, resolve function, and reject function.\r\n */\r\nexport function nativePromiseWithResolvers<T>() {\r\n    const p = Promise.withResolvers<T>();\r\n    const { promise, resolve, reject } = p;\r\n    return { promise, resolve, reject };\r\n}\r\n/**\r\n * Creates a promise with custom resolvers.\r\n * @param {Function} polyfillPromiseWithResolvers - The function that polyfills the promise with resolvers.\r\n * @returns {Promise} - The promise with custom resolvers.\r\n */\r\nexport const promiseWithResolver: <T>() => PromiseWithResolvers<T> = (\"withResolvers\" in Promise) ? nativePromiseWithResolvers : polyfillPromiseWithResolvers;\r\n\r\n/**\r\n * A no-operation function.\r\n */\r\nexport const noop = () => {/* NO OP */ };\r\n\r\n/**\r\n * Executes a promise or a function that returns a promise and ignores any errors or results.\r\n * @param p - The promise or function that returns a promise to be executed.\r\n */\r\nexport function fireAndForget(p: Promise<any> | (() => Promise<any>)): void {\r\n    if (typeof p == \"function\") return fireAndForget(p());\r\n    p.then(noop).catch(noop);\r\n}\r\n\r\n/**\r\n * Yields a microtask.\r\n * \r\n * @returns A promise that resolves when the microtask is completed.\r\n */\r\nexport function yieldMicrotask() {\r\n    return new Promise<void>(res => queueMicrotask(res));\r\n}\r\n\r\n/**\r\n * A utility function that wraps the `requestIdleCallback` function and returns a promise.\r\n * If `requestIdleCallback` is not available in the global scope (iOS, Safari), it falls back to `yieldMicrotask`.\r\n * \r\n * @param options - The options to be passed to the `requestIdleCallback` function.\r\n * @returns A promise that resolves when the idle callback is executed.\r\n */\r\nexport function yieldRequestIdleCallback(options?: Parameters<typeof requestIdleCallback>[1]) {\r\n    if (!(\"requestIdleCallback\" in globalThis)) return yieldMicrotask();\r\n    return new Promise<void>(res => requestIdleCallback(() => res(), options));\r\n}\r\n\r\n/**\r\n * Yields the next animation frame.\r\n * \r\n * @returns A promise that resolves with the next animation frame.\r\n */\r\nexport function yieldAnimationFrame() {\r\n    return new Promise<number>(res => requestAnimationFrame(res));\r\n}\r\n\r\n/**\r\n * Yields the next batched animation frame.\r\n * \r\n * @returns A promise that resolves with the next frame.\r\n */\r\n\r\nlet currentYieldingAnimationFrame: Promise<number> | undefined;\r\nexport function yieldNextAnimationFrame() {\r\n    if (currentYieldingAnimationFrame) return currentYieldingAnimationFrame;\r\n    currentYieldingAnimationFrame = (async () => {\r\n        const ret = await yieldAnimationFrame();\r\n        currentYieldingAnimationFrame = undefined;\r\n        return ret;\r\n    })();\r\n    return currentYieldingAnimationFrame;\r\n}\r\n\r\n\r\nlet currentYieldingMicrotask: Promise<void> | undefined;\r\n\r\nexport function yieldNextMicrotask() {\r\n    if (currentYieldingMicrotask) return currentYieldingMicrotask;\r\n    currentYieldingMicrotask = (async () => {\r\n        await yieldMicrotask();\r\n        currentYieldingMicrotask = undefined;\r\n    })();\r\n    return currentYieldingMicrotask;\r\n}"],"names":[],"mappings":"AACA;;;;;AAKG;MACU,KAAK,GAAG,CAAI,EAAU,EAAE,MAAU,KAAgB;AAC3D,IAAA,OAAO,IAAI,OAAO,CAAC,CAAC,GAAG,KAAI;QACvB,UAAU,CAAC,MAAK;YACZ,GAAG,CAAC,MAAO,CAAC,CAAC;SAChB,EAAE,EAAE,CAAC,CAAC;AACX,KAAC,CAAC,CAAC;AACP,EAAE;AAQF;;;;AAIG;SACa,4BAA4B,GAAA;AACxC,IAAA,IAAI,OAAoE,CAAC;AACzE,IAAA,IAAI,MAAmE,CAAC;IACxE,MAAM,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,GAAG,EAAE,GAAG,KAAI;QACxC,OAAO,GAAG,GAAG,CAAC;QACd,MAAM,GAAG,GAAG,CAAC;AACjB,KAAC,CAAC,CAAC;AACH,IAAA,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAA;AACvC,CAAC;AAED;;;;AAIG;SACa,0BAA0B,GAAA;AACtC,IAAA,MAAM,CAAC,GAAG,OAAO,CAAC,aAAa,EAAK,CAAC;IACrC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;AACvC,IAAA,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;AACxC,CAAC;AACD;;;;AAIG;AACU,MAAA,mBAAmB,GAAqC,CAAC,eAAe,IAAI,OAAO,IAAI,0BAA0B,GAAG,6BAA6B;AAE9J;;AAEG;MACU,IAAI,GAAG,MAAK,IAAgB;AAEzC;;;AAGG;AACG,SAAU,aAAa,CAAC,CAAsC,EAAA;IAChE,IAAI,OAAO,CAAC,IAAI,UAAU;AAAE,QAAA,OAAO,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;IACtD,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC7B,CAAC;AAED;;;;AAIG;SACa,cAAc,GAAA;AAC1B,IAAA,OAAO,IAAI,OAAO,CAAO,GAAG,IAAI,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;AACzD,CAAC;AAED;;;;;;AAMG;AACG,SAAU,wBAAwB,CAAC,OAAmD,EAAA;AACxF,IAAA,IAAI,EAAE,qBAAqB,IAAI,UAAU,CAAC;QAAE,OAAO,cAAc,EAAE,CAAC;AACpE,IAAA,OAAO,IAAI,OAAO,CAAO,GAAG,IAAI,mBAAmB,CAAC,MAAM,GAAG,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;AAC/E,CAAC;AAED;;;;AAIG;SACa,mBAAmB,GAAA;AAC/B,IAAA,OAAO,IAAI,OAAO,CAAS,GAAG,IAAI,qBAAqB,CAAC,GAAG,CAAC,CAAC,CAAC;AAClE,CAAC;AAED;;;;AAIG;AAEH,IAAI,6BAA0D,CAAC;SAC/C,uBAAuB,GAAA;AACnC,IAAA,IAAI,6BAA6B;AAAE,QAAA,OAAO,6BAA6B,CAAC;AACxE,IAAA,6BAA6B,GAAG,CAAC,YAAW;AACxC,QAAA,MAAM,GAAG,GAAG,MAAM,mBAAmB,EAAE,CAAC;QACxC,6BAA6B,GAAG,SAAS,CAAC;AAC1C,QAAA,OAAO,GAAG,CAAC;KACd,GAAG,CAAC;AACL,IAAA,OAAO,6BAA6B,CAAC;AACzC,CAAC;AAGD,IAAI,wBAAmD,CAAC;SAExC,kBAAkB,GAAA;AAC9B,IAAA,IAAI,wBAAwB;AAAE,QAAA,OAAO,wBAAwB,CAAC;AAC9D,IAAA,wBAAwB,GAAG,CAAC,YAAW;QACnC,MAAM,cAAc,EAAE,CAAC;QACvB,wBAAwB,GAAG,SAAS,CAAC;KACxC,GAAG,CAAC;AACL,IAAA,OAAO,wBAAwB,CAAC;AACpC;;;;"}