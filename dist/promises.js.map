{"version":3,"file":"promises.js","sources":["../src/promises.ts"],"sourcesContent":["\n/**\n * Delays the execution of a function by the specified number of milliseconds.\n * @param ms - The number of milliseconds to delay the execution.\n * @param result - The optional result value to be resolved with after the delay.\n * @returns A promise that resolves with the specified result value after the delay.\n */\nexport const delay = <T>(ms: number, result?: T): Promise<T> => {\n    return new Promise((res) => {\n        setTimeout(() => {\n            res(result!);\n        }, ms);\n    });\n};\n\nexport type PromiseWithResolvers<T> = {\n    promise: Promise<T>;\n    resolve: (value: T | PromiseLike<T>) => void;\n    reject: (reason?: any) => void;\n}\n\n/**\n * Creates a promise and returns it along with the resolve and reject functions.\n * @returns An object containing the promise, resolve, and reject functions.\n * @typeparam T The type of the promise value.\n */\nexport function polyfillPromiseWithResolvers<T>(): PromiseWithResolvers<T> {\n    let resolve!: Parameters<ConstructorParameters<typeof Promise<T>>[0]>[0];\n    let reject!: Parameters<ConstructorParameters<typeof Promise<T>>[0]>[1];\n    const promise = new Promise<T>((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n    return { promise, resolve, reject }\n}\n\n/**\n * Creates a native promise with resolvers. This function is used when the `Promise.withResolvers` function is available.\n * @template T The type of the promise value.\n * @returns An object containing the promise, resolve function, and reject function.\n */\nexport function nativePromiseWithResolvers<T>() {\n    const p = Promise.withResolvers<T>();\n    const { promise, resolve, reject } = p;\n    return { promise, resolve, reject };\n}\n/**\n * Creates a promise with custom resolvers.\n * @param {Function} polyfillPromiseWithResolvers - The function that polyfills the promise with resolvers.\n * @returns {Promise} - The promise with custom resolvers.\n */\nexport const promiseWithResolver: <T>() => PromiseWithResolvers<T> = (\"withResolvers\" in Promise) ? nativePromiseWithResolvers : polyfillPromiseWithResolvers;\n\n/**\n * A no-operation function.\n */\nexport const noop = () => {/* NO OP */ };\n\n/**\n * Executes a promise or a function that returns a promise and ignores any errors or results.\n * @param p - The promise or function that returns a promise to be executed.\n */\nexport function fireAndForget(p: Promise<any> | (() => Promise<any>)): void {\n    if (typeof p == \"function\") return fireAndForget(p());\n    p.then(noop).catch(noop);\n}\n\n/**\n * Yields a microtask.\n * \n * @returns A promise that resolves when the microtask is completed.\n */\nexport function yieldMicrotask() {\n    return new Promise<void>(res => queueMicrotask(res));\n}\n\n/**\n * A utility function that wraps the `requestIdleCallback` function and returns a promise.\n * If `requestIdleCallback` is not available in the global scope (iOS, Safari), it falls back to `yieldMicrotask`.\n * \n * @param options - The options to be passed to the `requestIdleCallback` function.\n * @returns A promise that resolves when the idle callback is executed.\n */\nexport function yieldRequestIdleCallback(options?: Parameters<typeof requestIdleCallback>[1]) {\n    if (!(\"requestIdleCallback\" in globalThis)) return yieldMicrotask();\n    return new Promise<void>(res => requestIdleCallback(() => res(), options));\n}\n\n/**\n * Yields the next animation frame.\n * \n * @returns A promise that resolves with the next animation frame.\n */\nexport function yieldAnimationFrame() {\n    return new Promise<number>(res => requestAnimationFrame(res));\n}\n\n/**\n * Yields the next batched animation frame.\n * \n * @returns A promise that resolves with the next frame.\n */\n\nlet currentYieldingAnimationFrame: Promise<number> | undefined;\nexport function yieldNextAnimationFrame() {\n    if (currentYieldingAnimationFrame) return currentYieldingAnimationFrame;\n    currentYieldingAnimationFrame = (async () => {\n        const ret = await yieldAnimationFrame();\n        currentYieldingAnimationFrame = undefined;\n        return ret;\n    })();\n    return currentYieldingAnimationFrame;\n}\n\n\nlet currentYieldingMicrotask: Promise<void> | undefined;\n\nexport function yieldNextMicrotask() {\n    if (currentYieldingMicrotask) return currentYieldingMicrotask;\n    currentYieldingMicrotask = (async () => {\n        await yieldMicrotask();\n        currentYieldingMicrotask = undefined;\n    })();\n    return currentYieldingMicrotask;\n}"],"names":[],"mappings":"AACA;;;;;AAKG;MACU,KAAK,GAAG,CAAI,EAAU,EAAE,MAAU,KAAgB;AAC3D,IAAA,OAAO,IAAI,OAAO,CAAC,CAAC,GAAG,KAAI;QACvB,UAAU,CAAC,MAAK;YACZ,GAAG,CAAC,MAAO,CAAC,CAAC;SAChB,EAAE,EAAE,CAAC,CAAC;AACX,KAAC,CAAC,CAAC;AACP,EAAE;AAQF;;;;AAIG;SACa,4BAA4B,GAAA;AACxC,IAAA,IAAI,OAAoE,CAAC;AACzE,IAAA,IAAI,MAAmE,CAAC;IACxE,MAAM,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,GAAG,EAAE,GAAG,KAAI;QACxC,OAAO,GAAG,GAAG,CAAC;QACd,MAAM,GAAG,GAAG,CAAC;AACjB,KAAC,CAAC,CAAC;AACH,IAAA,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAA;AACvC,CAAC;AAED;;;;AAIG;SACa,0BAA0B,GAAA;AACtC,IAAA,MAAM,CAAC,GAAG,OAAO,CAAC,aAAa,EAAK,CAAC;IACrC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;AACvC,IAAA,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;AACxC,CAAC;AACD;;;;AAIG;AACU,MAAA,mBAAmB,GAAqC,CAAC,eAAe,IAAI,OAAO,IAAI,0BAA0B,GAAG,6BAA6B;AAE9J;;AAEG;MACU,IAAI,GAAG,MAAK,IAAgB;AAEzC;;;AAGG;AACG,SAAU,aAAa,CAAC,CAAsC,EAAA;IAChE,IAAI,OAAO,CAAC,IAAI,UAAU;AAAE,QAAA,OAAO,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;IACtD,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC7B,CAAC;AAED;;;;AAIG;SACa,cAAc,GAAA;AAC1B,IAAA,OAAO,IAAI,OAAO,CAAO,GAAG,IAAI,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;AACzD,CAAC;AAED;;;;;;AAMG;AACG,SAAU,wBAAwB,CAAC,OAAmD,EAAA;AACxF,IAAA,IAAI,EAAE,qBAAqB,IAAI,UAAU,CAAC;QAAE,OAAO,cAAc,EAAE,CAAC;AACpE,IAAA,OAAO,IAAI,OAAO,CAAO,GAAG,IAAI,mBAAmB,CAAC,MAAM,GAAG,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;AAC/E,CAAC;AAED;;;;AAIG;SACa,mBAAmB,GAAA;AAC/B,IAAA,OAAO,IAAI,OAAO,CAAS,GAAG,IAAI,qBAAqB,CAAC,GAAG,CAAC,CAAC,CAAC;AAClE,CAAC;AAED;;;;AAIG;AAEH,IAAI,6BAA0D,CAAC;SAC/C,uBAAuB,GAAA;AACnC,IAAA,IAAI,6BAA6B;AAAE,QAAA,OAAO,6BAA6B,CAAC;AACxE,IAAA,6BAA6B,GAAG,CAAC,YAAW;AACxC,QAAA,MAAM,GAAG,GAAG,MAAM,mBAAmB,EAAE,CAAC;QACxC,6BAA6B,GAAG,SAAS,CAAC;AAC1C,QAAA,OAAO,GAAG,CAAC;KACd,GAAG,CAAC;AACL,IAAA,OAAO,6BAA6B,CAAC;AACzC,CAAC;AAGD,IAAI,wBAAmD,CAAC;SAExC,kBAAkB,GAAA;AAC9B,IAAA,IAAI,wBAAwB;AAAE,QAAA,OAAO,wBAAwB,CAAC;AAC9D,IAAA,wBAAwB,GAAG,CAAC,YAAW;QACnC,MAAM,cAAc,EAAE,CAAC;QACvB,wBAAwB,GAAG,SAAS,CAAC;KACxC,GAAG,CAAC;AACL,IAAA,OAAO,wBAAwB,CAAC;AACpC;;;;"}