{"version":3,"file":"promises.js","sources":["../src/promises.ts"],"sourcesContent":["\n/**\n * Delays the execution of a function by the specified number of milliseconds.\n * @param ms - The number of milliseconds to delay the execution.\n * @param result - The optional result value to be resolved with after the delay.\n * @returns A promise that resolves with the specified result value after the delay.\n */\nexport const delay = <T>(ms: number, result?: T): Promise<T> => {\n    return new Promise((res) => {\n        setTimeout(() => {\n            res(result!);\n        }, ms);\n    });\n};\n\nconst UNRESOLVED = Symbol('UNRESOLVED');\n\n/**\n * Checking whether a promise has been resolved.\n * @param promise a checking promise\n * @returns true if resolved, false if not.\n */\nexport async function isResolved(promise: Promise<unknown>): Promise<boolean> {\n    return await Promise.race([promise, Promise.resolve(UNRESOLVED)]) !== UNRESOLVED;\n}\n/**\n * Checking whether some promises have been resolved.\n * @param promises checking promises\n * @returns true if some promises have been resolved, false if not.\n */\nexport async function isSomeResolved(promises: Promise<unknown>[]): Promise<boolean> {\n    if (promises.length == 0) return false;\n    return await Promise.race([...promises, Promise.resolve(UNRESOLVED)]) !== UNRESOLVED;\n}\n\nexport type PromiseWithResolvers<T> = {\n    promise: Promise<T>;\n    resolve: (value: T | PromiseLike<T>) => void;\n    reject: (reason?: any) => void;\n};\n\n/**\n * Creates a promise and returns it along with the resolve and reject functions.\n * @returns An object containing the promise, resolve, and reject functions.\n * @typeparam T The type of the promise value.\n */\nexport function polyfillPromiseWithResolvers<T>(): PromiseWithResolvers<T> {\n    let resolve!: Parameters<ConstructorParameters<typeof Promise<T>>[0]>[0];\n    let reject!: Parameters<ConstructorParameters<typeof Promise<T>>[0]>[1];\n    const promise = new Promise<T>((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n    return { promise, resolve, reject };\n}\n\n/**\n * Creates a native promise with resolvers. This function is used when the `Promise.withResolvers` function is available.\n * @template T The type of the promise value.\n * @returns An object containing the promise, resolve function, and reject function.\n */\nexport function nativePromiseWithResolvers<T>() {\n    // @ts-ignore  TypeScript does not know about the withResolvers method on Promise yet.\n    const p = Promise.withResolvers<T>();\n    const { promise, resolve, reject } = p;\n    return { promise, resolve, reject };\n}\n/**\n * Creates a promise with custom resolvers.\n * @param {Function} polyfillPromiseWithResolvers - The function that polyfills the promise with resolvers.\n * @returns {Promise} - The promise with custom resolvers.\n */\nexport const promiseWithResolver: <T>() => PromiseWithResolvers<T> = (\"withResolvers\" in Promise) ? nativePromiseWithResolvers : polyfillPromiseWithResolvers;\n\n/**\n * A no-operation function.\n */\nexport const noop = () => {/* NO OP */ };\n\n/**\n * Executes a promise or a function that returns a promise and ignores any errors or results.\n * @param p - The promise or function that returns a promise to be executed.\n */\nexport function fireAndForget(p: Promise<any> | (() => Promise<any>)): void {\n    if (typeof p == \"function\") return fireAndForget(p());\n    p.then(noop).catch(noop);\n}\n\n/**\n * Yields a microtask.\n * \n * @returns A promise that resolves when the microtask is completed.\n */\nexport function yieldMicrotask() {\n    return new Promise<void>(res => queueMicrotask(res));\n}\n\n/**\n * A utility function that wraps the `requestIdleCallback` function and returns a promise.\n * If `requestIdleCallback` is not available in the global scope (iOS, Safari), it falls back to `yieldMicrotask`.\n * \n * @param options - The options to be passed to the `requestIdleCallback` function.\n * @returns A promise that resolves when the idle callback is executed.\n */\nexport function yieldRequestIdleCallback(options?: Parameters<typeof requestIdleCallback>[1]) {\n    if (!(\"requestIdleCallback\" in globalThis)) return yieldMicrotask();\n    return new Promise<void>(res => requestIdleCallback(() => res(), options));\n}\n\n/**\n * Yields the next animation frame.\n * \n * @returns A promise that resolves with the next animation frame.\n */\nexport function yieldAnimationFrame() {\n    return new Promise<number>(res => requestAnimationFrame(res));\n}\n\n/**\n * Yields the next batched animation frame.\n * \n * @returns A promise that resolves with the next frame.\n */\n\nlet currentYieldingAnimationFrame: Promise<number> | undefined;\nexport function yieldNextAnimationFrame() {\n    if (currentYieldingAnimationFrame) return currentYieldingAnimationFrame;\n    currentYieldingAnimationFrame = (async () => {\n        const ret = await yieldAnimationFrame();\n        currentYieldingAnimationFrame = undefined;\n        return ret;\n    })();\n    return currentYieldingAnimationFrame;\n}\n\n\nlet currentYieldingMicrotask: Promise<void> | undefined;\n\nexport function yieldNextMicrotask() {\n    if (currentYieldingMicrotask) return currentYieldingMicrotask;\n    currentYieldingMicrotask = (async () => {\n        await yieldMicrotask();\n        currentYieldingMicrotask = undefined;\n    })();\n    return currentYieldingMicrotask;\n}\n\nexport const TIMED_OUT_SIGNAL = Symbol(\"timed out\");\nexport type TIMED_OUT_SIGNAL = typeof TIMED_OUT_SIGNAL;\n/**\n * Creates a delay that can be canceled.\n *\n * @template T - The type of the cancel signal.\n * @param {number} timeout - The delay duration in milliseconds.\n * @param {T} [cancel=TIMED_OUT_SIGNAL as T] - The value to resolve the promise with if the delay is canceled.\n * @returns An object containing the promise and a cancel function.\n * @returns {Promise<T>} promise - A promise that resolves with the cancel signal after the timeout.\n * @returns {() => void} cancel - A function to cancel the delay.\n */\nexport function cancelableDelay<T = TIMED_OUT_SIGNAL>(timeout: number, cancel: T = TIMED_OUT_SIGNAL as T) {\n    let timer: ReturnType<typeof setTimeout> | undefined = undefined;\n    const promise = promiseWithResolver<T>();\n    timer = setTimeout(() => {\n        timer = undefined;\n        promise.resolve(cancel);\n    }, timeout);\n    return {\n        promise: promise.promise,\n        cancel() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = undefined;\n            }\n        },\n    };\n}\ntype ExtendableDelay<T, U extends string | symbol | number> = {\n    promise: Promise<T | U>;\n    cancel: (reason: T | U) => void;\n    extend(newTimeout: number): void;\n};\n\n/**\n * Creates an extendable delay that can be cancelled or extended.\n *\n * @template U - The type of the cancel signal,\n * @param {number} timeout - The initial timeout duration in milliseconds.\n * @param {U} cancel - The signal to use when cancelling the delay.\n * @returns {ExtendableDelay<TIMED_OUT_SIGNAL, U>} An object containing the promise, cancel function, and extend function.\n *\n * @property {Promise<TIMED_OUT_SIGNAL | U>} promise - The promise that resolves when the delay completes or is cancelled.\n * @property {() => void} cancel - Cancels the delay and resolves the promise with the cancel signal.\n * @property {(newTimeout: number) => void} extend - Extends the delay by the specified timeout duration.\n *\n * @throws {Error} If the delay has already been resolved.\n */\nexport function extendableDelay<U extends string | symbol | number = TIMED_OUT_SIGNAL>(timeout: number, cancel: U): ExtendableDelay<TIMED_OUT_SIGNAL, U> {\n    let timer: ReturnType<typeof setTimeout> | undefined = undefined;\n    const promise = promiseWithResolver<TIMED_OUT_SIGNAL | U>();\n    let resolved = false;\n    const setTimer = (newTimeout: number) => {\n        if (resolved) throw new Error(\"Already resolved!\");\n        return setTimeout(() => {\n            timer = undefined;\n            promise.resolve(TIMED_OUT_SIGNAL);\n            resolved = true;\n        }, newTimeout);\n    };\n    const extendTimer = (newTimeout: number) => {\n        if (resolved) throw new Error(\"Already resolved!\");\n        if (timer) {\n            clearTimeout(timer);\n            timer = undefined;\n        }\n        timer = setTimer(newTimeout);\n    };\n    const canceller = () => {\n        if (timer && !resolved) {\n            clearTimeout(timer);\n            timer = undefined;\n            promise.resolve(cancel);\n            resolved = true;\n        }\n    };\n    timer = setTimer(timeout);\n    return {\n        get promise() { return promise.promise; },\n        cancel: canceller,\n        extend: extendTimer\n    };\n}"],"names":[],"mappings":"AACA;;;;;AAKG;MACU,KAAK,GAAG,CAAI,EAAU,EAAE,MAAU,KAAgB;AAC3D,IAAA,OAAO,IAAI,OAAO,CAAC,CAAC,GAAG,KAAI;QACvB,UAAU,CAAC,MAAK;YACZ,GAAG,CAAC,MAAO,CAAC;SACf,EAAE,EAAE,CAAC;AACV,KAAC,CAAC;AACN;AAEA,MAAM,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC;AAEvC;;;;AAIG;AACI,eAAe,UAAU,CAAC,OAAyB,EAAA;AACtD,IAAA,OAAO,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,UAAU;AACpF;AACA;;;;AAIG;AACI,eAAe,cAAc,CAAC,QAA4B,EAAA;AAC7D,IAAA,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC;AAAE,QAAA,OAAO,KAAK;AACtC,IAAA,OAAO,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,UAAU;AACxF;AAQA;;;;AAIG;SACa,4BAA4B,GAAA;AACxC,IAAA,IAAI,OAAoE;AACxE,IAAA,IAAI,MAAmE;IACvE,MAAM,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,GAAG,EAAE,GAAG,KAAI;QACxC,OAAO,GAAG,GAAG;QACb,MAAM,GAAG,GAAG;AAChB,KAAC,CAAC;AACF,IAAA,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE;AACvC;AAEA;;;;AAIG;SACa,0BAA0B,GAAA;;AAEtC,IAAA,MAAM,CAAC,GAAG,OAAO,CAAC,aAAa,EAAK;IACpC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC;AACtC,IAAA,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE;AACvC;AACA;;;;AAIG;AACU,MAAA,mBAAmB,GAAqC,CAAC,eAAe,IAAI,OAAO,IAAI,0BAA0B,GAAG;AAEjI;;AAEG;MACU,IAAI,GAAG,MAAK;AAEzB;;;AAGG;AACG,SAAU,aAAa,CAAC,CAAsC,EAAA;IAChE,IAAI,OAAO,CAAC,IAAI,UAAU;AAAE,QAAA,OAAO,aAAa,CAAC,CAAC,EAAE,CAAC;IACrD,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;AAC5B;AAEA;;;;AAIG;SACa,cAAc,GAAA;AAC1B,IAAA,OAAO,IAAI,OAAO,CAAO,GAAG,IAAI,cAAc,CAAC,GAAG,CAAC,CAAC;AACxD;AAEA;;;;;;AAMG;AACG,SAAU,wBAAwB,CAAC,OAAmD,EAAA;AACxF,IAAA,IAAI,EAAE,qBAAqB,IAAI,UAAU,CAAC;QAAE,OAAO,cAAc,EAAE;AACnE,IAAA,OAAO,IAAI,OAAO,CAAO,GAAG,IAAI,mBAAmB,CAAC,MAAM,GAAG,EAAE,EAAE,OAAO,CAAC,CAAC;AAC9E;AAEA;;;;AAIG;SACa,mBAAmB,GAAA;AAC/B,IAAA,OAAO,IAAI,OAAO,CAAS,GAAG,IAAI,qBAAqB,CAAC,GAAG,CAAC,CAAC;AACjE;AAEA;;;;AAIG;AAEH,IAAI,6BAA0D;SAC9C,uBAAuB,GAAA;AACnC,IAAA,IAAI,6BAA6B;AAAE,QAAA,OAAO,6BAA6B;AACvE,IAAA,6BAA6B,GAAG,CAAC,YAAW;AACxC,QAAA,MAAM,GAAG,GAAG,MAAM,mBAAmB,EAAE;QACvC,6BAA6B,GAAG,SAAS;AACzC,QAAA,OAAO,GAAG;KACb,GAAG;AACJ,IAAA,OAAO,6BAA6B;AACxC;AAGA,IAAI,wBAAmD;SAEvC,kBAAkB,GAAA;AAC9B,IAAA,IAAI,wBAAwB;AAAE,QAAA,OAAO,wBAAwB;AAC7D,IAAA,wBAAwB,GAAG,CAAC,YAAW;QACnC,MAAM,cAAc,EAAE;QACtB,wBAAwB,GAAG,SAAS;KACvC,GAAG;AACJ,IAAA,OAAO,wBAAwB;AACnC;MAEa,gBAAgB,GAAG,MAAM,CAAC,WAAW;AAElD;;;;;;;;;AASG;SACa,eAAe,CAAuB,OAAe,EAAE,SAAY,gBAAqB,EAAA;IACpG,IAAI,KAAK,GAA8C,SAAS;AAChE,IAAA,MAAM,OAAO,GAAG,mBAAmB,EAAK;AACxC,IAAA,KAAK,GAAG,UAAU,CAAC,MAAK;QACpB,KAAK,GAAG,SAAS;AACjB,QAAA,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;KAC1B,EAAE,OAAO,CAAC;IACX,OAAO;QACH,OAAO,EAAE,OAAO,CAAC,OAAO;QACxB,MAAM,GAAA;YACF,IAAI,KAAK,EAAE;gBACP,YAAY,CAAC,KAAK,CAAC;gBACnB,KAAK,GAAG,SAAS;;SAExB;KACJ;AACL;AAOA;;;;;;;;;;;;;AAaG;AACa,SAAA,eAAe,CAAwD,OAAe,EAAE,MAAS,EAAA;IAC7G,IAAI,KAAK,GAA8C,SAAS;AAChE,IAAA,MAAM,OAAO,GAAG,mBAAmB,EAAwB;IAC3D,IAAI,QAAQ,GAAG,KAAK;AACpB,IAAA,MAAM,QAAQ,GAAG,CAAC,UAAkB,KAAI;AACpC,QAAA,IAAI,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC;QAClD,OAAO,UAAU,CAAC,MAAK;YACnB,KAAK,GAAG,SAAS;AACjB,YAAA,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC;YACjC,QAAQ,GAAG,IAAI;SAClB,EAAE,UAAU,CAAC;AAClB,KAAC;AACD,IAAA,MAAM,WAAW,GAAG,CAAC,UAAkB,KAAI;AACvC,QAAA,IAAI,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC;QAClD,IAAI,KAAK,EAAE;YACP,YAAY,CAAC,KAAK,CAAC;YACnB,KAAK,GAAG,SAAS;;AAErB,QAAA,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC;AAChC,KAAC;IACD,MAAM,SAAS,GAAG,MAAK;AACnB,QAAA,IAAI,KAAK,IAAI,CAAC,QAAQ,EAAE;YACpB,YAAY,CAAC,KAAK,CAAC;YACnB,KAAK,GAAG,SAAS;AACjB,YAAA,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;YACvB,QAAQ,GAAG,IAAI;;AAEvB,KAAC;AACD,IAAA,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC;IACzB,OAAO;QACH,IAAI,OAAO,KAAK,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE;AACzC,QAAA,MAAM,EAAE,SAAS;AACjB,QAAA,MAAM,EAAE;KACX;AACL;;;;"}