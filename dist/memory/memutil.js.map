{"version":3,"file":"memutil.js","sources":["../../src/memory/memutil.ts"],"sourcesContent":["// Due to strict constraints, they may have to be hidden once in order to save memory,\r\n\r\nimport type { SimpleStore } from \"../databases/SimpleStoreBase\";\r\n\r\nexport const PREFIX_TRENCH = \"trench\"\r\nexport const PREFIX_EPHEMERAL = \"ephemeral\"\r\nexport const PREFIX_PERMANENT = \"permanent\"\r\nlet idx = 0;\r\nlet series = `${Date.now()}`;\r\nfunction generateId(prefix: string) {\r\n    idx++\r\n    if (idx > 10000) {\r\n        series = `${Date.now()}`;\r\n        idx = 0;\r\n    }\r\n    const paddedIdx = idx + 10000000;\r\n    return `${PREFIX_TRENCH}-${prefix}-${series}-${paddedIdx}`;\r\n}\r\n\r\nfunction createRange(prefix: string, series: string) {\r\n    return [`${PREFIX_TRENCH}-${prefix}-${series}-`, `${PREFIX_TRENCH}-${prefix}-${series}.`];\r\n}\r\nfunction createId(prefix: string, series: string, idx: number) {\r\n    const paddedIdx = idx + 10000000;\r\n    return `${PREFIX_TRENCH}-${prefix}-${series}-${paddedIdx}`;\r\n}\r\n\r\nconst indexes = new Map<string, number>();\r\nexport type Evacuated<T> = () => Promise<T>\r\n\r\nconst inProgress = new Set<string>();\r\nconst failed = new Map<string, number>();\r\n\r\ntype CommittableDequeuedValue<T> = Promise<{\r\n    key: string;\r\n    value: T;\r\n    cancelCount: number;\r\n    pendingItems: number;\r\n    commit: () => Promise<void>;\r\n    cancel: () => void;\r\n} | undefined>\r\n/**\r\n * Represents a Trench, which is a memory utility class for managing data storage.\r\n */\r\nexport class Trench {\r\n    _db: SimpleStore<any>;\r\n    _flushTask: Promise<void> | undefined = undefined;\r\n    /**\r\n     * Constructs a new instance of the Trench class.\r\n     * @param db The SimpleStore instance used for storing data.\r\n     * @param flushExistItems Determines whether to flush existing items from the database.\r\n     */\r\n    constructor(db: SimpleStore<any>, flushExistItems = true) {\r\n        this._db = db;\r\n        if (flushExistItems) {\r\n            this._flushTask = (async () => {\r\n                const keys = await db.keys(`${PREFIX_TRENCH}-${PREFIX_EPHEMERAL}`, `${PREFIX_TRENCH}-${PREFIX_EPHEMERAL}.`);\r\n                for (const key of keys) {\r\n                    await db.delete(key);\r\n                }\r\n            })()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes all ephemeral keys from the SimpleStore.\r\n     * @returns {Promise<void>} A promise that resolves when all ephemeral keys are deleted.\r\n     */\r\n    async eraseAllEphemerals() {\r\n        const keys = await this._db.keys(`${PREFIX_TRENCH}-${PREFIX_EPHEMERAL}`, `${PREFIX_TRENCH}-${PREFIX_EPHEMERAL}.`);\r\n        for (const key of keys) {\r\n            await this._db.delete(key);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes all permanences from the SimpleStore.\r\n     * @returns {Promise<void>} A promise that resolves when all permanences are deleted.\r\n     */\r\n    async eraseAllPermanences() {\r\n        const keys = await this._db.keys(`${PREFIX_TRENCH}-${PREFIX_PERMANENT}`, `${PREFIX_TRENCH}-${PREFIX_PERMANENT}.`);\r\n        for (const key of keys) {\r\n            await this._db.delete(key);\r\n        }\r\n    }\r\n\r\n    concealing: Map<string, any> = new Map<string, any>();\r\n    /**\r\n     * Conceals an object by generating a unique key and storing the object in SimpleStore.\r\n     * The object can later be retrieved using the generated key.\r\n     * @param obj - The object to be concealed.\r\n     * @returns The generated key used to retrieve the concealed object.\r\n     */\r\n    conceal<T>(obj: T): string {\r\n        const key = generateId(PREFIX_EPHEMERAL);\r\n        // Race conditions should only be addressed in advance.\r\n        this.concealing.set(key, obj);\r\n        this._db.set(key, obj).then(async e => {\r\n            if (this.concealing.has(key)) {\r\n                this.concealing.delete(key)\r\n            } else {\r\n                // If not in time\r\n                await this._db.delete(key);\r\n            }\r\n        });\r\n        return key;\r\n    }\r\n    /**\r\n     * Dispose concealed object.\r\n     * @param key - The key to bury.\r\n     */\r\n    async bury(key: string) {\r\n        // TODO: TEST, This is untested yet\r\n        if (this.concealing.has(key)) {\r\n            this.concealing.delete(key);\r\n        }\r\n        await this._db.delete(key);\r\n    }\r\n\r\n    /**\r\n     * Exposes a concealed object by its key.\r\n     * The object is removed from the database after being exposed.\r\n     * @param key - The key of the concealed object.\r\n     * @returns The exposed object.\r\n     */\r\n    async expose<T>(key: string): Promise<T | undefined> {\r\n        if (this.concealing.has(key)) {\r\n            const value = this.concealing.get(key);\r\n            this.concealing.delete(key);\r\n            return value;\r\n        }\r\n        const obj = await this._db.get(key) as T;\r\n        await this._db.delete(key);\r\n        return obj;\r\n    }\r\n    _evacuate<T>(storeTask: Promise<void>, key: string): Evacuated<T> {\r\n        return async (): Promise<T> => {\r\n            if (this._flushTask) {\r\n                await this._flushTask;\r\n                this._flushTask = undefined\r\n            }\r\n            await storeTask;\r\n            const item = await this._db.get(key) as T;\r\n            await this._db.delete(key);\r\n            return item;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Evacuates a promise by storing its resolved value in the database and returning an `Evacuated` object.\r\n     * @param task The promise to be evacuated.\r\n     * @returns An `Evacuated` object representing the evacuated promise.\r\n     */\r\n    evacuatePromise<T>(task: Promise<T>): Evacuated<T> {\r\n        const key = generateId(PREFIX_EPHEMERAL);\r\n        const storeTask = (async () => {\r\n            const data = await task;\r\n            await this._db.set(key, data);\r\n        })();\r\n        return this._evacuate(storeTask, key);\r\n    }\r\n    /**\r\n     * Evacuates an object by storing it in the database and returning an `Evacuated` object.\r\n     * If the object is a Promise, it is first evacuated using the `evacuatePromise` method.\r\n     * @param obj - The object to be evacuated.\r\n     * @returns An `Evacuated` object representing the evacuated object.\r\n     */\r\n    evacuate<T>(obj: T): Evacuated<T> {\r\n        if (obj instanceof Promise) return this.evacuatePromise(obj);\r\n        const key = generateId(PREFIX_EPHEMERAL);\r\n        const storeTask = this._db.set(key, obj);\r\n        return this._evacuate(storeTask, key);\r\n    }\r\n    async _queue<T>(type: string, key: string, obj: T, index: number | undefined) {\r\n        if (index === undefined) {\r\n            // Only in ephemeral, we can do this.\r\n            index = indexes.get(key) ?? 0;\r\n            indexes.set(key, index + 1);\r\n        }\r\n        // is actually only need ephemeral?\r\n        const storeKey = createId(type, key, index);\r\n        await this._db.set(storeKey, obj);\r\n    }\r\n    async _dequeue<T>(type: string, key: string): Promise<T | undefined> {\r\n        const range = createRange(type, key);\r\n        const keys = (await this._db.keys(range[0], range[1])).filter(e => !inProgress.has(e));\r\n        if (keys.length === 0) return undefined;\r\n        return await this.expose<T>(keys[0]);\r\n    }\r\n    async _dequeueWithCommit<T>(type: string, key: string): CommittableDequeuedValue<T> {\r\n        const range = createRange(type, key);\r\n        const keysAll = (await this._db.keys(range[0], range[1]))\r\n        const keys = keysAll.filter(e => !inProgress.has(e));\r\n        if (keys.length === 0) return undefined;\r\n        const storeKey = keys[0];\r\n        inProgress.add(storeKey);\r\n        const previousFailed = failed.get(storeKey) || 0;\r\n        const value = await this._db.get(storeKey) as T;\r\n        return {\r\n            key: storeKey,\r\n            value,\r\n            cancelCount: previousFailed,\r\n            pendingItems: keysAll.length - 1,\r\n            commit: async () => {\r\n                await this._db.delete(storeKey);\r\n                failed.delete(storeKey);\r\n                inProgress.delete(storeKey);\r\n            },\r\n            cancel: () => {\r\n                failed.set(storeKey, (failed.get(storeKey) || 0) + 1);\r\n                inProgress.delete(storeKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Queues an object with the specified key and optional index.\r\n     * \r\n     * @template T - The type of the object being queued.\r\n     * @param {string} key - The key to associate with the object.\r\n     * @param {T} obj - The object to be queued.\r\n     * @param {number} [index] - The optional index at which to insert the object in the queue.\r\n     * @returns {Promise<void>} A promise that resolves when the object is queued.\r\n     */\r\n    queue<T>(key: string, obj: T, index?: number): Promise<void> {\r\n        return this._queue<T>(PREFIX_EPHEMERAL, key, obj, index);\r\n    }\r\n    /**\r\n     * Removes and returns the first element from the queue associated with the specified key.\r\n     * \r\n     * @template T - The type of elements in the queue.\r\n     * @param key - The key associated with the queue.\r\n     * @returns The first element from the queue, or undefined if the queue is empty.\r\n     */\r\n    dequeue<T>(key: string): Promise<T | undefined> {\r\n        return this._dequeue<T>(PREFIX_EPHEMERAL, key);\r\n    }\r\n    /**\r\n     * Dequeues an item. you can commit or cancel the dequeue operation.\r\n     * \r\n     * @template T - The type of the item being dequeued.\r\n     * @param key - The key of the item to dequeue.\r\n     * @returns The dequeued item.\r\n     */\r\n    dequeueWithCommit<T>(key: string): CommittableDequeuedValue<T> {\r\n        return this._dequeueWithCommit<T>(PREFIX_EPHEMERAL, key);\r\n    }\r\n\r\n    /**\r\n     * Queues an object permanently in the SimpleStore.\r\n     * \r\n     * @template T - The type of the object being queued.\r\n     * @param key - The key to associate with the object.\r\n     * @param obj - The object to be queued.\r\n     * @param index - Optional. The index at which to insert the object in the queue.\r\n     * @returns The updated queue.\r\n     */\r\n    queuePermanent<T>(key: string, obj: T, index?: number): Promise<void> {\r\n        return this._queue<T>(PREFIX_PERMANENT, key, obj, index);\r\n    }\r\n    /**\r\n     * Dequeues an permanent item from the SimpleStore with the specified key.\r\n     * \r\n     * @template T - The type of the item to dequeue.\r\n     * @param key - The key of the item to dequeue.\r\n     * @returns The dequeued item.\r\n     */\r\n    dequeuePermanent<T>(key: string): Promise<T | undefined> {\r\n        return this._dequeue<T>(PREFIX_PERMANENT, key);\r\n    }\r\n    /**\r\n     * Dequeues an permanent item from the SimpleStore. we can commit or cancel the dequeue operation.\r\n     * \r\n     * @template T - The type of the item being dequeued.\r\n     * @param key - The key of the item to dequeue.\r\n     * @returns The dequeued item.\r\n     */\r\n    dequeuePermanentWithCommit<T>(key: string): CommittableDequeuedValue<T> {\r\n        return this._dequeueWithCommit<T>(PREFIX_PERMANENT, key);\r\n    }\r\n\r\n}\r\n\r\n"],"names":[],"mappings":"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"}