{"version":3,"file":"memutil.js","sources":["../../src/memory/memutil.ts"],"sourcesContent":["// Due to strict constraints, they may have to be hidden once in order to save memory,\n\nimport type { SimpleStore } from \"../databases/SimpleStoreBase\";\n\nexport const PREFIX_TRENCH = \"trench\"\nexport const PREFIX_EPHEMERAL = \"ephemeral\"\nexport const PREFIX_PERMANENT = \"permanent\"\nlet idx = 0;\nlet series = `${Date.now()}`;\nfunction generateId(prefix: string) {\n    idx++\n    if (idx > 10000) {\n        series = `${Date.now()}`;\n        idx = 0;\n    }\n    const paddedIdx = idx + 10000000;\n    return `${PREFIX_TRENCH}-${prefix}-${series}-${paddedIdx}`;\n}\n\nfunction createRange(prefix: string, series: string) {\n    return [`${PREFIX_TRENCH}-${prefix}-${series}-`, `${PREFIX_TRENCH}-${prefix}-${series}.`];\n}\nfunction createId(prefix: string, series: string, idx: number) {\n    const paddedIdx = idx + 10000000;\n    return `${PREFIX_TRENCH}-${prefix}-${series}-${paddedIdx}`;\n}\n\nconst indexes = new Map<string, number>();\nexport type Evacuated<T> = () => Promise<T>\n\nconst inProgress = new Set<string>();\nconst failed = new Map<string, number>();\n\ntype CommittableDequeuedValue<T> = Promise<{\n    key: string;\n    value: T;\n    cancelCount: number;\n    pendingItems: number;\n    commit: () => Promise<void>;\n    cancel: () => void;\n} | undefined>\n/**\n * Represents a Trench, which is a memory utility class for managing data storage.\n */\nexport class Trench {\n    _db: SimpleStore<any>;\n    _flushTask: Promise<void> | undefined = undefined;\n    /**\n     * Constructs a new instance of the Trench class.\n     * @param db The SimpleStore instance used for storing data.\n     * @param flushExistItems Determines whether to flush existing items from the database.\n     */\n    constructor(db: SimpleStore<any>, flushExistItems = true) {\n        this._db = db;\n        if (flushExistItems) {\n            this._flushTask = (async () => {\n                const keys = await db.keys(`${PREFIX_TRENCH}-${PREFIX_EPHEMERAL}`, `${PREFIX_TRENCH}-${PREFIX_EPHEMERAL}.`);\n                for (const key of keys) {\n                    await db.delete(key);\n                }\n            })()\n        }\n    }\n\n    /**\n     * Deletes all ephemeral keys from the SimpleStore.\n     * @returns {Promise<void>} A promise that resolves when all ephemeral keys are deleted.\n     */\n    async eraseAllEphemerals() {\n        const keys = await this._db.keys(`${PREFIX_TRENCH}-${PREFIX_EPHEMERAL}`, `${PREFIX_TRENCH}-${PREFIX_EPHEMERAL}.`);\n        for (const key of keys) {\n            await this._db.delete(key);\n        }\n    }\n\n    /**\n     * Deletes all permanences from the SimpleStore.\n     * @returns {Promise<void>} A promise that resolves when all permanences are deleted.\n     */\n    async eraseAllPermanences() {\n        const keys = await this._db.keys(`${PREFIX_TRENCH}-${PREFIX_PERMANENT}`, `${PREFIX_TRENCH}-${PREFIX_PERMANENT}.`);\n        for (const key of keys) {\n            await this._db.delete(key);\n        }\n    }\n\n    concealing: Map<string, any> = new Map<string, any>();\n    /**\n     * Conceals an object by generating a unique key and storing the object in SimpleStore.\n     * The object can later be retrieved using the generated key.\n     * @param obj - The object to be concealed.\n     * @returns The generated key used to retrieve the concealed object.\n     */\n    conceal<T>(obj: T): string {\n        const key = generateId(PREFIX_EPHEMERAL);\n        // Race conditions should only be addressed in advance.\n        this.concealing.set(key, obj);\n        this._db.set(key, obj).then(async e => {\n            if (this.concealing.has(key)) {\n                this.concealing.delete(key)\n            } else {\n                // If not in time\n                await this._db.delete(key);\n            }\n        });\n        return key;\n    }\n    /**\n     * Dispose concealed object.\n     * @param key - The key to bury.\n     */\n    async bury(key: string) {\n        // TODO: TEST, This is untested yet\n        if (this.concealing.has(key)) {\n            this.concealing.delete(key);\n        }\n        await this._db.delete(key);\n    }\n\n    /**\n     * Exposes a concealed object by its key.\n     * The object is removed from the database after being exposed.\n     * @param key - The key of the concealed object.\n     * @returns The exposed object.\n     */\n    async expose<T>(key: string): Promise<T | undefined> {\n        if (this.concealing.has(key)) {\n            const value = this.concealing.get(key);\n            this.concealing.delete(key);\n            return value;\n        }\n        const obj = await this._db.get(key) as T;\n        await this._db.delete(key);\n        return obj;\n    }\n    _evacuate<T>(storeTask: Promise<void>, key: string): Evacuated<T> {\n        return async (): Promise<T> => {\n            if (this._flushTask) {\n                await this._flushTask;\n                this._flushTask = undefined\n            }\n            await storeTask;\n            const item = await this._db.get(key) as T;\n            await this._db.delete(key);\n            return item;\n        }\n    }\n\n\n    /**\n     * Evacuates a promise by storing its resolved value in the database and returning an `Evacuated` object.\n     * @param task The promise to be evacuated.\n     * @returns An `Evacuated` object representing the evacuated promise.\n     */\n    evacuatePromise<T>(task: Promise<T>): Evacuated<T> {\n        const key = generateId(PREFIX_EPHEMERAL);\n        const storeTask = (async () => {\n            const data = await task;\n            await this._db.set(key, data);\n        })();\n        return this._evacuate(storeTask, key);\n    }\n    /**\n     * Evacuates an object by storing it in the database and returning an `Evacuated` object.\n     * If the object is a Promise, it is first evacuated using the `evacuatePromise` method.\n     * @param obj - The object to be evacuated.\n     * @returns An `Evacuated` object representing the evacuated object.\n     */\n    evacuate<T>(obj: T): Evacuated<T> {\n        if (obj instanceof Promise) return this.evacuatePromise(obj);\n        const key = generateId(PREFIX_EPHEMERAL);\n        const storeTask = this._db.set(key, obj);\n        return this._evacuate(storeTask, key);\n    }\n    async _queue<T>(type: string, key: string, obj: T, index: number | undefined) {\n        if (index === undefined) {\n            // Only in ephemeral, we can do this.\n            index = indexes.get(key) ?? 0;\n            indexes.set(key, index + 1);\n        }\n        // is actually only need ephemeral?\n        const storeKey = createId(type, key, index);\n        await this._db.set(storeKey, obj);\n    }\n    async _dequeue<T>(type: string, key: string): Promise<T | undefined> {\n        const range = createRange(type, key);\n        const keys = (await this._db.keys(range[0], range[1])).filter(e => !inProgress.has(e));\n        if (keys.length === 0) return undefined;\n        return await this.expose<T>(keys[0]);\n    }\n    async _dequeueWithCommit<T>(type: string, key: string): CommittableDequeuedValue<T> {\n        const range = createRange(type, key);\n        const keysAll = (await this._db.keys(range[0], range[1]))\n        const keys = keysAll.filter(e => !inProgress.has(e));\n        if (keys.length === 0) return undefined;\n        const storeKey = keys[0];\n        inProgress.add(storeKey);\n        const previousFailed = failed.get(storeKey) || 0;\n        const value = await this._db.get(storeKey) as T;\n        return {\n            key: storeKey,\n            value,\n            cancelCount: previousFailed,\n            pendingItems: keysAll.length - 1,\n            commit: async () => {\n                await this._db.delete(storeKey);\n                failed.delete(storeKey);\n                inProgress.delete(storeKey);\n            },\n            cancel: () => {\n                failed.set(storeKey, (failed.get(storeKey) || 0) + 1);\n                inProgress.delete(storeKey);\n            }\n        }\n    }\n\n    /**\n     * Queues an object with the specified key and optional index.\n     * \n     * @template T - The type of the object being queued.\n     * @param {string} key - The key to associate with the object.\n     * @param {T} obj - The object to be queued.\n     * @param {number} [index] - The optional index at which to insert the object in the queue.\n     * @returns {Promise<void>} A promise that resolves when the object is queued.\n     */\n    queue<T>(key: string, obj: T, index?: number): Promise<void> {\n        return this._queue<T>(PREFIX_EPHEMERAL, key, obj, index);\n    }\n    /**\n     * Removes and returns the first element from the queue associated with the specified key.\n     * \n     * @template T - The type of elements in the queue.\n     * @param key - The key associated with the queue.\n     * @returns The first element from the queue, or undefined if the queue is empty.\n     */\n    dequeue<T>(key: string): Promise<T | undefined> {\n        return this._dequeue<T>(PREFIX_EPHEMERAL, key);\n    }\n    /**\n     * Dequeues an item. you can commit or cancel the dequeue operation.\n     * \n     * @template T - The type of the item being dequeued.\n     * @param key - The key of the item to dequeue.\n     * @returns The dequeued item.\n     */\n    dequeueWithCommit<T>(key: string): CommittableDequeuedValue<T> {\n        return this._dequeueWithCommit<T>(PREFIX_EPHEMERAL, key);\n    }\n\n    /**\n     * Queues an object permanently in the SimpleStore.\n     * \n     * @template T - The type of the object being queued.\n     * @param key - The key to associate with the object.\n     * @param obj - The object to be queued.\n     * @param index - Optional. The index at which to insert the object in the queue.\n     * @returns The updated queue.\n     */\n    queuePermanent<T>(key: string, obj: T, index?: number): Promise<void> {\n        return this._queue<T>(PREFIX_PERMANENT, key, obj, index);\n    }\n    /**\n     * Dequeues an permanent item from the SimpleStore with the specified key.\n     * \n     * @template T - The type of the item to dequeue.\n     * @param key - The key of the item to dequeue.\n     * @returns The dequeued item.\n     */\n    dequeuePermanent<T>(key: string): Promise<T | undefined> {\n        return this._dequeue<T>(PREFIX_PERMANENT, key);\n    }\n    /**\n     * Dequeues an permanent item from the SimpleStore. we can commit or cancel the dequeue operation.\n     * \n     * @template T - The type of the item being dequeued.\n     * @param key - The key of the item to dequeue.\n     * @returns The dequeued item.\n     */\n    dequeuePermanentWithCommit<T>(key: string): CommittableDequeuedValue<T> {\n        return this._dequeueWithCommit<T>(PREFIX_PERMANENT, key);\n    }\n\n}\n\n"],"names":[],"mappings":"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"}