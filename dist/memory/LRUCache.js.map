{"version":3,"file":"LRUCache.js","sources":["../../src/memory/LRUCache.ts"],"sourcesContent":["import { Logger, LOG_LEVEL_VERBOSE } from \"../common/logger\";\r\n\r\n/**\r\n * Represents a Least Recently Used (LRU) Cache.\r\n * @template K The type of the cache keys.\r\n * @template V The type of the cache values.\r\n */\r\nexport class LRUCache<K, V> {\r\n    private cache = new Map<K, V>([]);\r\n    private revCache = new Map<V, K>([]);\r\n    maxCache = 200;\r\n    maxCachedLength = 50000000; // means 50 mb to 400mb.\r\n    cachedLength = 0;\r\n    enableReversed = true;\r\n\r\n    /**\r\n     * Creates a new instance of the LRUCache class.\r\n     * @param maxCache The maximum number of items to cache.\r\n     * @param maxCacheLength The maximum length of the cached values.\r\n     * @param forwardOnly True if we only need to cache forward values.\r\n     */\r\n    constructor(maxCache: number, maxCacheLength: number, forwardOnly = false) {\r\n        this.maxCache = maxCache || 200;\r\n        this.maxCachedLength = (maxCacheLength || 1) * 1000000;\r\n        this.enableReversed = !forwardOnly;\r\n        Logger(`Cache initialized ${this.maxCache} / ${this.maxCachedLength}`, LOG_LEVEL_VERBOSE);\r\n    }\r\n\r\n    /**\r\n     * Clears the cache.\r\n     */\r\n    clear() {\r\n        this.cache.clear();\r\n        this.revCache.clear();\r\n    }\r\n\r\n    /**\r\n     * Checks if the cache contains the specified key.\r\n     * @param key The key to check.\r\n     * @returns A boolean indicating whether the cache contains the key.\r\n     */\r\n    has(key: K): boolean {\r\n        return this.cache.has(key);\r\n    }\r\n\r\n    /**\r\n     * Gets the value associated with the specified key from the cache.\r\n     * @param key The key to retrieve the value for.\r\n     * @returns The value associated with the key, or undefined if the key is not found.\r\n     * @remarks After calling this method, the key will be updated to recently used.\r\n     */\r\n    get(key: K): V | undefined {\r\n        const v = this.cache.get(key);\r\n\r\n        if (v) {\r\n            // update the key to recently used.\r\n            this.cache.delete(key);\r\n            this.cache.set(key, v);\r\n            if (this.enableReversed) {\r\n                this.revCache.delete(v);\r\n                this.revCache.set(v, key);\r\n            }\r\n        }\r\n        return v;\r\n    }\r\n\r\n    /**\r\n     * Gets the key associated with the specified value from the cache.\r\n     * @param value The value to retrieve the key for.\r\n     * @returns The key associated with the value, or undefined if the value is not found.\r\n     * @remarks After calling this method, the key will be updated to recently used.\r\n     */\r\n    revGet(value: V): K | undefined {\r\n        const key = this.revCache.get(value);\r\n        if (key) {\r\n            // update the key to recently used.\r\n            this.cache.delete(key);\r\n            this.revCache.delete(value);\r\n            this.cache.set(key, value);\r\n            this.revCache.set(value, key);\r\n        }\r\n        return key;\r\n    }\r\n\r\n    /**\r\n     * Sets the value associated with the specified key in the cache.\r\n     * @param key The key to set the value for.\r\n     * @param value The value to set.\r\n     */\r\n    set(key: K, value: V) {\r\n        this.cache.set(key, value);\r\n        if (this.enableReversed) this.revCache.set(value, key);\r\n        this.cachedLength += `${value}`.length;\r\n        if (this.cache.size > this.maxCache || this.cachedLength > this.maxCachedLength) {\r\n            for (const [key, value] of this.cache) {\r\n                this.cache.delete(key);\r\n                if (this.enableReversed) this.revCache.delete(value);\r\n                this.cachedLength -= `${value}`.length;\r\n                if (this.cache.size <= this.maxCache && this.cachedLength <= this.maxCachedLength)\r\n                    break;\r\n            }\r\n        } else {\r\n            // console.log([this.cache.size, this.cachedLength]);\r\n        }\r\n    }\r\n}\r\n"],"names":[],"mappings":";;AAEA;;;;AAIG;MACU,QAAQ,CAAA;AAQjB;;;;;AAKG;AACH,IAAA,WAAA,CAAY,QAAgB,EAAE,cAAsB,EAAE,WAAW,GAAG,KAAK,EAAA;AAbjE,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,OAAA,EAAA;;;;mBAAQ,IAAI,GAAG,CAAO,EAAE,CAAC;AAAC,SAAA,CAAA,CAAA;AAC1B,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,UAAA,EAAA;;;;mBAAW,IAAI,GAAG,CAAO,EAAE,CAAC;AAAC,SAAA,CAAA,CAAA;AACrC,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,UAAA,EAAA;;;;mBAAW,GAAG;AAAC,SAAA,CAAA,CAAA;AACf,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,iBAAA,EAAA;;;;mBAAkB,QAAQ;AAAC,SAAA,CAAA,CAAA;AAC3B,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,cAAA,EAAA;;;;mBAAe,CAAC;AAAC,SAAA,CAAA,CAAA;AACjB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,gBAAA,EAAA;;;;mBAAiB,IAAI;AAAC,SAAA,CAAA,CAAA;AASlB,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,GAAG,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,CAAC,cAAc,IAAI,CAAC,IAAI,OAAO,CAAC;AACvD,QAAA,IAAI,CAAC,cAAc,GAAG,CAAC,WAAW,CAAC;AACnC,QAAA,MAAM,CAAC,CAAA,kBAAA,EAAqB,IAAI,CAAC,QAAQ,CAAA,GAAA,EAAM,IAAI,CAAC,eAAe,CAAA,CAAE,EAAE,iBAAiB,CAAC,CAAC;KAC7F;AAED;;AAEG;IACH,KAAK,GAAA;AACD,QAAA,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;AACnB,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;KACzB;AAED;;;;AAIG;AACH,IAAA,GAAG,CAAC,GAAM,EAAA;QACN,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAC9B;AAED;;;;;AAKG;AACH,IAAA,GAAG,CAAC,GAAM,EAAA;QACN,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAE9B,IAAI,CAAC,EAAE;;AAEH,YAAA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AACvB,YAAA,IAAI,IAAI,CAAC,cAAc,EAAE;AACrB,gBAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;aAC7B;SACJ;AACD,QAAA,OAAO,CAAC,CAAC;KACZ;AAED;;;;;AAKG;AACH,IAAA,MAAM,CAAC,KAAQ,EAAA;QACX,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,GAAG,EAAE;;AAEL,YAAA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACvB,YAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC3B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;SACjC;AACD,QAAA,OAAO,GAAG,CAAC;KACd;AAED;;;;AAIG;IACH,GAAG,CAAC,GAAM,EAAE,KAAQ,EAAA;QAChB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC3B,IAAI,IAAI,CAAC,cAAc;YAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACvD,IAAI,CAAC,YAAY,IAAI,CAAA,EAAG,KAAK,CAAE,CAAA,CAAC,MAAM,CAAC;AACvC,QAAA,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE;YAC7E,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;AACnC,gBAAA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACvB,IAAI,IAAI,CAAC,cAAc;AAAE,oBAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACrD,IAAI,CAAC,YAAY,IAAI,CAAA,EAAG,KAAK,CAAE,CAAA,CAAC,MAAM,CAAC;AACvC,gBAAA,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,eAAe;oBAC7E,MAAM;aACb;SAGJ;KACJ;AACJ;;;;"}