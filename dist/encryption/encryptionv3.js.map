{"version":3,"file":"encryptionv3.js","sources":["../../src/encryption/encryptionv3.ts"],"sourcesContent":["import { arrayBufferToBase64Single, base64ToArrayBuffer, readString, writeString } from \"../binary/base64\";\r\nimport { hexStringToUint8Array, uint8ArrayToHexString } from \"../binary/hex\";\r\n\r\nconst webcrypto = globalThis.crypto;\r\nconst SALT_STR = \"fancySyncForYou!\";\r\nconst SALT = new TextEncoder().encode(SALT_STR)\r\n\r\n\r\nlet previousPassphrase = \"\";\r\nlet encryptionKey: CryptoKey;\r\n\r\n/**\r\n * Resets the IV buffer and generates a new random value for encryption.\r\n * IV consists of 4 bytes of nonce after 8 bytes of random value.\r\n */\r\nfunction resetV3Buf() {\r\n    _nonceV3[0] = 0;\r\n    const _wk = webcrypto.getRandomValues(new Uint8Array(12));\r\n    bufV3.set(_wk);\r\n    bufV3.set(_nonceV3, 8);\r\n}\r\n// return webcrypto.getRandomValues(new Uint8Array(8));\r\n\r\nconst _nonceV3 = new Uint32Array(1);\r\nconst bufV3 = new Uint8Array(12);\r\n/**\r\n * Increments the initialization vector (IV) used for encryption.\r\n * \r\n * @returns {Buffer} The updated IV buffer.\r\n */\r\nfunction incIV() {\r\n    _nonceV3[0]++;\r\n    bufV3.set(_nonceV3, 8);\r\n    // reset the IV after every 1500 encryptions.\r\n    if (_nonceV3[0] > 1500) {\r\n        resetV3Buf();\r\n    }\r\n    return bufV3;\r\n}\r\n\r\n/**\r\n * Generates a key using the passphrase.\r\n * \r\n * @param passphrase - The passphrase used for generating the key.\r\n * @returns The derived key.\r\n */\r\nexport async function generateKey(passphrase: string): Promise<CryptoKey> {\r\n    const passphraseBin = new TextEncoder().encode(passphrase);\r\n    const digestOfPassphrase = await webcrypto.subtle.digest('SHA-256', new Uint8Array([...passphraseBin, ...SALT]));\r\n    const salt = digestOfPassphrase.slice(0, 16);\r\n    const baseKey = await webcrypto.subtle.importKey(\r\n        'raw',\r\n        passphraseBin,\r\n        'PBKDF2',\r\n        false,\r\n        ['deriveBits', 'deriveKey']\r\n    );\r\n\r\n    const pbkdf2Params = {\r\n        name: 'PBKDF2',\r\n        hash: 'SHA-256',\r\n        salt: salt,\r\n        iterations: 100000 // Increased iterations for better security\r\n    };\r\n\r\n    const derivedKey = await webcrypto.subtle.deriveKey(\r\n        pbkdf2Params,\r\n        baseKey,\r\n        { name: \"AES-GCM\", length: 256 },\r\n        false,\r\n        ['decrypt', 'encrypt']\r\n    );\r\n    return derivedKey;\r\n}\r\n\r\n/**\r\n * Encrypts the input string using AES-GCM encryption algorithm with the provided passphrase.\r\n * \r\n * @param input - The string to be encrypted.\r\n * @param passphrase - The passphrase used for encryption.\r\n * @returns The encrypted string with the initialization vector (IV) prepended.\r\n * @remarks The salt is fixed and is not changed for every encryption due to performance reasons.\r\n * This function is still experimental and not guaranteed to be safe\r\n */\r\nexport async function encryptV3(input: string, passphrase: string) {\r\n    if (previousPassphrase !== passphrase) {\r\n        resetV3Buf();\r\n        const key = await generateKey(passphrase);\r\n        encryptionKey = key;\r\n        previousPassphrase = passphrase;\r\n    }\r\n\r\n    const iv = incIV();\r\n    const dataBuf = writeString(input)\r\n\r\n    const encryptedDataArrayBuffer = await webcrypto.subtle.encrypt({ name: \"AES-GCM\", iv }, encryptionKey, dataBuf);\r\n    const encryptedData2 = \"\" + await arrayBufferToBase64Single(new Uint8Array(encryptedDataArrayBuffer));\r\n    // return data with iv.\r\n    // |%~| iv(12) | data ....  \r\n    const ret = `%~${uint8ArrayToHexString(iv)}${encryptedData2}`;\r\n    return ret;\r\n}\r\n\r\nlet previousDecryptionPassphrase = \"\";\r\nlet decryptionKey: CryptoKey;\r\n\r\n\r\n/**\r\n * Decrypts the encrypted result using the provided passphrase.\r\n * \r\n * @param encryptedResult - The encrypted result to be decrypted.\r\n * @param passphrase - The passphrase used for decryption.\r\n * @returns The decrypted plain text.\r\n * @remarks The salt is fixed and is not changed for every encryption due to performance reasons.\r\n * This function is still experimental and not guaranteed to be safe\r\n */\r\nexport async function decryptV3(encryptedResult: string, passphrase: string) {\r\n    if (previousDecryptionPassphrase !== passphrase) {\r\n        const key = await generateKey(passphrase);\r\n        decryptionKey = key;\r\n        previousDecryptionPassphrase = passphrase;\r\n    }\r\n    const ivStr = encryptedResult.substring(2, 26);\r\n    const encryptedData = encryptedResult.substring(26);\r\n    const iv = hexStringToUint8Array(ivStr);\r\n    const encryptedDataArrayBuffer = base64ToArrayBuffer(encryptedData)\r\n    const dataBuffer = await webcrypto.subtle.decrypt({ name: \"AES-GCM\", iv }, decryptionKey, encryptedDataArrayBuffer);\r\n    const plain = readString(new Uint8Array(dataBuffer));\r\n    return plain;\r\n}\r\n"],"names":[],"mappings":"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"}