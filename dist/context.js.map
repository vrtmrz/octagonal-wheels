{"version":3,"file":"context.js","sources":["../src/context.ts"],"sourcesContent":["/**\n * Binds a context object to a function, creating a new function that will invoke the original function with the provided context object.\n * \n * @param ctx - The context object to bind to the function.\n * @param func - The function to bind the context to.\n * @returns A new function that will invoke the original function with the provided context.\n * @template T - The type of the arguments of the original function.\n * @template U - The return type of the original function.\n * @template Context - The type of the context object.\n */\nexport function bindContext<T extends any[], U extends any | Promise<any>, Context>(ctx: Context, func: (ctx: Context, ...args: T) => U): (...args: T) => U {\n    const context = ctx;\n    return (...args: T) => func(context, ...args);\n}\n\n\n/**\n * Binds a context retrieving function to a given function.\n *\n * @template T - The type of the arguments passed to the function.\n * @template U - The return type of the function.\n * @template Context - The type of the context.\n * @param ctxFun - The context function.\n * @param func - The function to bind the context to.\n * @returns A new function that calls the original function with the bound context.\n */\nexport function bindContextFunc<T extends any[], U, Context>(ctxFun: () => Context, func: (ctx: Context, ...args: T) => U): (...args: T) => U {\n    const context = ctxFun;\n    return (...args: T) => func(context(), ...args);\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;AASG;AACa,SAAA,WAAW,CAAyD,GAAY,EAAE,IAAqC,EAAA;IACnI,MAAM,OAAO,GAAG,GAAG,CAAC;AACpB,IAAA,OAAO,CAAC,GAAG,IAAO,KAAK,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;AAClD,CAAC;AAGD;;;;;;;;;AASG;AACa,SAAA,eAAe,CAA8B,MAAqB,EAAE,IAAqC,EAAA;IACrH,MAAM,OAAO,GAAG,MAAM,CAAC;AACvB,IAAA,OAAO,CAAC,GAAG,IAAO,KAAK,IAAI,CAAC,OAAO,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;AACpD;;;;"}