{"version":3,"file":"processor_v2.js","sources":["../../src/concurrency/processor_v2.ts"],"sourcesContent":["import { Logger, LOG_LEVEL_VERBOSE } from \"../common/logger\";\nimport type { ReactiveSource } from \"../dataobject/reactive\";\nimport { RESULT_TIMED_OUT } from \"../common/const\";\nimport { noop, delay, fireAndForget, promiseWithResolver, PromiseWithResolvers, TIMED_OUT_SIGNAL, cancelableDelay } from \"../promises\";\nimport { EventHub } from \"../events\";\nimport { PaceMaker } from \"../bureau/PaceMaker\";\nimport { Clerk, ClerkGroup } from \"../bureau/Clerk\";\nimport { Inbox } from \"../bureau/Inbox\";\n\n/**\n * @deprecated Use EventHub and waitFor instead.\n */\nexport class Notifier {\n\n    _p: PromiseWithResolvers<void> = promiseWithResolver<void>();\n    isUsed = false;\n    notify() {\n        if (!this.isUsed) {\n            return;\n        }\n        this.isUsed = false;\n        void this._p.promise.finally(noop);\n        this._p.resolve();\n        this._p = promiseWithResolver();\n    }\n    get nextNotify(): Promise<void> {\n        this.isUsed = true;\n        return this._p.promise;\n    }\n}\n\nconst allRunningProcessors = new Set<QueueProcessor<any, any>>([]);\n\n/**\n * QueueProcessor Parameters\n */\ntype ProcessorParams<T> = {\n    /**\n     * How many processes runs concurrently\n     */\n    concurrentLimit?: number;\n    /**\n     * Number of entities passed to the processor at once\n     */\n    batchSize?: number;\n    /**\n     * Numbers of queued entities to ignore delay and run immediately\n     */\n    yieldThreshold?: number;\n    /**\n     * Time(ms) to ignore yieldThreshold and run process\n     */\n    delay?: number;\n    interval?: number;\n\n    /**\n     * @deprecated\n     * \n     */\n    maintainDelay?: boolean;\n    suspended: boolean;\n    /**\n     * ReactiveSource to notify the remaining count.\n     */\n    remainingReactiveSource?: ReactiveSource<number>;\n    /**\n     * ReactiveSource to notify the total remaining count.\n     */\n    totalRemainingReactiveSource?: ReactiveSource<number>;\n    /**\n     * ReactiveSource to notify how many items are processing;\n     */\n    processingEntitiesReactiveSource?: ReactiveSource<number>;\n    /**\n     * If true, processed result will be buffered until a downstream has been connected.\n     */\n    keepResultUntilDownstreamConnected?: boolean;\n    pipeTo?: QueueProcessor<T, any>;\n};\n\ntype ProcessorResult<T> = Promise<T[]> | T[] | undefined | void | Promise<void> | Promise<undefined>;\ntype Processor<T, U> = (entity: T[]) => ProcessorResult<U>;\n\ninterface ProcessorEvents {\n    \"yielded\": undefined;\n    \"tickEmpty\": undefined;\n    \"tickImmediate\": undefined;\n    \"tick\": undefined;\n    \"tickDelayTimeout\": undefined;\n    \"tickSuspended\": undefined;\n    \"tickResumed\": undefined;\n    \"suspended\": undefined;\n    \"idle\": undefined;\n\n}\nexport class QueueProcessor<T, U> {\n    _queue: T[] = [];\n    _processor: Processor<T, U>;\n    _enqueueProcessor: (queue: T[], newEntity: T) => T[] = (queue, entity) => (queue.push(entity), queue);\n    _isSuspended = true;\n    _nextProcessNeedsImmediate = false;\n\n    _pipeTo?: QueueProcessor<U, any>;\n\n    _root?: QueueProcessor<any, any> = undefined;\n    _remainingReactiveSource?: ReactiveSource<number>;\n    _totalRemainingReactiveSource?: ReactiveSource<number>;\n    _processingEntitiesReactiveSource?: ReactiveSource<number>;\n    _keepResultUntilDownstreamConnected = false;\n    _keptResult = [] as U[];\n\n    _runOnUpdateBatch: () => void = () => { };\n\n    // Parameters\n\n    // How many processes running concurrently\n    concurrentLimit: number = 1;\n\n    // How many entries processed at once\n    batchSize: number = 1;\n\n    // How many entries kept in before the delay\n    yieldThreshold: number = 1;\n\n    // If set, wait for set milliseconds after enqueued\n    // Note: If reached to the batchSize, run immediately\n    delay: number = 0;\n    maintainDelay: boolean;\n    interval: number = 0;\n\n    // This means numbers of the entities which are now processing\n    processingEntities: number = 0;\n\n    // This means numbers of the entries which dequeued from the queue but not processed yet.\n    waitingEntries: number = 0;\n\n    // Event Hub\n    _hub: EventHub<ProcessorEvents> = new EventHub<ProcessorEvents>();\n\n\n    get nowProcessing(): number {\n        return this.processingEntities;\n    }\n    get totalNowProcessing(): number {\n        return this.nowProcessing + (this._pipeTo?.totalNowProcessing || 0);\n    }\n\n    get remaining(): number {\n        return this._queue.length + this.processingEntities + this.waitingEntries;\n    }\n    get totalRemaining(): number {\n        return this.remaining + (this._pipeTo?.totalRemaining || 0);\n    }\n    updateStatus(setFunc: () => void): void {\n        setFunc();\n        this._updateReactiveSource();\n    }\n\n\n    suspend(): QueueProcessor<T, U> {\n        this._isSuspended = true;\n        this._hub.emitEvent(\"tickSuspended\");\n        return this;\n    }\n\n    resume(): this {\n        this._isSuspended = false;\n        this._hub.emitEvent(\"tickResumed\");\n        return this;\n    }\n    resumePipeLine(): this {\n        this._pipeTo?.resumePipeLine();\n        this.resume();\n        return this;\n    }\n    startPipeline(): this {\n        this.root.resumePipeLine();\n        return this;\n    }\n\n    get root(): QueueProcessor<any, any> {\n        if (this._root === undefined) {\n            return this;\n        }\n        return this._root;\n    }\n\n\n    _initEventHub() {\n        this._hub.onEvent(\"tickResumed\", () => this._run());\n    }\n\n\n    async _waitFor<const T extends (keyof ProcessorEvents)[]>(keys: T, timeout?: number): Promise<T[number] | TIMED_OUT_SIGNAL> {\n        const items = keys.map(key => {\n            const p = promiseWithResolver<typeof key>();\n            const releaser = this._hub.onEvent(key, () => {\n                p.resolve(key);\n            });\n            p.promise = p.promise.finally(() => {\n                releaser();\n            });\n            return p;\n        });\n        const timer = timeout ? cancelableDelay(timeout) : undefined;\n        const tasks = [...items.map(i => i.promise), ...(timer ? [timer.promise] : [])];\n        const ret = await Promise.race(tasks);\n        // Release unhandled eventHandlers\n        items.forEach(i => i.resolve(undefined!));\n        return ret;\n    }\n    _triggerTickDelay() {\n        if (!this._delayTimer) {\n            this._delayTimer = setTimeout(\n                () => {\n                    this._hub.emitEvent(\"tickDelayTimeout\");\n                    this._delayTimer = undefined;\n                }\n            );\n        }\n    }\n    _clearTickDelay() {\n        if (this._delayTimer) {\n            clearTimeout(this._delayTimer);\n            this._delayTimer = undefined;\n        }\n    }\n    _notifyIfIdle() {\n        return this.root.__notifyIfIdle();\n    }\n    __notifyIfIdle() {\n        if (this._processCount == 0 && !this._canCollectBatch()) {\n            this._hub.emitEvent(\"idle\");\n        }\n        if (this._pipeTo) {\n            this._pipeTo.__notifyIfIdle();\n        }\n    }\n\n    _onTick() {\n        if (!this._canCollectBatch()) {\n            this._notifyIfIdle();\n            this._clearTickDelay();\n            this._hub.emitEvent(\"tickEmpty\");\n            return;\n        }\n        if (this._nextProcessNeedsImmediate) {\n            this._clearTickDelay();\n            this._nextProcessNeedsImmediate = false;\n            this._hub.emitEvent(\"tickImmediate\");\n            return;\n        }\n        if (this._queue.length > this.yieldThreshold) {\n            this._clearTickDelay();\n            this._hub.emitEvent(\"yielded\");\n        } else {\n            if (!this.delay) {\n                this._clearTickDelay();\n                this._hub.emitEvent(\"tickDelayTimeout\");\n                return;\n            }\n            if (this._delayTimer) {\n                // NO OP.\n            } else {\n                this._triggerTickDelay();\n            }\n        }\n    }\n\n    _delayTimer?: ReturnType<typeof setTimeout>;\n\n    _intervalPaceMaker: PaceMaker;\n\n    constructor(processor: Processor<T, U>, params?: ProcessorParams<U>, items?: T[], enqueueProcessor?: (queue: T[], newEntity: T) => T[]) {\n        this._root = this;\n        this._processor = processor;\n        this.batchSize = params?.batchSize ?? 1;\n        this.yieldThreshold = params?.yieldThreshold ?? params?.batchSize ?? 0;\n        this.concurrentLimit = params?.concurrentLimit ?? 1;\n        this.delay = params?.delay ?? 0;\n        this.maintainDelay = params?.maintainDelay ?? false;\n        this.interval = params?.interval ?? 0;\n        if (params?.keepResultUntilDownstreamConnected) this._keepResultUntilDownstreamConnected = params.keepResultUntilDownstreamConnected;\n        if (params?.remainingReactiveSource) this._remainingReactiveSource = params?.remainingReactiveSource;\n        if (params?.totalRemainingReactiveSource) this._totalRemainingReactiveSource = params?.totalRemainingReactiveSource;\n        if (params?.processingEntitiesReactiveSource) this._processingEntitiesReactiveSource = params?.processingEntitiesReactiveSource;\n        if (params?.suspended !== undefined) this._isSuspended = params?.suspended;\n        if (enqueueProcessor) this.replaceEnqueueProcessor(enqueueProcessor);\n        if (params?.pipeTo !== undefined) {\n            this.pipeTo(params.pipeTo);\n        }\n        this._intervalPaceMaker = new PaceMaker(this.interval);\n        if (items) this.enqueueAll(items);\n        allRunningProcessors.add(this);\n        this._initClerks();\n        this._initEventHub();\n        this.resume();\n    }\n\n    /**\n     * replace enqueue logic.\n     * @param processor enqueue logic. this should return new queue.\n     * @returns \n     */\n    replaceEnqueueProcessor(processor: (queue: T[], newItem: T) => T[]): this {\n        this._enqueueProcessor = processor;\n        return this;\n    }\n\n    /**\n     * Modify the queue by force. \n     * @param processor \n     * @remarks I know that you have known this is very dangerous.\n     */\n    modifyQueue(processor: (queue: T[]) => T[]): void {\n        this._queue = processor(this._queue);\n        this._onTick();\n    }\n\n    /**\n     * Clear the queue\n     * @remarks I know that you have known this is very dangerous.\n     */\n    clearQueue(): void {\n        this._queue = [];\n        this._onTick();\n    }\n\n    /**\n     * Set the handler for when the queue has been modified\n     * @param proc \n     * @returns \n     */\n    onUpdateProgress(proc: () => void): this {\n        this._runOnUpdateBatch = proc;\n        return this;\n    }\n\n    /**\n     * Join another processor\n     * @param pipeTo \n     * @returns \n     */\n    pipeTo<V>(pipeTo: QueueProcessor<U, V>): QueueProcessor<U, V> {\n        this._pipeTo = pipeTo;\n        this._pipeTo._root = this.root;\n        // If something buffered, send to the downstream.\n        if (this._keptResult.length > 0) {\n            const temp = [...this._keptResult];\n            this._keptResult = [];\n            this._pipeTo.enqueueAll(temp);\n        }\n        return pipeTo;\n    }\n\n    isIdle(): boolean {\n        return this._isIdle() && (!this._pipeTo ? true : this._pipeTo.isIdle());\n    }\n    _isIdle(): boolean {\n        return this.totalRemaining == 0;\n    }\n    async _waitForIdle(): Promise<void> {\n        if (this._isSuspended) return Promise.resolve();\n        if (this._isIdle()) return Promise.resolve();\n        do {\n            const r = await this._waitFor([\"tickEmpty\", \"tick\", \"tickSuspended\", \"suspended\", \"idle\"]);\n            if (r === \"tickSuspended\") break;\n            if (r == \"suspended\") break;\n            if (r == \"tickEmpty\") break;\n            if (r == \"idle\") break;\n        } while (!this._isIdle());\n        return Promise.resolve();\n    }\n\n    idleDetectors(): Promise<void>[] {\n        const thisPromise = this._waitForIdle();\n        if (this._pipeTo) {\n            return [thisPromise, ...this._pipeTo.idleDetectors()];\n        }\n        return [thisPromise];\n    }\n\n    get isSuspended(): boolean {\n        return this._isSuspended || this._pipeTo?.isSuspended || false;\n    }\n\n    _updateReactiveSource(): void {\n        this.root.updateReactiveSource();\n    }\n    updateReactiveSource(): void {\n        if (this._pipeTo) {\n            this._pipeTo.updateReactiveSource();\n        }\n        if (this._remainingReactiveSource) this._remainingReactiveSource.value = this.remaining;\n        if (this._totalRemainingReactiveSource) this._totalRemainingReactiveSource.value = this.totalRemaining;\n        if (this._processingEntitiesReactiveSource) this._processingEntitiesReactiveSource.value = this.nowProcessing;\n\n    }\n    _updateBatchProcessStatus(): void {\n        this._updateReactiveSource();\n        this._runOnUpdateBatch();\n    }\n\n    _collectBatch(): T[] {\n        return this._queue.splice(0, this.batchSize);\n    }\n    _canCollectBatch(): boolean {\n        return this._queue.length !== 0;\n    }\n\n\n    enqueue(entity: T): this {\n        this._queue = this._enqueueProcessor(this._queue, entity);\n        this._updateBatchProcessStatus();\n        this._onTick();\n        return this;\n    }\n    enqueueAll(entities: T[]): this {\n        let queue = this._queue;\n        for (const v of entities) {\n            queue = this._enqueueProcessor(queue, v);\n        }\n        this._queue = queue;\n        this._updateBatchProcessStatus();\n        this._onTick();\n        return this;\n    }\n\n    requestNextFlush(): void {\n        // if (this._canCollectBatch()) {\n        this._nextProcessNeedsImmediate = true;\n        this._onTick();\n        // }\n    }\n\n    async _waitForSuspended() {\n\n    }\n\n    flush(): Promise<boolean> {\n        if (this._isSuspended) return Promise.resolve(false);\n        this.requestNextFlush();\n        return this.waitForAllDownstream();\n    }\n\n    async waitForAllDownstream(timeout?: number): Promise<boolean> {\n        // Prepare timeout detector\n        const baseTasks = [] as Promise<unknown>[];\n        if (timeout) {\n            baseTasks.push(delay(timeout, RESULT_TIMED_OUT));\n        }\n        do {\n            const idleTasks = this.idleDetectors();\n            const tasks = [...baseTasks, Promise.all(idleTasks)];\n            const ret = await Promise.race(tasks);\n            if (ret === RESULT_TIMED_OUT) return false;\n        } while (!this.isIdle());\n        return true;\n    }\n\n    waitForAllProcessed(timeout?: number): Promise<boolean> {\n        this.root.startPipeline();\n        return this.root.waitForAllDownstream(timeout);\n    }\n    async waitForAllDoneAndTerminate(timeout?: number): Promise<boolean> {\n        this.root.startPipeline();\n        const r = await this.root.waitForAllDownstream(timeout);\n        this.terminateAll();\n        return r;\n    }\n\n    async _runProcessor(items: T[]): Promise<void> {\n        // runProcessor does not modify queue. so updateStatus should only update about reactiveSource.\n        const ret = await this._processor(items);\n        if (!ret) return;\n        // If downstream is connected, the result sent to that.\n        if (this._pipeTo) {\n            this._pipeTo.enqueueAll(ret);\n        } else if (this._keepResultUntilDownstreamConnected) {\n            // Buffer the result if downstream is not connected.\n            this._keptResult.push(...ret);\n        }\n    }\n    async * pump(): AsyncGenerator<T[], void, unknown> {\n        do {\n            const ticked = await this._waitFor(\n                [\"tickImmediate\", \"yielded\", \"tickSuspended\", \"tickDelayTimeout\", \"tickSuspended\"]\n            );\n            // console.log(`Ticked:${String(ticked)}`);\n            L2:\n            do {\n                const items = this._collectBatch();\n                // console.warn(`Pumping ${items.length} items`);\n                if (items.length == 0) break L2;\n                yield items;\n            } while (this._canCollectBatch());\n            if (ticked == \"tickSuspended\") break;\n        } while (!this._isSuspended);\n    }\n    _processingBatches: Set<number> = new Set<number>();\n    addProcessingBatch: (typeof this._processingBatches.add) = (value) => {\n        const r = this._processingBatches.add(value);\n        this._updateBatchProcessStatus();\n        return r;\n    };\n    deleteProcessingBatch: (typeof this._processingBatches.delete) = (value) => {\n        const r = this._processingBatches.delete(value);\n        this._updateBatchProcessStatus();\n        return r;\n    };\n    _processing: boolean = false;\n\n    _collected!: Inbox<T[]>;\n    _clerks!: ClerkGroup<T[], Clerk<T[]>>;\n    _processCount = 0;\n    _initClerks() {\n        this._collected = new Inbox(this.concurrentLimit * 2);\n        this._clerks = new ClerkGroup(\n            {\n                assigned: this._collected,\n                job: async (items) => {\n                    const batchLength = items.length;\n                    this.updateStatus(() => {\n                        this.processingEntities += batchLength;\n                        this.waitingEntries -= batchLength;\n                    });\n                    // console.warn(`Clerk start! (${items.length} items )`);\n                    await this._intervalPaceMaker.paced;\n                    this._processCount++;\n                    try {\n                        // console.warn(items);\n                        await this._runProcessor(items);\n                        // console.warn(\"OK\");\n                    } catch (ex) {\n                        // console.warn(\"ERR\");\n                        Logger(`Processor error!`);\n                        Logger(ex, LOG_LEVEL_VERBOSE);\n                    }\n                    // console.warn(`Clerk finished!`);\n                    this.updateStatus(() => {\n                        this.processingEntities -= batchLength;\n                    });\n                    this._processCount--;\n                    if (this._processCount == 0) {\n                        this._notifyIfIdle();\n                    }\n                },\n                initialMemberCount: this.concurrentLimit,\n                instantiate: (params) => new Clerk(params)\n            }\n        );\n    }\n    async _process(): Promise<void> {\n        if (this._processing || this._isSuspended) return;\n        // let lastProcessBegin = 0;\n        try {\n            this._processing = true;\n            do {\n                const batchPump = this.pump();\n                for await (const batch of batchPump) {\n                    if (!batch || batch.length === 0) {\n                        this._hub.emitEvent(\"tickEmpty\");\n                        continue;\n                    }\n                    // this.waitingEntries\n                    const batchLength = batch.length;\n                    this.updateStatus(() => {\n                        this.waitingEntries += batchLength;\n                    });\n                    await this._collected.post(batch);\n                }\n            } while (!this._isSuspended);\n            this._hub.emitEvent(\"suspended\");\n            // Pump only ended at isSuspended.\n        } finally {\n            this._processing = false;\n        }\n    }\n\n    _run(): void {\n        if (this._isSuspended) return;\n        if (this._processing) return;\n        fireAndForget(() => this._process());\n    }\n    terminateAll(): void {\n        this.root.terminate();\n    }\n    terminate(): void {\n        if (this._pipeTo) {\n            this._pipeTo.terminate();\n            this._pipeTo = undefined;\n        }\n        this._isSuspended = true;\n        this._enqueueProcessor = () => [];\n        this._processor = () => Promise.resolve([]);\n        this.clearQueue();\n        this._hub.emitEvent(\"tickSuspended\");\n        this._hub.emitEvent(\"tickSuspended\");\n        this._hub.emitEvent(\"tickSuspended\");\n        this._collected.dispose();\n        this._clerks.dispose();\n        this._queue.length = 0;\n        allRunningProcessors.delete(this);\n    }\n}\n\nexport function stopAllRunningProcessors(): void {\n    const processors = [...allRunningProcessors];\n    for (const processor of processors) {\n        processor.terminate();\n    }\n}"],"names":[],"mappings":"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"}