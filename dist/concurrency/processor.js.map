{"version":3,"file":"processor.js","sources":["../../src/concurrency/processor.ts"],"sourcesContent":["import { Logger, LOG_LEVEL_VERBOSE } from \"../common/logger\";\r\nimport type { ReactiveSource } from \"../dataobject/reactive\";\r\nimport { RESULT_TIMED_OUT } from \"../common/const\";\r\nimport { noop, delay, fireAndForget, promiseWithResolver, PromiseWithResolvers, yieldNextMicrotask } from \"../promises\";\r\nexport class Notifier {\r\n\r\n    _p: PromiseWithResolvers<void> = promiseWithResolver<void>();\r\n    isUsed = false;\r\n    notify() {\r\n        if (!this.isUsed) {\r\n            return;\r\n        }\r\n        this.isUsed = false;\r\n        this._p.promise.finally(noop)\r\n        this._p.resolve()\r\n        this._p = promiseWithResolver();\r\n    }\r\n    get nextNotify(): Promise<void> {\r\n        this.isUsed = true;\r\n        return this._p.promise;\r\n    }\r\n}\r\nlet processNo = 0;\r\n\r\nconst allRunningProcessors = new Set<QueueProcessor<any, any>>([]);\r\n\r\n/**\r\n * QueueProcessor Parameters\r\n */\r\ntype ProcessorParams<T> = {\r\n    /**\r\n     * How many processes runs concurrently\r\n     */\r\n    concurrentLimit?: number;\r\n    /**\r\n     * Number of entities passed to the processor at once\r\n     */\r\n    batchSize?: number;\r\n    /**\r\n     * Numbers of queued entities to ignore delay and run immediately\r\n     */\r\n    yieldThreshold?: number;\r\n    /**\r\n     * Time(ms) to ignore yieldThreshold and run process\r\n     */\r\n    delay?: number;\r\n    interval?: number;\r\n    maintainDelay?: boolean;\r\n    suspended: boolean;\r\n    /**\r\n     * ReactiveSource to notify the remaining count.\r\n     */\r\n    remainingReactiveSource?: ReactiveSource<number>;\r\n    /**\r\n     * ReactiveSource to notify the total remaining count.\r\n     */\r\n    totalRemainingReactiveSource?: ReactiveSource<number>;\r\n    /**\r\n     * ReactiveSource to notify how many items are processing;\r\n     */\r\n    processingEntitiesReactiveSource?: ReactiveSource<number>;\r\n    /**\r\n     * If true, processed result will be buffered until a downstream has been connected.\r\n     */\r\n    keepResultUntilDownstreamConnected?: boolean;\r\n    pipeTo?: QueueProcessor<T, any>;\r\n};\r\n\r\ntype ProcessorResult<T> = Promise<T[]> | T[] | undefined | void | Promise<void> | Promise<undefined>;\r\ntype Processor<T, U> = (entity: T[]) => ProcessorResult<U>\r\nexport class QueueProcessor<T, U> {\r\n    _queue: T[] = [];\r\n    _processor: Processor<T, U>;\r\n    _enqueueProcessor: (queue: T[], newEntity: T) => T[] = (queue, entity) => (queue.push(entity), queue);\r\n    _isSuspended = true;\r\n    _nextProcessNeedsImmediate = false;\r\n\r\n    _pipeTo?: QueueProcessor<U, any>;\r\n\r\n    _waitId: string = \"\";\r\n    _root?: QueueProcessor<any, any> = undefined;\r\n    _instance = processNo++;\r\n    _remainingReactiveSource?: ReactiveSource<number>;\r\n    _totalRemainingReactiveSource?: ReactiveSource<number>;\r\n    _processingEntitiesReactiveSource?: ReactiveSource<number>;\r\n    _keepResultUntilDownstreamConnected = false;\r\n    _keptResult = [] as U[];\r\n\r\n    _runOnUpdateBatch: () => void = () => { };\r\n\r\n    // Parameters\r\n\r\n    // How many processes running concurrently\r\n    concurrentLimit: number = 1;\r\n\r\n    // How many entries processed at once\r\n    batchSize: number = 1;\r\n\r\n    // How many entries kept in before the delay\r\n    yieldThreshold: number = 1;\r\n\r\n    // If set, wait for set milliseconds after enqueued\r\n    // Note: If reached to the batchSize, run immediately\r\n    delay: number = 0;\r\n    maintainDelay: boolean;\r\n    interval: number = 0;\r\n\r\n    // This means numbers of the entities which are now processing\r\n    processingEntities: number = 0;\r\n\r\n    // This means numbers of the entries which dequeued from the queue but not processed yet.\r\n    waitingEntries: number = 0;\r\n\r\n    get nowProcessing(): number {\r\n        return this.processingEntities\r\n    }\r\n    get totalNowProcessing(): number {\r\n        return this.nowProcessing + (this._pipeTo?.totalNowProcessing || 0);\r\n    }\r\n\r\n    get remaining(): number {\r\n        return this._queue.length + this.processingEntities + this.waitingEntries;\r\n    }\r\n    get totalRemaining(): number {\r\n        return this.remaining + (this._pipeTo?.totalRemaining || 0);\r\n    }\r\n    updateStatus(setFunc: () => void): void {\r\n        setFunc();\r\n        this._updateReactiveSource();\r\n    }\r\n\r\n    suspend(): QueueProcessor<T, U> {\r\n        this._isSuspended = true;\r\n        this._notifier.notify();\r\n        return this;\r\n    }\r\n\r\n    resume(): this {\r\n        this._isSuspended = false;\r\n        this._notifier.notify();\r\n        this.requestNextFlush();\r\n        this._run();\r\n        return this;\r\n    }\r\n    resumePipeLine(): this {\r\n        this._pipeTo?.resumePipeLine();\r\n        this.resume();\r\n        return this;\r\n    }\r\n    startPipeline(): this {\r\n        this.root.resumePipeLine();\r\n        return this;\r\n    }\r\n    get root(): QueueProcessor<any, any> {\r\n        if (this._root === undefined) {\r\n            return this;\r\n        }\r\n        return this._root;\r\n    }\r\n\r\n    _notifier: Notifier = new Notifier();\r\n\r\n    constructor(processor: Processor<T, U>, params?: ProcessorParams<U>, items?: T[], enqueueProcessor?: (queue: T[], newEntity: T) => T[]) {\r\n        this._root = this;\r\n        this._processor = processor;\r\n        this.batchSize = params?.batchSize ?? 1;\r\n        this.yieldThreshold = params?.yieldThreshold ?? params?.batchSize ?? 0;\r\n        this.concurrentLimit = params?.concurrentLimit ?? 1;\r\n        this.delay = params?.delay ?? 0;\r\n        this.maintainDelay = params?.maintainDelay ?? false;\r\n        this.interval = params?.interval ?? 0;\r\n        if (params?.keepResultUntilDownstreamConnected) this._keepResultUntilDownstreamConnected = params.keepResultUntilDownstreamConnected;\r\n        if (params?.remainingReactiveSource) this._remainingReactiveSource = params?.remainingReactiveSource;\r\n        if (params?.totalRemainingReactiveSource) this._totalRemainingReactiveSource = params?.totalRemainingReactiveSource;\r\n        if (params?.processingEntitiesReactiveSource) this._processingEntitiesReactiveSource = params?.processingEntitiesReactiveSource;\r\n        if (params?.suspended !== undefined) this._isSuspended = params?.suspended;\r\n        if (enqueueProcessor) this.replaceEnqueueProcessor(enqueueProcessor);\r\n        if (params?.pipeTo !== undefined) {\r\n            this.pipeTo(params.pipeTo);\r\n        }\r\n        if (items) this.enqueueAll(items);\r\n        allRunningProcessors.add(this);\r\n        this._run();\r\n    }\r\n\r\n    /**\r\n     * replace enqueue logic.\r\n     * @param processor enqueue logic. this should return new queue.\r\n     * @returns \r\n     */\r\n    replaceEnqueueProcessor(processor: (queue: T[], newItem: T) => T[]): this {\r\n        this._enqueueProcessor = processor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modify the queue by force. \r\n     * @param processor \r\n     * @remarks I know that you have known this is very dangerous.\r\n     */\r\n    modifyQueue(processor: (queue: T[]) => T[]): void {\r\n        this._queue = processor(this._queue);\r\n        this._notifier.notify();\r\n    }\r\n\r\n    /**\r\n     * Clear the queue\r\n     * @remarks I know that you have known this is very dangerous.\r\n     */\r\n    clearQueue(): void {\r\n        this._queue = [];\r\n        this._notifier.notify();\r\n    }\r\n\r\n    /**\r\n     * Set the handler for when the queue has been modified\r\n     * @param proc \r\n     * @returns \r\n     */\r\n    onUpdateProgress(proc: () => void): this {\r\n        this._runOnUpdateBatch = proc;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Join another processor\r\n     * @param pipeTo \r\n     * @returns \r\n     */\r\n    pipeTo<V>(pipeTo: QueueProcessor<U, V>): QueueProcessor<U, V> {\r\n        this._pipeTo = pipeTo;\r\n        this._pipeTo._root = this.root;\r\n        // If something buffered, send to the downstream.\r\n        if (this._keptResult.length > 0) {\r\n            const temp = [...this._keptResult];\r\n            this._keptResult = [];\r\n            this._pipeTo.enqueueAll(temp);\r\n        }\r\n        return pipeTo;\r\n    }\r\n\r\n    isIdle(): boolean {\r\n        return this._isIdle() && (!this._pipeTo ? true : this._pipeTo.isIdle());\r\n    }\r\n    _isIdle(): boolean {\r\n        return this.totalRemaining == 0;\r\n    }\r\n    async _idleDetector(): Promise<void> {\r\n        if (this._isSuspended) return Promise.resolve();\r\n        if (this._isIdle()) return Promise.resolve();\r\n        do {\r\n            await Promise.race([delay(3000), this._notifier.nextNotify]);\r\n        } while (!this._isIdle());\r\n        return Promise.resolve();\r\n    }\r\n\r\n    idleDetectors(): Promise<void>[] {\r\n        const thisPromise = this._idleDetector();\r\n        if (this._pipeTo) {\r\n            return [thisPromise, ...this._pipeTo.idleDetectors()];\r\n        }\r\n        return [thisPromise];\r\n    }\r\n\r\n    get isSuspended(): boolean {\r\n        return this._isSuspended || this._pipeTo?.isSuspended || false;\r\n    }\r\n\r\n\r\n    _updateReactiveSource(): void {\r\n        this.root.updateReactiveSource();\r\n    }\r\n    updateReactiveSource(): void {\r\n        if (this._pipeTo) {\r\n            this._pipeTo.updateReactiveSource();\r\n        }\r\n        if (this._remainingReactiveSource) this._remainingReactiveSource.value = this.remaining;\r\n        if (this._totalRemainingReactiveSource) this._totalRemainingReactiveSource.value = this.totalRemaining;\r\n        if (this._processingEntitiesReactiveSource) this._processingEntitiesReactiveSource.value = this.nowProcessing;\r\n\r\n    }\r\n    _updateBatchProcessStatus(): void {\r\n        this._updateReactiveSource();\r\n        this._runOnUpdateBatch();\r\n    }\r\n\r\n    _collectBatch(): T[] {\r\n        return this._queue.splice(0, this.batchSize);\r\n    }\r\n    _canCollectBatch(): boolean {\r\n        return this._queue.length !== 0;\r\n    }\r\n\r\n\r\n    enqueue(entity: T): this {\r\n        this._queue = this._enqueueProcessor(this._queue, entity);\r\n        this._updateBatchProcessStatus()\r\n        this._notifier.notify();\r\n        return this;\r\n    }\r\n    enqueueAll(entities: T[]): this {\r\n        let queue = this._queue;\r\n        for (const v of entities) {\r\n            queue = this._enqueueProcessor(queue, v);\r\n        }\r\n        this._queue = queue;\r\n        this._updateBatchProcessStatus()\r\n        this._notifier.notify();\r\n        return this;\r\n    }\r\n\r\n    requestNextFlush(): void {\r\n        if (this._canCollectBatch()) {\r\n            this._nextProcessNeedsImmediate = true;\r\n            this._notifier.notify();\r\n        }\r\n    }\r\n\r\n    flush(): Promise<boolean> | undefined {\r\n        if (this._isSuspended) return;\r\n        this.requestNextFlush();\r\n        return this.waitForAllDownstream();\r\n    }\r\n\r\n    async waitForAllDownstream(timeout?: number): Promise<boolean> {\r\n        // Prepare timeout detector\r\n        const baseTasks = [] as Promise<unknown>[];\r\n        if (timeout) {\r\n            baseTasks.push(delay(timeout, RESULT_TIMED_OUT))\r\n        }\r\n        do {\r\n            const idleTasks = this.idleDetectors();\r\n            const tasks = [...baseTasks, Promise.all(idleTasks)];\r\n            const ret = await Promise.race(tasks);\r\n            if (ret === RESULT_TIMED_OUT) return false;\r\n        } while (!this.isIdle());\r\n        return true;\r\n    }\r\n\r\n    waitForAllProcessed(timeout?: number): Promise<boolean> {\r\n        this.root.startPipeline();\r\n        return this.root.waitForAllDownstream(timeout);\r\n    }\r\n    async waitForAllDoneAndTerminate(timeout?: number): Promise<boolean> {\r\n        this.root.startPipeline();\r\n        const r = await this.root.waitForAllDownstream(timeout);\r\n        this.terminateAll();\r\n        return r;\r\n    }\r\n    async _runProcessor(items: T[]): Promise<void> {\r\n        // runProcessor does not modify queue. so updateStatus should only update about reactiveSource.\r\n        const ret = await this._processor(items);\r\n        if (!ret) return;\r\n        // If downstream is connected, the result sent to that.\r\n        if (this._pipeTo) {\r\n            this._pipeTo.enqueueAll(ret);\r\n        } else if (this._keepResultUntilDownstreamConnected) {\r\n            // Buffer the result if downstream is not connected.\r\n            this._keptResult.push(...ret);\r\n        }\r\n    }\r\n    async * pump(): AsyncGenerator<T[], void, unknown> {\r\n        let items: T[];\r\n        let queueRunOut = true;\r\n        do {\r\n            await yieldNextMicrotask();\r\n            if (!this._canCollectBatch()) {\r\n                // If we cannot collect any items from the queue, sleep until a next notify\r\n                queueRunOut = true;\r\n                await Promise.race([this._notifier.nextNotify, delay(3000)]);\r\n                continue;\r\n            }\r\n            // Here, we have some items in the queue.\r\n            if (queueRunOut) {\r\n                // If the pump has been slept, wait for the chance to accumulate some more in the queue.\r\n                await this.delayUntilRequested(this.delay);\r\n            }\r\n            items = this._collectBatch();\r\n            // If the queue has been modified (by modifyQueue or something).\r\n            // We have to try from the begin again.\r\n            if (items.length == 0) {\r\n                continue;\r\n            }\r\n            yield items;\r\n            // For subsequent processes, check run out status\r\n            if (this._canCollectBatch()) {\r\n                queueRunOut = false;\r\n            }\r\n        } while (this._canCollectBatch() && !this._isSuspended)\r\n    }\r\n    _processingBatches: Set<number> = new Set<number>();\r\n    addProcessingBatch: (typeof this._processingBatches.add) = (value) => {\r\n        const r = this._processingBatches.add(value);\r\n        this._updateBatchProcessStatus();\r\n        return r;\r\n    }\r\n    deleteProcessingBatch: (typeof this._processingBatches.delete) = (value) => {\r\n        const r = this._processingBatches.delete(value);\r\n        this._updateBatchProcessStatus();\r\n        return r;\r\n    }\r\n    _processing: boolean = false;\r\n\r\n    async delayUntilRequested(delayMs: number): Promise<void> {\r\n        if (this._nextProcessNeedsImmediate) {\r\n            this._nextProcessNeedsImmediate = false;\r\n            return;\r\n        }\r\n        const delayTimer = delay(delayMs, RESULT_TIMED_OUT);\r\n        let ret;\r\n        do {\r\n            ret = await Promise.race([this._notifier.nextNotify, delayTimer]);\r\n        } while (\r\n            ret !== RESULT_TIMED_OUT &&\r\n            this._nextProcessNeedsImmediate === false &&\r\n            this.yieldThreshold >= this._queue.length\r\n        )\r\n        this._nextProcessNeedsImmediate = false;\r\n        return;\r\n    }\r\n\r\n    async _process(): Promise<void> {\r\n        if (this._processing && this._isSuspended) return;\r\n        let lastProcessBegin = 0;\r\n        try {\r\n            this._processing = true;\r\n            do {\r\n                const batchPump = this.pump()\r\n                for await (const batch of batchPump) {\r\n                    const batchLength = batch.length;\r\n                    this.updateStatus(() => {\r\n                        this.waitingEntries += batchLength;\r\n                    })\r\n                    while (this._processingBatches.size >= this.concurrentLimit) {\r\n                        await this._notifier.nextNotify;\r\n                    }\r\n                    // Add batch to the processing\r\n                    const key = Date.now() + Math.random();\r\n                    const batchTask = async () => {\r\n                        this.updateStatus(() => {\r\n                            // To avoid false positive of idle, add processingEntities before reducing waitingEntries\r\n                            this.processingEntities += batchLength;\r\n                            this.waitingEntries -= batchLength;\r\n                        });\r\n                        this.addProcessingBatch(key);\r\n                        try {\r\n                            if (this.interval && lastProcessBegin) {\r\n                                const diff = Date.now() - lastProcessBegin;\r\n                                if (diff < this.interval) {\r\n                                    const delayMs = this.interval - diff;\r\n                                    await delay(delayMs);\r\n                                }\r\n                            }\r\n                            lastProcessBegin = Date.now();\r\n                            await this._runProcessor(batch);\r\n                        } catch (ex) {\r\n                            Logger(`Processor error!`);\r\n                            Logger(ex, LOG_LEVEL_VERBOSE);\r\n                        } finally {\r\n                            this.deleteProcessingBatch(key);\r\n                            this.updateStatus(() => {\r\n                                this.processingEntities -= batchLength;\r\n                            });\r\n                            this._notifier.notify();\r\n                        }\r\n                    }\r\n\r\n                    this._notifier.notify();\r\n                    fireAndForget(async () => {\r\n                        await yieldNextMicrotask();\r\n                        await batchTask()\r\n                    });\r\n                }\r\n                await this._notifier.nextNotify;\r\n            } while (!this._isSuspended)\r\n        } finally {\r\n            this._processing = false;\r\n        }\r\n    }\r\n\r\n    _run(): void {\r\n        if (this._isSuspended) return;\r\n        if (this._processing) return;\r\n        fireAndForget(() => this._process());\r\n    }\r\n    terminateAll(): void {\r\n        this.root.terminate();\r\n    }\r\n    terminate(): void {\r\n        if (this._pipeTo) {\r\n            this._pipeTo.terminate();\r\n            this._pipeTo = undefined;\r\n        }\r\n        this._isSuspended = true;\r\n        this._enqueueProcessor = () => [];\r\n        this._processor = () => Promise.resolve([]);\r\n        this.clearQueue();\r\n        this._notifier.notify();\r\n        this._notifier.notify();\r\n        this._notifier.notify();\r\n        this._queue.length = 0;\r\n        allRunningProcessors.delete(this);\r\n    }\r\n}\r\n\r\nexport function stopAllRunningProcessors(): void {\r\n    const processors = [...allRunningProcessors];\r\n    for (const processor of processors) {\r\n        processor.terminate();\r\n    }\r\n}"],"names":[],"mappings":";;;;MAIa,QAAQ,CAAA;AAArB,IAAA,WAAA,GAAA;AAEI,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,IAAA,EAAA;;;;AAAiC,YAAA,KAAA,EAAA,mBAAmB,EAAQ;AAAC,SAAA,CAAA,CAAA;AAC7D,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,QAAA,EAAA;;;;mBAAS,KAAK;AAAC,SAAA,CAAA,CAAA;KAclB;IAbG,MAAM,GAAA;AACF,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,OAAO;SACV;AACD,QAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;AAC7B,QAAA,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAA;AACjB,QAAA,IAAI,CAAC,EAAE,GAAG,mBAAmB,EAAE,CAAC;KACnC;AACD,IAAA,IAAI,UAAU,GAAA;AACV,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACnB,QAAA,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC;KAC1B;AACJ,CAAA;AACD,IAAI,SAAS,GAAG,CAAC,CAAC;AAElB,MAAM,oBAAoB,GAAG,IAAI,GAAG,CAA2B,EAAE,CAAC,CAAC;MA8CtD,cAAc,CAAA;AA2CvB,IAAA,IAAI,aAAa,GAAA;QACb,OAAO,IAAI,CAAC,kBAAkB,CAAA;KACjC;AACD,IAAA,IAAI,kBAAkB,GAAA;AAClB,QAAA,OAAO,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,EAAE,kBAAkB,IAAI,CAAC,CAAC,CAAC;KACvE;AAED,IAAA,IAAI,SAAS,GAAA;AACT,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC;KAC7E;AACD,IAAA,IAAI,cAAc,GAAA;AACd,QAAA,OAAO,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,EAAE,cAAc,IAAI,CAAC,CAAC,CAAC;KAC/D;AACD,IAAA,YAAY,CAAC,OAAmB,EAAA;AAC5B,QAAA,OAAO,EAAE,CAAC;QACV,IAAI,CAAC,qBAAqB,EAAE,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACzB,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;AACxB,QAAA,OAAO,IAAI,CAAC;KACf;IAED,MAAM,GAAA;AACF,QAAA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAC1B,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;QACxB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,OAAO,IAAI,CAAC;KACf;IACD,cAAc,GAAA;AACV,QAAA,IAAI,CAAC,OAAO,EAAE,cAAc,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,EAAE,CAAC;AACd,QAAA,OAAO,IAAI,CAAC;KACf;IACD,aAAa,GAAA;AACT,QAAA,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;AAC3B,QAAA,OAAO,IAAI,CAAC;KACf;AACD,IAAA,IAAI,IAAI,GAAA;AACJ,QAAA,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;AAC1B,YAAA,OAAO,IAAI,CAAC;SACf;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;AAID,IAAA,WAAA,CAAY,SAA0B,EAAE,MAA2B,EAAE,KAAW,EAAE,gBAAoD,EAAA;AA3FtI,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,QAAA,EAAA;;;;mBAAc,EAAE;AAAC,SAAA,CAAA,CAAA;AACjB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,YAAA,EAAA;;;;;AAA4B,SAAA,CAAA,CAAA;AAC5B,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,mBAAA,EAAA;;;;AAAuD,YAAA,KAAA,EAAA,CAAC,KAAK,EAAE,MAAM,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC;AAAC,SAAA,CAAA,CAAA;AACtG,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,cAAA,EAAA;;;;mBAAe,IAAI;AAAC,SAAA,CAAA,CAAA;AACpB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,4BAAA,EAAA;;;;mBAA6B,KAAK;AAAC,SAAA,CAAA,CAAA;AAEnC,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,SAAA,EAAA;;;;;AAAiC,SAAA,CAAA,CAAA;AAEjC,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,SAAA,EAAA;;;;mBAAkB,EAAE;AAAC,SAAA,CAAA,CAAA;AACrB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,OAAA,EAAA;;;;mBAAmC,SAAS;AAAC,SAAA,CAAA,CAAA;AAC7C,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EAAA;;;;AAAY,YAAA,KAAA,EAAA,SAAS,EAAE;AAAC,SAAA,CAAA,CAAA;AACxB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,0BAAA,EAAA;;;;;AAAkD,SAAA,CAAA,CAAA;AAClD,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,+BAAA,EAAA;;;;;AAAuD,SAAA,CAAA,CAAA;AACvD,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,mCAAA,EAAA;;;;;AAA2D,SAAA,CAAA,CAAA;AAC3D,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,qCAAA,EAAA;;;;mBAAsC,KAAK;AAAC,SAAA,CAAA,CAAA;AAC5C,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,aAAA,EAAA;;;;mBAAc,EAAS;AAAC,SAAA,CAAA,CAAA;AAExB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,mBAAA,EAAA;;;;mBAAgC,SAAS;AAAC,SAAA,CAAA,CAAA;;;AAK1C,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,iBAAA,EAAA;;;;mBAA0B,CAAC;AAAC,SAAA,CAAA,CAAA;;AAG5B,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EAAA;;;;mBAAoB,CAAC;AAAC,SAAA,CAAA,CAAA;;AAGtB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,gBAAA,EAAA;;;;mBAAyB,CAAC;AAAC,SAAA,CAAA,CAAA;;;AAI3B,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,OAAA,EAAA;;;;mBAAgB,CAAC;AAAC,SAAA,CAAA,CAAA;AAClB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,eAAA,EAAA;;;;;AAAuB,SAAA,CAAA,CAAA;AACvB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,UAAA,EAAA;;;;mBAAmB,CAAC;AAAC,SAAA,CAAA,CAAA;;AAGrB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,oBAAA,EAAA;;;;mBAA6B,CAAC;AAAC,SAAA,CAAA,CAAA;;AAG/B,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,gBAAA,EAAA;;;;mBAAyB,CAAC;AAAC,SAAA,CAAA,CAAA;AAiD3B,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EAAA;;;;AAAsB,YAAA,KAAA,EAAA,IAAI,QAAQ,EAAE;AAAC,SAAA,CAAA,CAAA;AAsOrC,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,oBAAA,EAAA;;;;AAAkC,YAAA,KAAA,EAAA,IAAI,GAAG,EAAU;AAAC,SAAA,CAAA,CAAA;AACpD,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,oBAAA,EAAA;;;;mBAA2D,CAAC,KAAK,KAAI;gBACjE,MAAM,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC7C,IAAI,CAAC,yBAAyB,EAAE,CAAC;AACjC,gBAAA,OAAO,CAAC,CAAC;aACZ;AAAA,SAAA,CAAA,CAAA;AACD,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,uBAAA,EAAA;;;;mBAAiE,CAAC,KAAK,KAAI;gBACvE,MAAM,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChD,IAAI,CAAC,yBAAyB,EAAE,CAAC;AACjC,gBAAA,OAAO,CAAC,CAAC;aACZ;AAAA,SAAA,CAAA,CAAA;AACD,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,aAAA,EAAA;;;;mBAAuB,KAAK;AAAC,SAAA,CAAA,CAAA;AA9OzB,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AAClB,QAAA,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,MAAM,EAAE,SAAS,IAAI,CAAC,CAAC;AACxC,QAAA,IAAI,CAAC,cAAc,GAAG,MAAM,EAAE,cAAc,IAAI,MAAM,EAAE,SAAS,IAAI,CAAC,CAAC;QACvE,IAAI,CAAC,eAAe,GAAG,MAAM,EAAE,eAAe,IAAI,CAAC,CAAC;QACpD,IAAI,CAAC,KAAK,GAAG,MAAM,EAAE,KAAK,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,MAAM,EAAE,aAAa,IAAI,KAAK,CAAC;QACpD,IAAI,CAAC,QAAQ,GAAG,MAAM,EAAE,QAAQ,IAAI,CAAC,CAAC;QACtC,IAAI,MAAM,EAAE,kCAAkC;AAAE,YAAA,IAAI,CAAC,mCAAmC,GAAG,MAAM,CAAC,kCAAkC,CAAC;QACrI,IAAI,MAAM,EAAE,uBAAuB;AAAE,YAAA,IAAI,CAAC,wBAAwB,GAAG,MAAM,EAAE,uBAAuB,CAAC;QACrG,IAAI,MAAM,EAAE,4BAA4B;AAAE,YAAA,IAAI,CAAC,6BAA6B,GAAG,MAAM,EAAE,4BAA4B,CAAC;QACpH,IAAI,MAAM,EAAE,gCAAgC;AAAE,YAAA,IAAI,CAAC,iCAAiC,GAAG,MAAM,EAAE,gCAAgC,CAAC;AAChI,QAAA,IAAI,MAAM,EAAE,SAAS,KAAK,SAAS;AAAE,YAAA,IAAI,CAAC,YAAY,GAAG,MAAM,EAAE,SAAS,CAAC;AAC3E,QAAA,IAAI,gBAAgB;AAAE,YAAA,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,CAAC;AACrE,QAAA,IAAI,MAAM,EAAE,MAAM,KAAK,SAAS,EAAE;AAC9B,YAAA,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC9B;AACD,QAAA,IAAI,KAAK;AAAE,YAAA,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAClC,QAAA,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,EAAE,CAAC;KACf;AAED;;;;AAIG;AACH,IAAA,uBAAuB,CAAC,SAA0C,EAAA;AAC9D,QAAA,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;AACnC,QAAA,OAAO,IAAI,CAAC;KACf;AAED;;;;AAIG;AACH,IAAA,WAAW,CAAC,SAA8B,EAAA;QACtC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACrC,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;KAC3B;AAED;;;AAGG;IACH,UAAU,GAAA;AACN,QAAA,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACjB,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;KAC3B;AAED;;;;AAIG;AACH,IAAA,gBAAgB,CAAC,IAAgB,EAAA;AAC7B,QAAA,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AAC9B,QAAA,OAAO,IAAI,CAAC;KACf;AAED;;;;AAIG;AACH,IAAA,MAAM,CAAI,MAA4B,EAAA;AAClC,QAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;;QAE/B,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,MAAM,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;AACnC,YAAA,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACtB,YAAA,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SACjC;AACD,QAAA,OAAO,MAAM,CAAC;KACjB;IAED,MAAM,GAAA;QACF,OAAO,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;KAC3E;IACD,OAAO,GAAA;AACH,QAAA,OAAO,IAAI,CAAC,cAAc,IAAI,CAAC,CAAC;KACnC;AACD,IAAA,MAAM,aAAa,GAAA;QACf,IAAI,IAAI,CAAC,YAAY;AAAE,YAAA,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAChD,IAAI,IAAI,CAAC,OAAO,EAAE;AAAE,YAAA,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AAC7C,QAAA,GAAG;AACC,YAAA,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;AACjE,SAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;AAC1B,QAAA,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC5B;IAED,aAAa,GAAA;AACT,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AACzC,QAAA,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC;SACzD;QACD,OAAO,CAAC,WAAW,CAAC,CAAC;KACxB;AAED,IAAA,IAAI,WAAW,GAAA;QACX,OAAO,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,OAAO,EAAE,WAAW,IAAI,KAAK,CAAC;KAClE;IAGD,qBAAqB,GAAA;AACjB,QAAA,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC;KACpC;IACD,oBAAoB,GAAA;AAChB,QAAA,IAAI,IAAI,CAAC,OAAO,EAAE;AACd,YAAA,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC;SACvC;QACD,IAAI,IAAI,CAAC,wBAAwB;YAAE,IAAI,CAAC,wBAAwB,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;QACxF,IAAI,IAAI,CAAC,6BAA6B;YAAE,IAAI,CAAC,6BAA6B,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC;QACvG,IAAI,IAAI,CAAC,iCAAiC;YAAE,IAAI,CAAC,iCAAiC,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;KAEjH;IACD,yBAAyB,GAAA;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC5B;IAED,aAAa,GAAA;AACT,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;KAChD;IACD,gBAAgB,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;KACnC;AAGD,IAAA,OAAO,CAAC,MAAS,EAAA;AACb,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC1D,IAAI,CAAC,yBAAyB,EAAE,CAAA;AAChC,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;AACxB,QAAA,OAAO,IAAI,CAAC;KACf;AACD,IAAA,UAAU,CAAC,QAAa,EAAA;AACpB,QAAA,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;AACxB,QAAA,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE;YACtB,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAC5C;AACD,QAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,yBAAyB,EAAE,CAAA;AAChC,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;AACxB,QAAA,OAAO,IAAI,CAAC;KACf;IAED,gBAAgB,GAAA;AACZ,QAAA,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;AACzB,YAAA,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC;AACvC,YAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;SAC3B;KACJ;IAED,KAAK,GAAA;QACD,IAAI,IAAI,CAAC,YAAY;YAAE,OAAO;QAC9B,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACxB,QAAA,OAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC;KACtC;IAED,MAAM,oBAAoB,CAAC,OAAgB,EAAA;;QAEvC,MAAM,SAAS,GAAG,EAAwB,CAAC;QAC3C,IAAI,OAAO,EAAE;YACT,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC,CAAA;SACnD;AACD,QAAA,GAAG;AACC,YAAA,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AACvC,YAAA,MAAM,KAAK,GAAG,CAAC,GAAG,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;YACrD,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtC,IAAI,GAAG,KAAK,gBAAgB;AAAE,gBAAA,OAAO,KAAK,CAAC;AAC/C,SAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE;AACzB,QAAA,OAAO,IAAI,CAAC;KACf;AAED,IAAA,mBAAmB,CAAC,OAAgB,EAAA;AAChC,QAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;KAClD;IACD,MAAM,0BAA0B,CAAC,OAAgB,EAAA;AAC7C,QAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAC1B,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACxD,IAAI,CAAC,YAAY,EAAE,CAAC;AACpB,QAAA,OAAO,CAAC,CAAC;KACZ;IACD,MAAM,aAAa,CAAC,KAAU,EAAA;;QAE1B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACzC,QAAA,IAAI,CAAC,GAAG;YAAE,OAAO;;AAEjB,QAAA,IAAI,IAAI,CAAC,OAAO,EAAE;AACd,YAAA,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SAChC;AAAM,aAAA,IAAI,IAAI,CAAC,mCAAmC,EAAE;;YAEjD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;SACjC;KACJ;IACD,OAAQ,IAAI,GAAA;AACR,QAAA,IAAI,KAAU,CAAC;QACf,IAAI,WAAW,GAAG,IAAI,CAAC;AACvB,QAAA,GAAG;YACC,MAAM,kBAAkB,EAAE,CAAC;AAC3B,YAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE;;gBAE1B,WAAW,GAAG,IAAI,CAAC;AACnB,gBAAA,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7D,SAAS;aACZ;;YAED,IAAI,WAAW,EAAE;;gBAEb,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC9C;AACD,YAAA,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;;;AAG7B,YAAA,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;gBACnB,SAAS;aACZ;AACD,YAAA,MAAM,KAAK,CAAC;;AAEZ,YAAA,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;gBACzB,WAAW,GAAG,KAAK,CAAC;aACvB;SACJ,QAAQ,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAC;KAC1D;IAcD,MAAM,mBAAmB,CAAC,OAAe,EAAA;AACrC,QAAA,IAAI,IAAI,CAAC,0BAA0B,EAAE;AACjC,YAAA,IAAI,CAAC,0BAA0B,GAAG,KAAK,CAAC;YACxC,OAAO;SACV;QACD,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;AACpD,QAAA,IAAI,GAAG,CAAC;AACR,QAAA,GAAG;AACC,YAAA,GAAG,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;SACrE,QACG,GAAG,KAAK,gBAAgB;YACxB,IAAI,CAAC,0BAA0B,KAAK,KAAK;YACzC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAC5C;AACD,QAAA,IAAI,CAAC,0BAA0B,GAAG,KAAK,CAAC;QACxC,OAAO;KACV;AAED,IAAA,MAAM,QAAQ,GAAA;AACV,QAAA,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,YAAY;YAAE,OAAO;QAClD,IAAI,gBAAgB,GAAG,CAAC,CAAC;AACzB,QAAA,IAAI;AACA,YAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AACxB,YAAA,GAAG;AACC,gBAAA,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,EAAE,CAAA;AAC7B,gBAAA,WAAW,MAAM,KAAK,IAAI,SAAS,EAAE;AACjC,oBAAA,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;AACjC,oBAAA,IAAI,CAAC,YAAY,CAAC,MAAK;AACnB,wBAAA,IAAI,CAAC,cAAc,IAAI,WAAW,CAAC;AACvC,qBAAC,CAAC,CAAA;oBACF,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE;AACzD,wBAAA,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;qBACnC;;oBAED,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AACvC,oBAAA,MAAM,SAAS,GAAG,YAAW;AACzB,wBAAA,IAAI,CAAC,YAAY,CAAC,MAAK;;AAEnB,4BAAA,IAAI,CAAC,kBAAkB,IAAI,WAAW,CAAC;AACvC,4BAAA,IAAI,CAAC,cAAc,IAAI,WAAW,CAAC;AACvC,yBAAC,CAAC,CAAC;AACH,wBAAA,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;AAC7B,wBAAA,IAAI;AACA,4BAAA,IAAI,IAAI,CAAC,QAAQ,IAAI,gBAAgB,EAAE;gCACnC,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,gBAAgB,CAAC;AAC3C,gCAAA,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE;AACtB,oCAAA,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrC,oCAAA,MAAM,KAAK,CAAC,OAAO,CAAC,CAAC;iCACxB;6BACJ;AACD,4BAAA,gBAAgB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AAC9B,4BAAA,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;yBACnC;wBAAC,OAAO,EAAE,EAAE;4BACT,MAAM,CAAC,CAAkB,gBAAA,CAAA,CAAC,CAAC;AAC3B,4BAAA,MAAM,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;yBACjC;gCAAS;AACN,4BAAA,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;AAChC,4BAAA,IAAI,CAAC,YAAY,CAAC,MAAK;AACnB,gCAAA,IAAI,CAAC,kBAAkB,IAAI,WAAW,CAAC;AAC3C,6BAAC,CAAC,CAAC;AACH,4BAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;yBAC3B;AACL,qBAAC,CAAA;AAED,oBAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;oBACxB,aAAa,CAAC,YAAW;wBACrB,MAAM,kBAAkB,EAAE,CAAC;wBAC3B,MAAM,SAAS,EAAE,CAAA;AACrB,qBAAC,CAAC,CAAC;iBACN;AACD,gBAAA,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;AACpC,aAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAC;SAC/B;gBAAS;AACN,YAAA,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC5B;KACJ;IAED,IAAI,GAAA;QACA,IAAI,IAAI,CAAC,YAAY;YAAE,OAAO;QAC9B,IAAI,IAAI,CAAC,WAAW;YAAE,OAAO;QAC7B,aAAa,CAAC,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;KACxC;IACD,YAAY,GAAA;AACR,QAAA,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;KACzB;IACD,SAAS,GAAA;AACL,QAAA,IAAI,IAAI,CAAC,OAAO,EAAE;AACd,YAAA,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;AACzB,YAAA,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;SAC5B;AACD,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACzB,QAAA,IAAI,CAAC,iBAAiB,GAAG,MAAM,EAAE,CAAC;AAClC,QAAA,IAAI,CAAC,UAAU,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,UAAU,EAAE,CAAC;AAClB,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;AACxB,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;AACxB,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;AACxB,QAAA,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AACvB,QAAA,oBAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KACrC;AACJ,CAAA;SAEe,wBAAwB,GAAA;AACpC,IAAA,MAAM,UAAU,GAAG,CAAC,GAAG,oBAAoB,CAAC,CAAC;AAC7C,IAAA,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;QAChC,SAAS,CAAC,SAAS,EAAE,CAAC;KACzB;AACL;;;;"}