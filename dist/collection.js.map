{"version":3,"file":"collection.js","sources":["../src/collection.ts"],"sourcesContent":["\r\n/**\r\n * Converts an array into a chunked array.\r\n * @param arr - The input array.\r\n * @param chunkLength - The length of each chunk.\r\n * @returns A generator that yields chunked arrays.\r\n */\r\nexport function* arrayToChunkedArray<T>(arr: T[], chunkLength: number): Generator<T[], void, unknown> {\r\n    const source = [...arr];\r\n    while (source.length) {\r\n        const s = source.splice(0, chunkLength);\r\n        yield s;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns an array with unique elements from the input array.\r\n *\r\n * @template T - The type of elements in the array.\r\n * @param {T[]} arr - The input array.\r\n * @returns {T[]} - An array with unique elements.\r\n */\r\nexport function unique<T>(arr: T[]): T[] {\r\n    return [...new Set<T>(arr)]\r\n}\r\n\r\n/**\r\n * Generates a sequence of numbers from `from` to `to` (inclusive).\r\n *\r\n * @generator\r\n * @param {number} from - The starting number of the sequence.\r\n * @param {number} to - The ending number of the sequence.\r\n * @yields {number} The next number in the sequence.\r\n  */\r\nexport function* range(from: number, to: number) {\r\n    for (let i = from; i <= to; i++) {\r\n        yield i;\r\n    }\r\n    return;\r\n}"],"names":[],"mappings":"AACA;;;;;AAKG;UACc,mBAAmB,CAAI,GAAQ,EAAE,WAAmB,EAAA;AACjE,IAAA,MAAM,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AACxB,IAAA,OAAO,MAAM,CAAC,MAAM,EAAE;QAClB,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;AACxC,QAAA,MAAM,CAAC,CAAC;KACX;AACL,CAAC;AAED;;;;;;AAMG;AACG,SAAU,MAAM,CAAI,GAAQ,EAAA;IAC9B,OAAO,CAAC,GAAG,IAAI,GAAG,CAAI,GAAG,CAAC,CAAC,CAAA;AAC/B,CAAC;AAED;;;;;;;AAOI;UACa,KAAK,CAAC,IAAY,EAAE,EAAU,EAAA;AAC3C,IAAA,KAAK,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE;AAC7B,QAAA,MAAM,CAAC,CAAC;KACX;IACD,OAAO;AACX;;;;"}