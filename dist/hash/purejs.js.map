{"version":3,"file":"purejs.js","sources":["../../src/hash/purejs.ts"],"sourcesContent":["// Pure JS implementation of hash functions for fallback purposes.\nimport { arrayBufferToBase64Single, writeString } from \"../binary\";\n\n// Constants for FNV-1a hash algorithm\nexport const epochFNV1a = 2166136261 >>> 0;\n\n// Constants for murmurHash3 algorithm\nconst c1 = 0xcc9e2d51;\nconst c2 = 0x1b873593;\nconst r1 = 15;\nconst r2 = 13;\nconst m = 5;\nconst n = 0xe6546b64;\n/**\n * Computes a mixed hash of a given string using MurmurHash3 and FNV-1a hash algorithms.\n * The MurmurHash3 is used as the primary hash, while the FNV-1a hash is used as a secondary hash.\n * This function is fallback for the xxhash.\n *\n * @param str - The input string to hash.\n * @param seed - The seed value for the MurmurHash3 algorithm.\n * @param fnv1aHash - The initial value for the FNV-1a hash algorithm. Defaults to `epochFNV1a`.\n * @returns A tuple containing the resulting MurmurHash3 hash and FNV-1a hash. fnv-1a hash should be used as a supplementary hash.\n */\nexport function mixedHash(str: string, seed: number, fnv1aHash_ = epochFNV1a): [number, number] {\n    let h1 = seed;\n    let fnv1aHash = fnv1aHash_;\n    const len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        let k1 = str.charCodeAt(i);\n\n        // FNV-1a hash (avoiding negative values)\n        fnv1aHash ^= k1;\n        fnv1aHash = Math.imul(fnv1aHash, 0x01000193) >>> 0;\n\n        // MurmurHash3 inner loop (adapted for per-byte-ish processing)\n        k1 *= c1;\n        k1 = (k1 << r1) | (k1 >>> (32 - r1));\n        k1 *= c2;\n\n        h1 ^= k1;\n        h1 = (h1 << r2) | (h1 >>> (32 - r2));\n        h1 = h1 * m + n;\n    }\n\n    h1 ^= len;\n    h1 ^= h1 >>> 16;\n    h1 = Math.imul(h1, 0x85ebca6b);\n    h1 ^= h1 >>> 13;\n    h1 = Math.imul(h1, 0xc2b2ae35);\n    h1 ^= h1 >>> 16;\n\n    return [h1 >>> 0, fnv1aHash];\n}\n\n\nexport function fallbackMixedHashEach(src: string): string {\n    let m = 1;\n    let f = epochFNV1a;\n    [m, f] = mixedHash(`${src.length}${src}`, m, f);\n    // To obfuscate how the hash is generated, express it in radix 36 and concatenate them.\n    // Using 36 based number makes the hash shorter, and potentially leads to a more even distribution of characters in the hash.\n    // This is not a secure hash, but it's good enough for our purposes.\n    return `${m.toString(36)}${f.toString(36)}`;\n}\n\n\n/**\n * Computes a mixed hash from an array of strings using Murmur3 and FNV-1a hash algorithms.\n *\n * @param src - An array of strings to be hashed.\n * @returns A string representing the mixed hash value in base-36 format.\n */\nexport function fallbackMixedHash(src: string[]): string {\n    if (src == null || src.length == 0) return fallbackMixedHashEach(\"**\");\n    let m = 1;\n    let f = epochFNV1a;\n    [m, f] = mixedHash(src[0].length + \"\", m, f);\n    for (const v of src) {\n        [m, f] = mixedHash(v, m, f);\n    }\n    // To obfuscate how the hash is generated, express it in radix 36 and concatenate them.\n    // Using 36 based number makes the hash shorter, and potentially leads to a more even distribution of characters in the hash.\n    // This is not a secure hash, but it's good enough for our purposes.\n    return `${m.toString(36)}${f.toString(36)}`;\n}\n\n/**\n * Calculates the base-64 encoded SHA-1 hash of the given string.\n * Note: Very slow, use only when necessary. Prefer fallbackMixedHashEach for faster hashing.\n * \n * @param src - The string to calculate the hash for.\n * @returns A promise that resolves to the SHA-1 hash as a base64-encoded string.\n */\nexport async function sha1(src: string): Promise<string> {\n    const bytes = writeString(src);\n    const digest = await globalThis.crypto.subtle.digest({ name: \"SHA-1\" }, bytes);\n    return await arrayBufferToBase64Single(digest);\n}\n\nconst te = new TextEncoder();\n\n/**\n * Calculates the hex encoded SHA-1 hash of the given string.\n * Note: Very slow, use only when necessary. Prefer fallbackMixedHashEach for faster hashing.\n * \n * @param src - The string to calculate the hash for.\n * @returns A promise that resolves to the SHA-1 hash as a hex-encoded string.\n */\nexport async function sha1Hash(str: string): Promise<string> {\n    const buffer = te.encode(str);\n    const hashBuffer = await globalThis.crypto.subtle.digest('SHA-1', buffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hexHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    return hexHash;\n}\n"],"names":[],"mappings":"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"}