{"version":3,"file":"base64.js","sources":["../../src/binary/base64.ts"],"sourcesContent":["import { Logger, LOG_LEVEL_VERBOSE } from \"../common/logger\";\n/**\n * Converts a base64 string or an array of base64 strings to an ArrayBuffer.\n * @param base64 - The base64 string or an array of base64 strings to convert.\n * @returns The converted ArrayBuffer.\n */\nexport function base64ToArrayBuffer(base64: string | string[]): ArrayBuffer {\n    if (typeof (base64) == \"string\") return base64ToArrayBufferInternalBrowser(base64);\n    const bufItems = base64.map(e => base64ToArrayBufferInternalBrowser(e));\n    const len = bufItems.reduce((p, c) => p + c.byteLength, 0);\n    const joinedArray = new Uint8Array(len);\n    let offset = 0;\n    bufItems.forEach(e => {\n        joinedArray.set(new Uint8Array(e), offset);\n        offset += e.byteLength;\n    });\n    return joinedArray.buffer;\n}\n\n\n/**\n * Converts a base64 string to an ArrayBuffer in a browser environment.\n * \n * @param base64 - The base64 string to convert.\n * @returns The converted ArrayBuffer.\n */\nexport function base64ToArrayBufferInternalBrowser(base64: string): ArrayBuffer {\n    try {\n        const binary_string = globalThis.atob(base64);\n        const len = binary_string.length;\n        const bytes = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = binary_string.charCodeAt(i);\n        }\n        return bytes.buffer;\n    } catch (ex) {\n        Logger(\"Base64 Decode error\", LOG_LEVEL_VERBOSE);\n        Logger(ex, LOG_LEVEL_VERBOSE);\n        return new ArrayBuffer(0);\n    }\n}\n\n// Base64 Encoding\n\nconst encodeChunkSize = 3 * 50000000;\n\n\n/**\n * Converts an ArrayBuffer or Uint8Array to a base64-encoded string in a browser environment.\n * @param buffer The input buffer to be converted.\n * @returns A Promise that resolves to the base64-encoded string.\n */\nfunction arrayBufferToBase64internalBrowser(buffer: DataView | Uint8Array): Promise<string> {\n    return new Promise((res, rej) => {\n        const blob = new Blob([buffer], { type: \"application/octet-binary\" });\n        const reader = new FileReader();\n        reader.onload = function (evt) {\n            const dataURI = evt.target?.result?.toString() || \"\";\n            if (buffer.byteLength != 0 && (dataURI == \"\" || dataURI == \"data:\")) return rej(new TypeError(\"Could not parse the encoded string\"));\n            const result = dataURI.substring(dataURI.indexOf(\",\") + 1);\n            res(result);\n        };\n        reader.readAsDataURL(blob);\n    });\n}\n\n/**\n * Converts an ArrayBuffer to a base64 string.\n * \n * @param buffer - The ArrayBuffer to convert.\n * @returns A Promise that resolves to the base64 string representation of the ArrayBuffer.\n */\nexport async function arrayBufferToBase64Single(buffer: ArrayBuffer): Promise<string> {\n    const buf = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer);\n    if (buf.byteLength < QUANTUM) return btoa(String.fromCharCode.apply(null, [...buf]));\n    return await arrayBufferToBase64internalBrowser(buf);\n}\n/**\n * Converts an ArrayBuffer to a base64 string.\n * \n * @param buffer - The ArrayBuffer to convert.\n * @returns A Promise that resolves to an array of base64 strings.\n */\nexport async function arrayBufferToBase64(buffer: ArrayBuffer): Promise<string[]> {\n    const buf = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer);\n    if (buf.byteLength < QUANTUM) return [btoa(String.fromCharCode.apply(null, [...buf]))];\n    const bufLen = buf.byteLength;\n    const pieces = [] as string[];\n    let idx = 0;\n    do {\n        const offset = idx * encodeChunkSize;\n        const pBuf = new DataView(buf.buffer, offset, Math.min(encodeChunkSize, buf.byteLength - offset));\n        pieces.push(await arrayBufferToBase64internalBrowser(pBuf));\n        idx++;\n    } while (idx * encodeChunkSize < bufLen);\n    return pieces;\n}\n\n\n//\n// Safari's JavaScriptCOre hardcoded the argument limit to 65536\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\nconst QUANTUM = 32768;\n\n/**\n *  Super fast Text Encoder / Decoder alternative. \n * @param {string} string - The string to convert.\n * @returns {Uint8Array} The Uint8Array buffer representing the string.\n * @see https://gist.github.com/kawanet/a66a0e2657464c57bcff2249286d3a24\n * @see https://qiita.com/kawanet/items/52062b0c86597f7dee7d\n * \n * remark: This is a super fast TextEncoder alternative.\n * todo: When Capacitor or Electron is upgraded, check and reappraise this.\n */\n\nexport function writeString(string: string): Uint8Array {\n    // Prepare enough buffer.\n    const buffer = new Uint8Array(string.length * 4);\n    const length = string.length;\n    let index = 0;\n    let chr = 0;\n    let idx = 0;\n    while (idx < length) {\n        chr = string.charCodeAt(idx++);\n        if (chr < 128) {\n            buffer[index++] = chr;\n        } else if (chr < 0x800) {\n            // 2 bytes\n            buffer[index++] = 0xC0 | (chr >>> 6);\n            buffer[index++] = 0x80 | (chr & 0x3F);\n        } else if (chr < 0xD800 || chr > 0xDFFF) {\n            // 3 bytes\n            buffer[index++] = 0xE0 | (chr >>> 12);\n            buffer[index++] = 0x80 | ((chr >>> 6) & 0x3F);\n            buffer[index++] = 0x80 | (chr & 0x3F);\n        } else {\n            // 4 bytes - surrogate pair\n            chr = (((chr - 0xD800) << 10) | (string.charCodeAt(idx++) - 0xDC00)) + 0x10000;\n            buffer[index++] = 0xF0 | (chr >>> 18);\n            buffer[index++] = 0x80 | ((chr >>> 12) & 0x3F);\n            buffer[index++] = 0x80 | ((chr >>> 6) & 0x3F);\n            buffer[index++] = 0x80 | (chr & 0x3F);\n        }\n    }\n    return buffer.slice(0, index);\n}\n\n/**\n * Converts a Uint8Array buffer to a string.\n * \n * @param buffer - The Uint8Array buffer to convert.\n * @returns The converted string.\n */\nexport function readString(buffer: Uint8Array): string {\n    const length = buffer.length;\n    let index = 0;\n    const end = length;\n    let string = \"\";\n    while (index < end) {\n        const chunk = [];\n        const cEnd = Math.min(index + QUANTUM, end);\n        while (index < cEnd) {\n            const chr = buffer[index++];\n            if (chr < 128) { // 1 byte\n                chunk.push(chr);\n            } else if ((chr & 0xE0) === 0xC0) { // 2 bytes\n                chunk.push((chr & 0x1F) << 6 |\n                    (buffer[index++] & 0x3F));\n            } else if ((chr & 0xF0) === 0xE0) { // 3 bytes\n                chunk.push((chr & 0x0F) << 12 |\n                    (buffer[index++] & 0x3F) << 6 |\n                    (buffer[index++] & 0x3F));\n            } else if ((chr & 0xF8) === 0xF0) { // 4 bytes\n                let code = (chr & 0x07) << 18 |\n                    (buffer[index++] & 0x3F) << 12 |\n                    (buffer[index++] & 0x3F) << 6 |\n                    (buffer[index++] & 0x3F);\n                if (code < 0x010000) {\n                    chunk.push(code);\n                } else { // surrogate pair\n                    code -= 0x010000;\n                    chunk.push((code >>> 10) + 0xD800, (code & 0x3FF) + 0xDC00);\n                }\n            }\n        }\n        string += String.fromCharCode(...chunk);\n    }\n    return string;\n}\n\n\n/**\n * Converts a base64 string or an array of base64 strings to a regular string.\n * @param base64 - The base64 string or an array of base64 strings to convert.\n * @returns The converted regular string.\n * @note This function is used to convert base64 strings to binary strings. And if failed, it returns the original string.\n */\nexport function base64ToString(base64: string | string[]): string {\n    try {\n        if (typeof base64 != \"string\") return base64.map(e => base64ToString(e)).join(\"\");\n        const binary_string = atob(base64);\n        const len = binary_string.length;\n        const bytes = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = binary_string.charCodeAt(i);\n        }\n        return readString(bytes);\n    } catch (ex) {\n        Logger(\"Base64 To String error\", LOG_LEVEL_VERBOSE);\n        Logger(ex, LOG_LEVEL_VERBOSE);\n        if (typeof base64 != \"string\") return base64.join(\"\");\n        return base64\n    }\n}\n\nconst regexpBase64 = /^[A-Za-z0-9+/]+=*$/;\n\n/**\n * Tries to convert a base64 string to an ArrayBuffer.\n * \n * @param base64 - The base64 string to convert.\n * @returns The converted ArrayBuffer if successful, otherwise false.\n */\nexport function tryConvertBase64ToArrayBuffer(base64: string): ArrayBuffer | false {\n    try {\n        const b64F = base64.replace(/\\r|\\n/g, \"\");\n        if (!regexpBase64.test(b64F)) {\n            return false;\n        }\n\n        const binary_string = globalThis.atob(b64F);\n        if (globalThis.btoa(binary_string) !== b64F) {\n            return false;\n        }\n        const len = binary_string.length;\n        const bytes = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = binary_string.charCodeAt(i);\n        }\n        return bytes.buffer;\n    } catch (ex) {\n        return false;\n    }\n}"],"names":[],"mappings":";;AACA;;;;AAIG;AACG,SAAU,mBAAmB,CAAC,MAAyB,EAAA;AACzD,IAAA,IAAI,QAAQ,MAAM,CAAC,IAAI,QAAQ;AAAE,QAAA,OAAO,kCAAkC,CAAC,MAAM,CAAC,CAAC;AACnF,IAAA,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;AAC3D,IAAA,MAAM,WAAW,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;IACxC,IAAI,MAAM,GAAG,CAAC,CAAC;AACf,IAAA,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAG;QACjB,WAAW,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AAC3C,QAAA,MAAM,IAAI,CAAC,CAAC,UAAU,CAAC;AAC3B,KAAC,CAAC,CAAC;IACH,OAAO,WAAW,CAAC,MAAM,CAAC;AAC9B,CAAC;AAGD;;;;;AAKG;AACG,SAAU,kCAAkC,CAAC,MAAc,EAAA;AAC7D,IAAA,IAAI;QACA,MAAM,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC9C,QAAA,MAAM,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC;AACjC,QAAA,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;AAClC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC1B,KAAK,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SAC1C;QACD,OAAO,KAAK,CAAC,MAAM,CAAC;KACvB;IAAC,OAAO,EAAE,EAAE;AACT,QAAA,MAAM,CAAC,qBAAqB,EAAE,iBAAiB,CAAC,CAAC;AACjD,QAAA,MAAM,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;AAC9B,QAAA,OAAO,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;KAC7B;AACL,CAAC;AAED;AAEA,MAAM,eAAe,GAAG,CAAC,GAAG,QAAQ,CAAC;AAGrC;;;;AAIG;AACH,SAAS,kCAAkC,CAAC,MAA6B,EAAA;IACrE,OAAO,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,KAAI;AAC5B,QAAA,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,0BAA0B,EAAE,CAAC,CAAC;AACtE,QAAA,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;AAChC,QAAA,MAAM,CAAC,MAAM,GAAG,UAAU,GAAG,EAAA;AACzB,YAAA,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;AACrD,YAAA,IAAI,MAAM,CAAC,UAAU,IAAI,CAAC,KAAK,OAAO,IAAI,EAAE,IAAI,OAAO,IAAI,OAAO,CAAC;gBAAE,OAAO,GAAG,CAAC,IAAI,SAAS,CAAC,oCAAoC,CAAC,CAAC,CAAC;AACrI,YAAA,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3D,GAAG,CAAC,MAAM,CAAC,CAAC;AAChB,SAAC,CAAC;AACF,QAAA,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAC/B,KAAC,CAAC,CAAC;AACP,CAAC;AAED;;;;;AAKG;AACI,eAAe,yBAAyB,CAAC,MAAmB,EAAA;AAC/D,IAAA,MAAM,GAAG,GAAG,MAAM,YAAY,UAAU,GAAG,MAAM,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;AAC3E,IAAA,IAAI,GAAG,CAAC,UAAU,GAAG,OAAO;AAAE,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACrF,IAAA,OAAO,MAAM,kCAAkC,CAAC,GAAG,CAAC,CAAC;AACzD,CAAC;AACD;;;;;AAKG;AACI,eAAe,mBAAmB,CAAC,MAAmB,EAAA;AACzD,IAAA,MAAM,GAAG,GAAG,MAAM,YAAY,UAAU,GAAG,MAAM,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;AAC3E,IAAA,IAAI,GAAG,CAAC,UAAU,GAAG,OAAO;AAAE,QAAA,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF,IAAA,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,CAAC;IAC9B,MAAM,MAAM,GAAG,EAAc,CAAC;IAC9B,IAAI,GAAG,GAAG,CAAC,CAAC;AACZ,IAAA,GAAG;AACC,QAAA,MAAM,MAAM,GAAG,GAAG,GAAG,eAAe,CAAC;QACrC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC;QAClG,MAAM,CAAC,IAAI,CAAC,MAAM,kCAAkC,CAAC,IAAI,CAAC,CAAC,CAAC;AAC5D,QAAA,GAAG,EAAE,CAAC;AACV,KAAC,QAAQ,GAAG,GAAG,eAAe,GAAG,MAAM,EAAE;AACzC,IAAA,OAAO,MAAM,CAAC;AAClB,CAAC;AAGD;AACA;AACA;AACA,MAAM,OAAO,GAAG,KAAK,CAAC;AAEtB;;;;;;;;;AASG;AAEG,SAAU,WAAW,CAAC,MAAc,EAAA;;IAEtC,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACjD,IAAA,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,GAAG,GAAG,CAAC,CAAC;AACZ,IAAA,OAAO,GAAG,GAAG,MAAM,EAAE;QACjB,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;AAC/B,QAAA,IAAI,GAAG,GAAG,GAAG,EAAE;AACX,YAAA,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,GAAG,CAAC;SACzB;AAAM,aAAA,IAAI,GAAG,GAAG,KAAK,EAAE;;AAEpB,YAAA,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC;AACrC,YAAA,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC;SACzC;aAAM,IAAI,GAAG,GAAG,MAAM,IAAI,GAAG,GAAG,MAAM,EAAE;;AAErC,YAAA,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,IAAI,GAAG,KAAK,EAAE,CAAC,CAAC;AACtC,YAAA,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC;AAC9C,YAAA,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC;SACzC;aAAM;;YAEH,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,MAAM,KAAK,EAAE,KAAK,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,OAAO,CAAC;AAC/E,YAAA,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,IAAI,GAAG,KAAK,EAAE,CAAC,CAAC;AACtC,YAAA,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,KAAK,EAAE,IAAI,IAAI,CAAC,CAAC;AAC/C,YAAA,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC;AAC9C,YAAA,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC;SACzC;KACJ;IACD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AAClC,CAAC;AAED;;;;;AAKG;AACG,SAAU,UAAU,CAAC,MAAkB,EAAA;AACzC,IAAA,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,MAAM,GAAG,GAAG,MAAM,CAAC;IACnB,IAAI,MAAM,GAAG,EAAE,CAAC;AAChB,IAAA,OAAO,KAAK,GAAG,GAAG,EAAE;QAChB,MAAM,KAAK,GAAG,EAAE,CAAC;AACjB,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;AAC5C,QAAA,OAAO,KAAK,GAAG,IAAI,EAAE;AACjB,YAAA,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;AAC5B,YAAA,IAAI,GAAG,GAAG,GAAG,EAAE;AACX,gBAAA,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACnB;iBAAM,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,IAAI,EAAE;gBAC9B,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,IAAI,KAAK,CAAC;qBACvB,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;aACjC;iBAAM,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,IAAI,EAAE;gBAC9B,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,IAAI,KAAK,EAAE;oBACzB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC;qBAC5B,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;aACjC;iBAAM,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,IAAI,EAAE;gBAC9B,IAAI,IAAI,GAAG,CAAC,GAAG,GAAG,IAAI,KAAK,EAAE;oBACzB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,KAAK,EAAE;oBAC9B,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC;qBAC5B,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;AAC7B,gBAAA,IAAI,IAAI,GAAG,QAAQ,EAAE;AACjB,oBAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACpB;AAAM,qBAAA;oBACH,IAAI,IAAI,QAAQ,CAAC;AACjB,oBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,EAAE,IAAI,MAAM,EAAE,CAAC,IAAI,GAAG,KAAK,IAAI,MAAM,CAAC,CAAC;iBAC/D;aACJ;SACJ;QACD,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC,CAAC;KAC3C;AACD,IAAA,OAAO,MAAM,CAAC;AAClB,CAAC;AAGD;;;;;AAKG;AACG,SAAU,cAAc,CAAC,MAAyB,EAAA;AACpD,IAAA,IAAI;QACA,IAAI,OAAO,MAAM,IAAI,QAAQ;AAAE,YAAA,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAClF,QAAA,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;AACnC,QAAA,MAAM,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC;AACjC,QAAA,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;AAClC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC1B,KAAK,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SAC1C;AACD,QAAA,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;KAC5B;IAAC,OAAO,EAAE,EAAE;AACT,QAAA,MAAM,CAAC,wBAAwB,EAAE,iBAAiB,CAAC,CAAC;AACpD,QAAA,MAAM,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;QAC9B,IAAI,OAAO,MAAM,IAAI,QAAQ;AAAE,YAAA,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACtD,QAAA,OAAO,MAAM,CAAA;KAChB;AACL,CAAC;AAED,MAAM,YAAY,GAAG,oBAAoB,CAAC;AAE1C;;;;;AAKG;AACG,SAAU,6BAA6B,CAAC,MAAc,EAAA;AACxD,IAAA,IAAI;QACA,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AAC1B,YAAA,OAAO,KAAK,CAAC;SAChB;QAED,MAAM,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,IAAI,EAAE;AACzC,YAAA,OAAO,KAAK,CAAC;SAChB;AACD,QAAA,MAAM,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC;AACjC,QAAA,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;AAClC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC1B,KAAK,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SAC1C;QACD,OAAO,KAAK,CAAC,MAAM,CAAC;KACvB;IAAC,OAAO,EAAE,EAAE;AACT,QAAA,OAAO,KAAK,CAAC;KAChB;AACL;;;;"}