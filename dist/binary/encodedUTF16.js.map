{"version":3,"file":"encodedUTF16.js","sources":["../../src/binary/encodedUTF16.ts"],"sourcesContent":["import { range } from \"../collection\";\r\n\r\nconst BINARY_CHUNK_MAX = 1024 * 1024 * 30;\r\n\r\n// Table for converting encoding binary\r\nconst table = {} as Record<number, number>;\r\nconst revTable = {} as Record<number, number>;\r\nconst decoderStreamAvailable = (typeof TextDecoderStream !== \"undefined\");\r\n\r\n[...range(0xc0, 0x1bf)].forEach((e, i) => {\r\n    table[i] = e;\r\n    revTable[e] = i;\r\n})\r\n\r\n\r\n\r\n/**\r\n * Encodes a binary buffer into a UTF-16 string.\r\n * \r\n * @param buffer - The binary buffer to encode.\r\n * @returns A promise that resolves to the encoded UTF-16 string.\r\n * @deprecated This function is not recommended for use.\r\n */\r\nexport async function encodeBinaryEach(buffer: Uint8Array): Promise<string> {\r\n    const len = buffer.byteLength;\r\n    const out = new Uint16Array(buffer);\r\n    for (let i = 0; i < len; i++) {\r\n        const char = buffer[i];\r\n        if (char >= 0x26 && char <= 0x7e && char != 0x3a) {\r\n            // out[i] = asciiTable[char];\r\n            // We can leave it.\r\n        } else {\r\n            out[i] = table[char];\r\n        }\r\n    }\r\n    // Return it as utf-16 string.\r\n    return await decodeAsync(out);\r\n}\r\n\r\n\r\n/**\r\n * Encodes a binary buffer into an array of strings.\r\n * If the buffer length is less than BINARY_CHUNK_MAX, it encodes the entire buffer into a single string.\r\n * If the buffer length is greater than or equal to BINARY_CHUNK_MAX, it splits the buffer into chunks and encodes each chunk into a separate string.\r\n * @param buffer The binary buffer to encode.\r\n * @returns A promise that resolves to an array of encoded strings.\r\n * @deprecated Use `encodeBinary` instead. `encodeBinary` uses a base64 encoding, which is more efficient and reliable.\r\n */\r\nexport async function _encodeBinary(buffer: Uint8Array): Promise<string[]> {\r\n    const len = buffer.length;\r\n    if (len < BINARY_CHUNK_MAX) {\r\n        return [await encodeBinaryEach(buffer)];\r\n    }\r\n    const out = [];\r\n    for (let i = 0; i < len; i += BINARY_CHUNK_MAX) {\r\n        out.push(encodeBinaryEach(buffer.subarray(i, i + BINARY_CHUNK_MAX)));\r\n    }\r\n    return Promise.all(out);\r\n}\r\n\r\n\r\n\r\nasync function decodeAsync(buffer: Uint16Array): Promise<string> {\r\n    if (buffer.length == 0) return \"\";\r\n    if (!decoderStreamAvailable) return await decodeAsyncReader(buffer);\r\n    const decoderStream = new TextDecoderStream(\"utf-16\");\r\n    const writer = decoderStream.writable.getWriter();\r\n    writer.write(buffer);\r\n    writer.close();\r\n\r\n    const reader = decoderStream.readable.getReader();\r\n    const result = await reader.read();\r\n\r\n    if (!result.value) {\r\n        throw new Error(\"UTF-16 Parse error\");\r\n    }\r\n\r\n    return result.value;\r\n}\r\n\r\n\r\n\r\nfunction decodeAsyncReader(buffer: Uint16Array): Promise<string> {\r\n    return new Promise<string>((res, rej) => {\r\n        const blob = new Blob([buffer], { type: \"application/octet-binary\" });\r\n        const reader = new FileReader();\r\n        reader.onload = function (evt) {\r\n            const result = evt.target?.result as string;\r\n            if (!result) return rej(\"UTF-16 Parse error\");\r\n            return res(result);\r\n        };\r\n        reader.readAsText(blob, \"utf-16\");\r\n    });\r\n}\r\n\r\n\r\nexport function decodeToArrayBuffer(src: string[]) {\r\n    if (src.length == 1) return _decodeToArrayBuffer(src[0]);\r\n    const bufItems = src.map(e => _decodeToArrayBuffer(e));\r\n    const len = bufItems.reduce((p, c) => p + c.byteLength, 0);\r\n    const joinedArray = new Uint8Array(len);\r\n    let offset = 0;\r\n    bufItems.forEach(e => {\r\n        joinedArray.set(new Uint8Array(e), offset);\r\n        offset += e.byteLength;\r\n    });\r\n    return joinedArray.buffer;\r\n}\r\n\r\nexport function _decodeToArrayBuffer(src: string): ArrayBuffer {\r\n    const out = new Uint8Array(src.length);\r\n    const len = src.length;\r\n    for (let i = 0; i < len; i++) {\r\n        // We can simply pick a char, because of it does not contains surrogate pair or any of like them.\r\n        const char = src.charCodeAt(i);\r\n        if (char >= 0x26 && char <= 0x7e && char != 0x3a) {\r\n            out[i] = char;\r\n        } else {\r\n            out[i] = revTable[char];\r\n        }\r\n    }\r\n    return out.buffer\r\n}"],"names":[],"mappings":"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"}