{"version":3,"file":"encodedUTF16.js","sources":["../../src/binary/encodedUTF16.ts"],"sourcesContent":["import { range } from \"../collection\";\n\nconst BINARY_CHUNK_MAX = 1024 * 1024 * 30;\n\n// Table for converting encoding binary\nconst table = {} as Record<number, number>;\nconst revTable = {} as Record<number, number>;\nconst decoderStreamAvailable = (typeof TextDecoderStream !== \"undefined\");\n\n[...range(0xc0, 0x1bf)].forEach((e, i) => {\n    table[i] = e;\n    revTable[e] = i;\n})\n\n\n\n/**\n * Encodes a binary buffer into a UTF-16 string.\n * \n * @param buffer - The binary buffer to encode.\n * @returns A promise that resolves to the encoded UTF-16 string.\n * @deprecated This function is not recommended for use.\n */\nexport async function encodeBinaryEach(buffer: Uint8Array): Promise<string> {\n    const len = buffer.byteLength;\n    const out = new Uint16Array(buffer);\n    for (let i = 0; i < len; i++) {\n        const char = buffer[i];\n        if (char >= 0x26 && char <= 0x7e && char != 0x3a) {\n            // out[i] = asciiTable[char];\n            // We can leave it.\n        } else {\n            out[i] = table[char];\n        }\n    }\n    // Return it as utf-16 string.\n    return await decodeAsync(out);\n}\n\n\n/**\n * Encodes a binary buffer into an array of strings.\n * If the buffer length is less than BINARY_CHUNK_MAX, it encodes the entire buffer into a single string.\n * If the buffer length is greater than or equal to BINARY_CHUNK_MAX, it splits the buffer into chunks and encodes each chunk into a separate string.\n * @param buffer The binary buffer to encode.\n * @returns A promise that resolves to an array of encoded strings.\n * @deprecated Use `encodeBinary` instead. `encodeBinary` uses a base64 encoding, which is more efficient and reliable.\n */\nexport async function _encodeBinary(buffer: Uint8Array): Promise<string[]> {\n    const len = buffer.length;\n    if (len < BINARY_CHUNK_MAX) {\n        return [await encodeBinaryEach(buffer)];\n    }\n    const out = [];\n    for (let i = 0; i < len; i += BINARY_CHUNK_MAX) {\n        out.push(encodeBinaryEach(buffer.subarray(i, i + BINARY_CHUNK_MAX)));\n    }\n    return Promise.all(out);\n}\n\n\n\nasync function decodeAsync(buffer: Uint16Array): Promise<string> {\n    if (buffer.length == 0) return \"\";\n    if (!decoderStreamAvailable) return await decodeAsyncReader(buffer);\n    const decoderStream = new TextDecoderStream(\"utf-16\");\n    const writer = decoderStream.writable.getWriter();\n    writer.write(buffer);\n    writer.close();\n\n    const reader = decoderStream.readable.getReader();\n    const result = await reader.read();\n\n    if (!result.value) {\n        throw new Error(\"UTF-16 Parse error\");\n    }\n\n    return result.value;\n}\n\n\n\nfunction decodeAsyncReader(buffer: Uint16Array): Promise<string> {\n    return new Promise<string>((res, rej) => {\n        const blob = new Blob([buffer], { type: \"application/octet-binary\" });\n        const reader = new FileReader();\n        reader.onload = function (evt) {\n            const result = evt.target?.result as string;\n            if (!result) return rej(\"UTF-16 Parse error\");\n            return res(result);\n        };\n        reader.readAsText(blob, \"utf-16\");\n    });\n}\n\n\nexport function decodeToArrayBuffer(src: string[]) {\n    if (src.length == 1) return _decodeToArrayBuffer(src[0]);\n    const bufItems = src.map(e => _decodeToArrayBuffer(e));\n    const len = bufItems.reduce((p, c) => p + c.byteLength, 0);\n    const joinedArray = new Uint8Array(len);\n    let offset = 0;\n    bufItems.forEach(e => {\n        joinedArray.set(new Uint8Array(e), offset);\n        offset += e.byteLength;\n    });\n    return joinedArray.buffer;\n}\n\nexport function _decodeToArrayBuffer(src: string): ArrayBuffer {\n    const out = new Uint8Array(src.length);\n    const len = src.length;\n    for (let i = 0; i < len; i++) {\n        // We can simply pick a char, because of it does not contains surrogate pair or any of like them.\n        const char = src.charCodeAt(i);\n        if (char >= 0x26 && char <= 0x7e && char != 0x3a) {\n            out[i] = char;\n        } else {\n            out[i] = revTable[char];\n        }\n    }\n    return out.buffer\n}"],"names":[],"mappings":"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"}